revision;file;methodsignature;leftbody;basebody;rightbody
/home/paper219/Desktop/analysis/fullsample//projects/aws-sdk-java/revisions/rev_5d59017_ef31f49/rev_5d59017-ef31f49;/src/main/java/com/amazonaws/services/glacier/transfer/ArchiveTransferManager;uploadInMultipleParts(String,String,String,File);	        long currentPosition = 0;
	        while (currentPosition < file.length()) {
	            long length = partSize;
	            if (currentPosition + partSize > file.length()) {
	                length = file.length() - currentPosition;
	            }

                Exception failedException = null;
                boolean completed = false;
                int tries = 0;

                while(!completed && tries<5){
                    tries++;
                    InputStream inputSubStream = newInputSubstream(file, currentPosition, length);
                    inputSubStream.mark(-1);
                    String checksum = TreeHashGenerator.calculateTreeHash(inputSubStream);
                    byte[] binaryChecksum = BinaryUtils.fromHex(checksum);
                    inputSubStream.reset();
                    try {
                        glacier.uploadMultipartPart(new UploadMultipartPartRequest()
                                .withAccountId(accountId)
                                .withChecksum(checksum)
                                .withBody(inputSubStream)
                                .withRange("bytes " + currentPosition + "-" + (currentPosition + length - 1) + "/*")
                                .withUploadId(uploadId)
                                .withVaultName(vaultName));
                        completed = true;
                        binaryChecksums.add(binaryChecksum);
                    } catch (Exception e){
                        failedException = e;
                    } finally {
                        try {inputSubStream.close();} catch (Exception e) {}
                    }
                }
                if(!completed && failedException!=null){
                    throw failedException;
                }

	            currentPosition += partSize;
	        }

	        String checksum = TreeHashGenerator.calculateTreeHash(binaryChecksums);

	        String archiveSize = Long.toString(file.length());
	        CompleteMultipartUploadResult completeMultipartUploadResult =
	            glacier.completeMultipartUpload(new CompleteMultipartUploadRequest()
	                .withAccountId(accountId)
	                .withArchiveSize(archiveSize)
	                .withVaultName(vaultName)
	                .withChecksum(checksum)
	                .withUploadId(uploadId));

	        String artifactId = completeMultipartUploadResult.getArchiveId();
	        return new UploadResult(artifactId);
		} catch (Exception e) {
			glacier.abortMultipartUpload(new AbortMultipartUploadRequest(accountId, vaultName, uploadId));
			throw new AmazonClientException("Unable to finish the upload", e);
		};	        long currentPosition = 0;
	        while (currentPosition < file.length()) {
	            long length = partSize;
	            if (currentPosition + partSize > file.length()) {
	                length = file.length() - currentPosition;
	            }

				InputStream inputSubStream = newInputSubstream(file, currentPosition, length);
				inputSubStream.mark(-1);
				String checksum = TreeHashGenerator.calculateTreeHash(inputSubStream);
				byte[] binaryChecksum = BinaryUtils.fromHex(checksum);
				binaryChecksums.add(binaryChecksum);
				inputSubStream.reset();
				
	            try {
	                glacier.uploadMultipartPart(new UploadMultipartPartRequest()
	                    .withAccountId(accountId)
	                    .withChecksum(checksum)
	                    .withBody(inputSubStream)
	                    .withRange("bytes " + currentPosition + "-" + (currentPosition + length - 1) + "/*")
	                    .withUploadId(uploadId)
	                    .withVaultName(vaultName));
	            } finally {
	                try {inputSubStream.close();} catch (Exception e) {}
	            }

	            currentPosition += partSize;
	        }

	        String checksum = TreeHashGenerator.calculateTreeHash(binaryChecksums);

	        String archiveSize = Long.toString(file.length());
	        CompleteMultipartUploadResult completeMultipartUploadResult =
	            glacier.completeMultipartUpload(new CompleteMultipartUploadRequest()
	                .withAccountId(accountId)
	                .withArchiveSize(archiveSize)
	                .withVaultName(vaultName)
	                .withChecksum(checksum)
	                .withUploadId(uploadId));

	        String artifactId = completeMultipartUploadResult.getArchiveId();
	        return new UploadResult(artifactId);
		} catch (Exception e) {
			glacier.abortMultipartUpload(new AbortMultipartUploadRequest(accountId, vaultName, uploadId));
			throw new AmazonClientException("Unable to finish the upload", e);
		};            long currentPosition = 0;
            while (currentPosition < file.length()) {
                long length = partSize;
                if (currentPosition + partSize > file.length()) {
                    length = file.length() - currentPosition;
                }

                InputStream inputSubStream = newInputSubstream(file, currentPosition, length);
                inputSubStream.mark(-1);
                String checksum = TreeHashGenerator.calculateTreeHash(inputSubStream);
                byte[] binaryChecksum = BinaryUtils.fromHex(checksum);
                binaryChecksums.add(binaryChecksum);
                inputSubStream.reset();

                try {
                    glacier.uploadMultipartPart(new UploadMultipartPartRequest()
                        .withAccountId(accountId)
                        .withChecksum(checksum)
                        .withBody(inputSubStream)
                        .withRange("bytes " + currentPosition + "-" + (currentPosition + length - 1) + "/*")
                        .withUploadId(uploadId)
                        .withVaultName(vaultName));
                } finally {
                    try {inputSubStream.close();} catch (Exception e) {}
                }

                currentPosition += partSize;
            }

            String checksum = TreeHashGenerator.calculateTreeHash(binaryChecksums);

            String archiveSize = Long.toString(file.length());
            CompleteMultipartUploadResult completeMultipartUploadResult =
                glacier.completeMultipartUpload(new CompleteMultipartUploadRequest()
                    .withAccountId(accountId)
                    .withArchiveSize(archiveSize)
                    .withVaultName(vaultName)
                    .withChecksum(checksum)
                    .withUploadId(uploadId));

            String artifactId = completeMultipartUploadResult.getArchiveId();
            return new UploadResult(artifactId);
        } catch (Exception e) {
            glacier.abortMultipartUpload(new AbortMultipartUploadRequest(accountId, vaultName, uploadId));
            throw new AmazonClientException("Unable to finish the upload", e);
        }
