revision;file;methodsignature;leftbody;basebody;rightbody
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnections();	public void checkConnections() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port, 2000);
		pool.setResourcesNumber(10);
		pool.init();;    public void checkConnections() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT, 2000);
	pool.setResourcesNumber(10);
	pool.init();;    public void checkConnections() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(10);
	pool.init();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnections();		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	};	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnectionWithDefaultPort();	public void checkConnectionWithDefaultPort() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(10);
		pool.init();;    public void checkConnectionWithDefaultPort() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost");
	pool.setResourcesNumber(10);
	pool.init();;    public void checkConnectionWithDefaultPort() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(10);
	pool.init();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkConnectionWithDefaultPort();		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	};	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    };	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkJedisIsReusedWhenReturned();	public void checkJedisIsReusedWhenReturned() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();;    public void checkJedisIsReusedWhenReturned() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost");
	pool.setResourcesNumber(1);
	pool.init();;    public void checkJedisIsReusedWhenReturned() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkJedisIsReusedWhenReturned();		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");
		pool.returnResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "0");
	pool.returnResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");
	pool.returnResource(jedis);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkJedisIsReusedWhenReturned();		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	};	jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolRepairedWhenJedisIsBroken();	public void checkPoolRepairedWhenJedisIsBroken() throws TimeoutException,
			IOException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();;    public void checkPoolRepairedWhenJedisIsBroken() throws TimeoutException,
	    IOException {
	JedisPool pool = new JedisPool("localhost");
	pool.setResourcesNumber(1);
	pool.init();;    public void checkPoolRepairedWhenJedisIsBroken() throws TimeoutException,
	    IOException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolRepairedWhenJedisIsBroken();		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.quit();
		pool.returnBrokenResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.quit();
	pool.returnBrokenResource(jedis);;	Jedis jedis = pool.getResource(200);
	jedis.quit();
	pool.returnBrokenResource(jedis);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolRepairedWhenJedisIsBroken();		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	};	jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    };	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();	public void checkPoolOverflow() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();;    public void checkPoolOverflow() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost");
	pool.setResourcesNumber(1);
	pool.init();;    public void checkPoolOverflow() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");;	Jedis jedis = pool.getResource(200);
	jedis.auth("foobared");
	jedis.set("foo", "0");;	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();		Jedis newJedis = pool.getResource(200);
		newJedis.auth("foobared");
		newJedis.incr("foo");
	};	Jedis newJedis = pool.getResource(200);
	newJedis.auth("foobared");
	newJedis.incr("foo");
    };	Jedis newJedis = pool.getResource(200);
	newJedis.incr("foo");
    }
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_a402014_3f05aac/rev_a402014-3f05aac;/src/main/java/org/junit/Assert;assertThat(String,T,Matcher<T>);		MatcherAssert.assertThat(reason, actual, matcher);;		if (!matcher.matches(actual)) {
			Description description= new StringDescription();
			description.appendText(reason);
			description.appendText("\nExpected: ");
			matcher.describeTo(description);
			description.appendText("\n     got: ").appendValue(actual)
					.appendText("\n");
			throw new java.lang.AssertionError(description.toString());
		};		if (!matcher.matches(actual)) {
            Description description = new StringDescription();
            description.appendText(reason)
                       .appendText("\nExpected: ")
                       .appendDescriptionOf(matcher)
                       .appendText("\n     but: ");
            matcher.describeMismatch(actual, description);
			throw new java.lang.AssertionError(description.toString());
		}
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf;/src/main/java/junit/framework/JUnit4TestAdapterCache;getNotifier(TestResult,JUnit4TestAdapter);			public void testFinished(Description description)
					throws Exception {
				result.endTest(asSingleTest(description));;			public void testFinished(Description description)
					throws Exception {
				result.endTest(asTest(description));;			public void testFinished(Description description) throws Exception {
				result.endTest(asTestCase(description));
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf;/src/main/java/junit/framework/JUnit4TestAdapterCache;getNotifier(TestResult,JUnit4TestAdapter);			public void testStarted(Description description)
					throws Exception {
				// TODO: this needs to test that the test is created if not seen before
				result.startTest(asSingleTest(description));;			public void testStarted(Description description)
					throws Exception {
				result.startTest(asTest(description));;			public void testStarted(Description description) throws Exception {
				result.startTest(asTestCase(description));
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf;/src/main/java/org/junit/runners/ParentRunner;runChildren(RunNotifier);public void runChildren(final RunNotifier notifier) {
		for (final T each : getCachedChildren())
			fScheduler.schedule(new Runnable() {;private void runChildren(final RunNotifier notifier) {
		for (final T each : getFilteredChildren())
			fScheduler.schedule(new Runnable() {			;private void runChildren(final RunNotifier notifier) {
		for (final T each : getCachedChildren())
			fScheduler.schedule(new Runnable() {
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf;/src/main/java/org/junit/runner/manipulation/Filter;matchMethodDescription(Description);				// TODO: DUP!
				return description.isSuite() || desiredDescription.equals(description);;				if (description.isTest())
					return desiredDescription.equals(description);
				
				// explicitly check if any children want to run
				for (Description each : description.getChildren())
					if (shouldRun(each))
						return true;
				return false;					;				if (description.isTest())
					return desiredDescription.equals(description);
				return true;
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_25fa1d5_2de4d6f/rev_25fa1d5-2de4d6f;/src/main/java/junit/framework/TestSuite;TestSuite(Class<?>);public TestSuite(final Class<?> theClass) {
		addTestsFromTestCase(theClass);;public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(new TestSuite(each.asSubclass(TestCase.class)));;public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(testCaseForClass(each));
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_592b71c_5695469/rev_592b71c-5695469;/src/main/java/junit/framework/TestSuite;TestSuite(Class<?>);public TestSuite(final Class<?> theClass) {
		addTestsFromTestCase(theClass);;public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(new TestSuite(each.asSubclass(TestCase.class)));;public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(testCaseForClass(each));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_7803f5b_e9644a4/rev_7803f5b-e9644a4;/src/main/java/redis/clients/jedis/JedisPool;JedisPool(String,int);public JedisPool(String host, int port) {
        this(new Config(), host, port, Protocol.DEFAULT_TIMEOUT, null, Protocol.DEFAULT_DATABASE);;public JedisPool(String host, int port) {
        super(new Config(), new JedisFactory(host, port,
                Protocol.DEFAULT_TIMEOUT, null));;public JedisPool(final String host, final int port) {
        super(new Config(), new JedisFactory(host, port,
                Protocol.DEFAULT_TIMEOUT, null));
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_e857122_9d8bb06/rev_e857122-9d8bb06;/src/main/java/org/junit/runners/ParentRunner;withClassRules(Statement);		List<TestRule> classRules= classRules();
		return classRules.isEmpty() ? statement :
		    new RunRules(statement, classRules, getDescription());;		final List<TestRule> classRules= classRules();
		if (classRules.isEmpty()) {
			return statement;
		}
		return TestRule.applyAll(classRules, statement, getDescription());;		final List<TestRule> classRules= classRules();
		if (classRules.isEmpty()) {
			return statement;
		}
		Statement next = statement;
		for (final TestRule classRule : classRules) {
			next = classRule.apply(next, getDescription());
		}
		return next;
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_e857122_9d8bb06/rev_e857122-9d8bb06;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;withTestRules(FrameworkMethod,Object,Statement);			Statement statement) {
		List<TestRule> testRules= getTestRules(target);
		return testRules.isEmpty() ? statement :
			new RunRules(statement, testRules, describeChild(method));;			Statement result) {
		return TestRule.applyAll(getTestRules(target), result, describeChild(method));;			Statement result) {
		for (TestRule each : getTestRules(target))
			result= each.apply(result, describeChild(method));
		return result;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryJedis;hdel(byte[],byte[]);public Long hdel(final byte[] key, final byte[] field) {
	checkIsInMulti();
	client.hdel(key, field);
	return client.getIntegerReply();;public Long hdel(final byte[] key, final byte[] field) {
        checkIsInMulti();
        client.hdel(key, field);
        return client.getIntegerReply();;public Long hdel(final byte[] key, final byte[]... fields) {
        checkIsInMulti();
        client.hdel(key, fields);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryJedis;sadd(byte[],byte[]);public Long sadd(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.sadd(key, member);
	return client.getIntegerReply();;public Long sadd(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.sadd(key, member);
        return client.getIntegerReply();;public Long sadd(final byte[] key, final byte[]... members) {
        checkIsInMulti();
        client.sadd(key, members);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryJedis;srem(byte[],byte[]);public Long srem(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.srem(key, member);
	return client.getIntegerReply();;public Long srem(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();;public Long srem(final byte[] key, final byte[]... member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryJedis;zrem(byte[],byte[]);public Long zrem(final byte[] key, final byte[] member) {
	checkIsInMulti();
	client.zrem(key, member);
	return client.getIntegerReply();;public Long zrem(final byte[] key, final byte[] member) {
        checkIsInMulti();
        client.zrem(key, member);
        return client.getIntegerReply();;public Long zrem(final byte[] key, final byte[]... members) {
        checkIsInMulti();
        client.zrem(key, members);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryClient;hdel(byte[],byte[]);public void hdel(final byte[] key, final byte[] field) {
	sendCommand(HDEL, key, field);;public void hdel(final byte[] key, final byte[] field) {
        sendCommand(HDEL, key, field);;public void hdel(final byte[] key, final byte[]... fields) {
        sendCommand(HDEL, joinParameters(key, fields));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryClient;sadd(byte[],byte[]);public void sadd(final byte[] key, final byte[] member) {
	sendCommand(SADD, key, member);;public void sadd(final byte[] key, final byte[] member) {
        sendCommand(SADD, key, member);;public void sadd(final byte[] key, final byte[]... members) {
        sendCommand(SADD, joinParameters(key, members));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryClient;srem(byte[],byte[]);public void srem(final byte[] key, final byte[] member) {
	sendCommand(SREM, key, member);;public void srem(final byte[] key, final byte[] member) {
        sendCommand(SREM, key, member);;public void srem(final byte[] key, final byte[]... members) {
        sendCommand(SREM, joinParameters(key, members));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/BinaryClient;zrem(byte[],byte[]);public void zrem(final byte[] key, final byte[] member) {
	sendCommand(ZREM, key, member);;public void zrem(final byte[] key, final byte[] member) {
        sendCommand(ZREM, key, member);;public void zrem(final byte[] key, final byte[]... members) {
        sendCommand(ZREM, joinParameters( key, members));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/Jedis;hdel(String,String);public Long hdel(final String key, final String field) {
	checkIsInMulti();
	client.hdel(key, field);
	return client.getIntegerReply();;public Long hdel(final String key, final String field) {
        checkIsInMulti();
        client.hdel(key, field);
        return client.getIntegerReply();;public Long hdel(final String key, final String... fields) {
        checkIsInMulti();
        client.hdel(key, fields);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/Jedis;sadd(String,String);public Long sadd(final String key, final String member) {
	checkIsInMulti();
	client.sadd(key, member);
	return client.getIntegerReply();;public Long sadd(final String key, final String member) {
        checkIsInMulti();
        client.sadd(key, member);
        return client.getIntegerReply();;public Long sadd(final String key, final String... members) {
        checkIsInMulti();
        client.sadd(key, members);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/Jedis;srem(String,String);public Long srem(final String key, final String member) {
	checkIsInMulti();
	client.srem(key, member);
	return client.getIntegerReply();;public Long srem(final String key, final String member) {
        checkIsInMulti();
        client.srem(key, member);
        return client.getIntegerReply();;public Long srem(final String key, final String... members) {
        checkIsInMulti();
        client.srem(key, members);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_3da2f2d_dd88c51/rev_3da2f2d-dd88c51;/src/main/java/redis/clients/jedis/Jedis;zrem(String,String);public Long zrem(final String key, final String member) {
	checkIsInMulti();
	client.zrem(key, member);
	return client.getIntegerReply();;public Long zrem(final String key, final String member) {
        checkIsInMulti();
        client.zrem(key, member);
        return client.getIntegerReply();;public Long zrem(final String key, final String... members) {
        checkIsInMulti();
        client.zrem(key, members);
        return client.getIntegerReply();
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_c396cff_95f6c41/rev_c396cff-95f6c41;/src/main/java/org/junit/rules/TemporaryFolder;newFolder(String);public File newFolder(String... folderNames) {
		File file = folder;
		for (String folderName : folderNames) {
			file = new File(file, folderName);
			file.mkdir();
		};public File newFolder(String folderName) {
		File file= new File(folder, folderName);
		file.mkdir();;public File newFolder(String folderName) {
		File file= new File(getRoot(), folderName);
		file.mkdir();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_610f7d4_69f5340/rev_610f7d4-69f5340;/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest;scriptKill();		try {
			jedis.scriptKill();
		}
		catch(JedisDataException e) {
			assertTrue(e.getMessage().contains("No scripts in execution right now."));
		};		try {
			jedis.scriptKill();
		}
		catch(JedisDataException e) {
			assertEquals("ERR No scripts in execution right now.", e.getMessage());
		};	try {
	    jedis.scriptKill();
	} catch (JedisDataException e) {
	    assertTrue(e.getMessage().contains(
		    "No scripts in execution right now."));
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;setUp();	// set up master and slaves
	masterJedis = new Jedis(master.host, master.port);
	masterJedis.auth("foobared");
	masterJedis.slaveofNoOne();

	slaveJedis1 = new Jedis(slave1.host, slave1.port);
	slaveJedis1.auth("foobared");
	slaveJedis1.slaveof(master.host, master.port);
	slaveCount++;

	slaveJedis2 = new Jedis(slave2.host, slave2.port);
	slaveJedis2.auth("foobared");
	slaveJedis2.slaveof(master.host, master.port);
	slaveCount++;

	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());

	// FIXME: The following allows the master/slave relationship to
	// be established, and let sentinels know about this relationship.
	// We can do this more elegantly.
	Thread.sleep(10000);
    };	// set up master and slaves
	masterJedis = new Jedis(master.host, master.port);
	masterJedis.auth("foobared");
	masterJedis.slaveofNoOne();

	slaveJedis1 = new Jedis(slave1.host, slave1.port);
	slaveJedis1.auth("foobared");
	slaveJedis1.slaveof(master.host, master.port);
	slaveCount++;
	
	slaveJedis2 = new Jedis(slave2.host, slave2.port);
	slaveJedis2.auth("foobared");
	slaveJedis2.slaveof(master.host, master.port);
	slaveCount++;

	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());

	// FIXME: The following allows the master/slave relationship to
	// be established, and let sentinels know about this relationship. 
	// We can do this more elegantly.
	Thread.sleep(10000);
    };		// set up master and slaves
		masterJedis = new Jedis(master.getHost(), master.getPort());
		masterJedis.auth("foobared");
		masterJedis.slaveofNoOne();

		slaveJedis1 = new Jedis(slave1.getHost(), slave1.getPort());
		slaveJedis1.auth("foobared");
		slaveJedis1.slaveof(master.getHost(), master.getPort());

		slaveJedis2 = new Jedis(slave2.getHost(), slave2.getPort());
		slaveJedis2.auth("foobared");
		slaveJedis2.slaveof(master.getHost(), master.getPort());

		sentinels.add(sentinel1.toString());
		sentinels.add(sentinel2.toString());

		List<HostAndPort> slaves = new ArrayList<HostAndPort>();
		slaves.add(slave1);
		slaves.add(slave2);

		JedisSentinelTestUtil.waitForSentinelRecognizeRedisReplication(sentinel1, 
				MASTER_NAME, master, slaves);
		JedisSentinelTestUtil.waitForSentinelRecognizeRedisReplication(sentinel2, 
				MASTER_NAME, master, slaves);
		
		// No need to wait for sentinels to recognize each other
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;ensureSafeTwiceFailover();    public void ensureSafeTwiceFailover() throws InterruptedException {
	JedisSentinelPool pool = new JedisSentinelPool("mymaster", sentinels,
		new GenericObjectPoolConfig(), 1000, "foobared", 2);

	// perform failover
	doSegFaultMaster(pool);

	// perform failover once again
	doSegFaultMaster(pool);

	// you can test failover as much as possible
	// but you need to prepare additional slave per failover
    };    public void ensureSafeTwiceFailover() throws InterruptedException {
    	JedisSentinelPool pool = new JedisSentinelPool("mymaster", sentinels,
    			new Config(), 1000, "foobared", 2);
    		
    	// perform failover
    	doSegFaultMaster(pool);
    	
    	// perform failover once again
    	doSegFaultMaster(pool);
    	
    	// you can test failover as much as possible
    	// but you need to prepare additional slave per failover
    };	public void ensureSafeTwiceFailover() throws InterruptedException {
		JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels,
				new Config(), 1000, "foobared", 2);

		// perform failover
		doSegFaultMaster(pool);

		// perform failover once again
		doSegFaultMaster(pool);

		// you can test failover as much as possible
		// but you need to prepare additional slave per failover
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;doSegFaultMaster(JedisSentinelPool);private void doSegFaultMaster(JedisSentinelPool pool)
	    throws InterruptedException {
	// jedis connection should be master
	Jedis jedis = pool.getResource();
	assertEquals("PONG", jedis.ping());;private void doSegFaultMaster(JedisSentinelPool pool) throws InterruptedException {
    	// jedis connection should be master
    	Jedis jedis = pool.getResource();
    	assertEquals("PONG", jedis.ping());;private void doSegFaultMaster(JedisSentinelPool pool) throws InterruptedException {
		HostAndPort oldMaster = pool.getCurrentHostMaster();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;checkPoolOverflow();	GenericObjectPoolConfig config = new GenericObjectPoolConfig();
	config.setMaxTotal(1);
	config.setBlockWhenExhausted(false);
	JedisPool pool = new JedisPool(config, hnp.host, hnp.port);
	Jedis jedis = pool.getResource();
	jedis.auth("foobared");
	jedis.set("foo", "0");;        Config config = new Config();
        config.maxActive = 1;
        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;
        JedisPool pool = new JedisPool(config, hnp.host, hnp.port);
        Jedis jedis = pool.getResource();
        jedis.auth("foobared");
        jedis.set("foo", "0");;        Config config = new Config();
        config.maxActive = 1;
        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;
        JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort());
        Jedis jedis = pool.getResource();
        jedis.auth("foobared");
        jedis.set("foo", "0");
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7;/src/test/java/redis/clients/jedis/tests/JedisPoolTest;securePool();	JedisPoolConfig config = new JedisPoolConfig();
	config.setTestOnBorrow(true);
	JedisPool pool = new JedisPool(config, hnp.host, hnp.port, 2000,
		"foobared");
	Jedis jedis = pool.getResource();
	jedis.set("foo", "bar");
	pool.returnResource(jedis);
	pool.destroy();;        JedisPoolConfig config = new JedisPoolConfig();
        config.setTestOnBorrow(true);
        JedisPool pool = new JedisPool(config, hnp.host, hnp.port, 2000, "foobared");
        Jedis jedis = pool.getResource();
        jedis.set("foo", "bar");
        pool.returnResource(jedis);
        pool.destroy();;        JedisPoolConfig config = new JedisPoolConfig();
        config.setTestOnBorrow(true);
        JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort(), 
        		2000, "foobared");
        Jedis jedis = pool.getResource();
        jedis.set("foo", "bar");
        pool.returnResource(jedis);
        pool.destroy();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_d7c5823_f11c162/rev_d7c5823-f11c162;/src/main/java/redis/clients/jedis/Connection;getObjectMultiBulkReply();@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
	flush();
	pipelinedCommands--;
	return (List<Object>) Protocol.read(inputStream);;@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return (List<Object>) Protocol.read(inputStream);;public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return getRawObjectMultiBulkReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_8fef62e_10c131b/rev_8fef62e-10c131b;/src/main/java/redis/clients/jedis/BinaryJedis;blpop(byte[]);public List<byte[]> blpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> blpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> blpop(byte[]... args) {
        checkIsInMulti();
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_8fef62e_10c131b/rev_8fef62e-10c131b;/src/main/java/redis/clients/jedis/BinaryJedis;brpop(byte[]);public List<byte[]> brpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> brpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> brpop(byte[]... args) {
        checkIsInMulti();
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4fb85d0_51a4bf9/rev_4fb85d0-51a4bf9;/src/main/java/redis/clients/jedis/Jedis;getEvalResult();	return evalResult(client.getOne());;	Object result = client.getOne();
	
	if (result instanceof byte[])
	    return SafeEncoder.encode((byte[]) result);

	if (result instanceof List<?>) {
	    List<?> list = (List<?>) result;
	    List<String> listResult = new ArrayList<String>(list.size());
	    for (Object bin : list) {
		listResult.add((bin == null ? null : SafeEncoder
			.encode((byte[]) bin)));
	    }

	    return listResult;
	}

	return result;;	Object result = client.getOne();

	if (result instanceof byte[])
	    return SafeEncoder.encode((byte[]) result);

	if (result instanceof List<?>) {
	    List<?> list = (List<?>) result;
	    List<String> listResult = new ArrayList<String>(list.size());
	    for (Object bin : list) {
		listResult.add((bin == null ? null : SafeEncoder
			.encode((byte[]) bin)));
	    }

	    return listResult;
	}

	return result;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_e4de670_bfa4a80/rev_e4de670-bfa4a80;/src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler;getConnectionFromSlot(int);	return  connectionPool.getResource();;	currentConnection = connectionPool.getResource();
	return connectionPool.getResource();;	currentConnection = connectionPool.getResource();
	return currentConnection;
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_cf2a11a_d955958/rev_cf2a11a-d955958;/src/main/java/org/junit/internal/MethodSorter;getDeclaredMethods(Class<?>);        Method[] methods = clazz.getDeclaredMethods();
        Arrays.sort(methods, new Comparator<Method>() {
            public int compare(Method m1, Method m2) {
                int i1 = m1.getName().hashCode();
                int i2 = m2.getName().hashCode();
                return i1 != i2 ? i1 - i2 : m1.toString().compareTo(m2.toString());
            }
        });;        Method[] methods = clazz.getDeclaredMethods();
        Arrays.sort(methods, new Comparator<Method>() {
            @Override public int compare(Method m1, Method m2) {
                int i1 = m1.getName().hashCode();
                int i2 = m2.getName().hashCode();
                return i1 != i2 ? i1 - i2 : m1.toString().compareTo(m2.toString());
            }
        });;        Comparator<Method> comparator= getSorter(clazz.getAnnotation(FixMethodOrder.class));
        
        Method[] methods= clazz.getDeclaredMethods();
        if (comparator != null) {
            Arrays.sort(methods, comparator);
        }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_db76522_e7bc4f5/rev_db76522-e7bc4f5;/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler;initializeSlotsCache(Set<HostAndPort>);private void initializeSlotsCache(Set<HostAndPort> nodes) {
	for (HostAndPort hostAndPort : nodes) {
	    JedisPool jp = new JedisPool(poolConfig, hostAndPort.getHost(),;private void initializeSlotsCache(Set<HostAndPort> nodes) {
	for (HostAndPort hostAndPort : nodes) {
	    JedisPool jp = new JedisPool(hostAndPort.getHost(),;private void initializeSlotsCache(Set<HostAndPort> startNodes) {
	for (HostAndPort hostAndPort : startNodes) {
	    JedisPool jp = new JedisPool(hostAndPort.getHost(),
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_8d783ef_28938e9/rev_8d783ef-28938e9;/src/main/java/org/junit/Assert;assertThat(String,T,Matcher<?superT>);		MatcherAssert.assertThat(reason, actual, matcher);;		if (!matcher.matches(actual)) {
			Description description= new StringDescription();
			description.appendText(reason);
			description.appendText("\nExpected: ");
			description.appendDescriptionOf(matcher);
			description.appendText("\n     got: ");
			description.appendValue(actual);
			description.appendText("\n");
			throw new java.lang.AssertionError(description.toString());
		};		if (!matcher.matches(actual)) {
			Description description= new StringDescription();
			description.appendText(reason);
			description.appendText("\nExpected: ");
			description.appendDescriptionOf(matcher);
			description.appendText("\n     got: ");
			description.appendValue(actual);
			description.appendText("\n");
			java.lang.AssertionError assertionError= new java.lang.AssertionError(
					description.toString());
			if (actual instanceof Throwable)
				assertionError.initCause((Throwable) actual);
			throw assertionError;
		}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd;/src/main/java/redis/clients/jedis/BinaryJedis;blpop(byte[]);public List<byte[]> blpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> blpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> blpop(byte[]... args) {
        checkIsInMulti();
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd;/src/main/java/redis/clients/jedis/BinaryJedis;brpop(byte[]);public List<byte[]> brpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<byte[]> brpop(byte[] arg) {
        checkIsInMulti();
        byte[][] args = new byte[1][];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<byte[]> brpop(byte[]... args) {
        checkIsInMulti();
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd;/src/main/java/redis/clients/jedis/Jedis;blpop(String);public List<String> blpop(String... args) {
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> blpop(String... args) {
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> blpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd;/src/main/java/redis/clients/jedis/Jedis;brpop(String);public List<String> brpop(String... args) {
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;;public List<String> brpop(String... args) {
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;;public List<String> brpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_670e019_0a8aa7a/rev_670e019-0a8aa7a;/src/main/java/redis/clients/jedis/JedisSentinelPool;returnBrokenResource(Jedis);@Override
    public void returnBrokenResource(final Jedis resource) {
	returnBrokenResourceObject(resource);;public void returnBrokenResource(final Jedis resource) {
	returnBrokenResourceObject(resource);;public void returnBrokenResource(final Jedis resource) {
	if (resource != null) {
	    returnBrokenResourceObject(resource);
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_670e019_0a8aa7a/rev_670e019-0a8aa7a;/src/main/java/redis/clients/jedis/JedisSentinelPool;returnResource(Jedis);@Override
    public void returnResource(final Jedis resource) {
	resource.resetState();
	returnResourceObject(resource);;public void returnResource(final Jedis resource) {
	resource.resetState();
	returnResourceObject(resource);;public void returnResource(final Jedis resource) {
	if (resource != null) {
	    resource.resetState();
	    returnResourceObject(resource);
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_6c68624_74b527d/rev_6c68624-74b527d;/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler;discoverClusterNodesAndSlots(Jedis);	    HostAndPort node = getHostAndPortFromNodeLine(nodeInfo, jedis);
        setNodeIfNotExist(node);

	    JedisPool nodePool = nodes.get(getNodeKey(node));
	    populateNodeSlots(nodeInfo, nodePool);;	    HostAndPort node = getHostAndPortFromNodeLine(nodeInfo, jedis);
	    setNodeIfNotExist(node);
	    
	    JedisPool nodePool = nodes.get(getNodeKey(node));
	    populateNodeSlots(nodeInfo, nodePool);;	    ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(
		    nodeInfo, new HostAndPort(jedis.getClient().getHost(),
			    jedis.getClient().getPort()));

	    HostAndPort targetNode = clusterNodeInfo.getNode();
	    setNodeIfNotExist(targetNode);
	    assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_6c68624_74b527d/rev_6c68624-74b527d;/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler;setNodeIfNotExist(HostAndPort);	
	JedisPool nodePool = new JedisPool(poolConfig, node.getHost(), node.getPort());;	
	JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());;
	JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/BinaryJedis;multi(TransactionBlock);	try {
	    client.multi();
	    client.getOne();	// expected OK
	    jedisTransaction.execute();
	    results = jedisTransaction.exec();
	} catch (Exception ex) {
	    jedisTransaction.discard();
	};	try {
	    client.multi();
	    jedisTransaction.execute();
	    results = jedisTransaction.exec();
	} catch (Exception ex) {
	    jedisTransaction.discard();
	};	client.multi();
	jedisTransaction.execute();
	results = jedisTransaction.exec();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Transaction;exec();    	// Discard QUEUED or ERROR
    	client.getMany(getPipelinedResponseLength());
    	
        client.exec();;        client.exec();
        client.getAll(1); // Discard all but the last reply;	client.exec();
	client.getAll(1); // Discard all but the last reply
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Transaction;execGetResponse();    	// Discard QUEUED or ERROR
    	client.getMany(getPipelinedResponseLength());
    	
        client.exec();;        client.exec();
        client.getAll(1); // Discard all but the last reply;	client.exec();
	client.getAll(1); // Discard all but the last reply
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Transaction;discard();    	client.getMany(getPipelinedResponseLength());
        client.discard();
        inTransaction = false;
        clean();
        return client.getStatusCodeReply();;        client.discard();
        client.getAll(1); // Discard all but the last reply
        inTransaction = false;
        clean();
        return client.getStatusCodeReply();;	client.discard();
	client.getAll(1); // Discard all but the last reply
	inTransaction = false;
	clean();
	return client.getStatusCodeReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;sendCommand(Command,byte[]);        connect();
        Protocol.sendCommand(outputStream, cmd, args);
        return this;;        connect();
        Protocol.sendCommand(outputStream, cmd, args);
        pipelinedCommands++;
        return this;;	try {
	    connect();
	    Protocol.sendCommand(outputStream, cmd, args);
	    pipelinedCommands++;
	    return this;
	} catch (JedisConnectionException ex) {
	    // Any other exceptions related to connection?
	    broken = true;
	    throw ex;
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;sendCommand(Command);        connect();
        Protocol.sendCommand(outputStream, cmd, new byte[0][]);
        return this;;        connect();
        Protocol.sendCommand(outputStream, cmd, new byte[0][]);
        pipelinedCommands++;
        return this;;	try {
	    connect();
	    Protocol.sendCommand(outputStream, cmd, new byte[0][]);
	    pipelinedCommands++;
	    return this;
	} catch (JedisConnectionException ex) {
	    // Any other exceptions related to connection?
	    broken = true;
	    throw ex;
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getStatusCodeReply();        flush();
        final byte[] resp = (byte[]) Protocol.read(inputStream);
        if (null == resp) {
            return null;
        } else {
            return SafeEncoder.encode(resp);
        };        flush();
        pipelinedCommands--;
        final byte[] resp = (byte[]) Protocol.read(inputStream);
        if (null == resp) {
            return null;
        } else {
            return SafeEncoder.encode(resp);
        };	flush();
	pipelinedCommands--;
	final byte[] resp = (byte[]) readProtocolWithCheckingBroken();
	if (null == resp) {
	    return null;
	} else {
	    return SafeEncoder.encode(resp);
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getBinaryBulkReply();        flush();
        return (byte[]) Protocol.read(inputStream);;        flush();
        pipelinedCommands--;
        return (byte[]) Protocol.read(inputStream);;	flush();
	pipelinedCommands--;
	return (byte[]) readProtocolWithCheckingBroken();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getIntegerReply();        flush();
        return (Long) Protocol.read(inputStream);;        flush();
        pipelinedCommands--;
        return (Long) Protocol.read(inputStream);;	flush();
	pipelinedCommands--;
	return (Long) readProtocolWithCheckingBroken();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getBinaryMultiBulkReply();        flush();
        return (List<byte[]>) Protocol.read(inputStream);;        flush();
        pipelinedCommands--;
        return (List<byte[]>) Protocol.read(inputStream);;	flush();
	pipelinedCommands--;
	return (List<byte[]>) readProtocolWithCheckingBroken();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getObjectMultiBulkReply();@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
        flush();
        return (List<Object>) Protocol.read(inputStream);;@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return (List<Object>) Protocol.read(inputStream);;public List<Object> getObjectMultiBulkReply() {
	flush();
	pipelinedCommands--;
	return getRawObjectMultiBulkReply();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2;/src/main/java/redis/clients/jedis/Connection;getIntegerMultiBulkReply();        flush();
        return (List<Long>) Protocol.read(inputStream);;        flush();
        pipelinedCommands--;
        return (List<Long>) Protocol.read(inputStream);;	flush();
	pipelinedCommands--;
	return (List<Long>) readProtocolWithCheckingBroken();
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;withMethodRules(FrameworkMethod,List<TestRule>,Object,Statement);private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,
			Object target, Statement result) {
		for (org.junit.rules.MethodRule each : getMethodRules(target))
			if (! testRules.contains(each))
				result= each.apply(result, method, target);
		return result;
	};@SuppressWarnings("deprecation")
	private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,
			Object target, Statement result) {
		for (org.junit.rules.MethodRule each : getMethodRules(target))
			if (! testRules.contains(each))
				result= each.apply(result, method, target);
		return result;
	};@SuppressWarnings("deprecation")
    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,
            Object target, Statement result) {
        for (org.junit.rules.MethodRule each : getMethodRules(target)) {
            if (!testRules.contains(each)) {
                result = each.apply(result, method, target);
            }
        }
        return result;
    }
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;getMethodRules(Object);private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
		return rules(target);
	};@SuppressWarnings("deprecation")
	private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
		return rules(target);
	};@SuppressWarnings("deprecation")
    private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
        return rules(target);
    }
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9;/src/main/java/org/junit/runners/BlockJUnit4ClassRunner;rules(Object);protected List<org.junit.rules.MethodRule> rules(Object target) {
		return getTestClass().getAnnotatedFieldValues(target, Rule.class,
				org.junit.rules.MethodRule.class);
	};@Deprecated
	protected List<org.junit.rules.MethodRule> rules(Object target) {
		return getTestClass().getAnnotatedFieldValues(target, Rule.class,
				org.junit.rules.MethodRule.class);
	};@Deprecated
    protected List<org.junit.rules.MethodRule> rules(Object target) {
        return getTestClass().getAnnotatedFieldValues(target, Rule.class,
                org.junit.rules.MethodRule.class);
    }
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_6fb53a7_2f879b9/rev_6fb53a7-2f879b9;/src/main/java/org/junit/rules/TestWatcher;apply(Statement,Description);				startingQuietly(description, errors);
				try {
					base.evaluate();
					succeededQuietly(description, errors);
				} catch (AssumptionViolatedException e) {
					errors.add(e);
					skippedQuietly(e, description, errors);
				} catch (Throwable t) {
					errors.add(t);
					failedQuietly(t, description, errors);
				} finally {
					finishedQuietly(description, errors);
				}
				
				MultipleFailureException.assertEmpty(errors);
			}
		};
	};				startingQuietly(description, errors);
				try {
					base.evaluate();
					succeededQuietly(description, errors);
				} catch (AssumptionViolatedException e) {
					skipped(e, description);
					throw e;
				} catch (Throwable t) {
					errors.add(t);
					failedQuietly(t, description, errors);
				} finally {
					finishedQuietly(description, errors);
				}
				
				MultipleFailureException.assertEmpty(errors);
			}
		};
	};                startingQuietly(description, errors);
                try {
                    base.evaluate();
                    succeededQuietly(description, errors);
                } catch (AssumptionViolatedException e) {
                    skipped(e, description);
                    throw e;
                } catch (Throwable t) {
                    errors.add(t);
                    failedQuietly(t, description, errors);
                } finally {
                    finishedQuietly(description, errors);
                }

                MultipleFailureException.assertEmpty(errors);
            }
        };
    }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/main/java/redis/clients/jedis/JedisSentinelPool;JedisSentinelPool(String,Set<String>,GenericObjectPoolConfig,int,String,int);	    final GenericObjectPoolConfig poolConfig, int timeout,
	    final String password, final int database) {

	this.poolConfig = poolConfig;
	this.timeout = timeout;
	this.password = password;
	this.database = database;;	    final GenericObjectPoolConfig poolConfig, int timeout,
	    final String password, final int database) {
	this.poolConfig = poolConfig;
	this.timeout = timeout;
	this.password = password;
	this.database = database;;			final GenericObjectPoolConfig poolConfig, int timeout,
			final String password, final int database) {
		this.poolConfig = poolConfig;
		this.timeout = timeout;
		this.password = password;
		this.database = database;
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/main/java/redis/clients/jedis/JedisSentinelPool;initPool(HostAndPort);	if (!master.equals(currentHostMaster)) {
	    currentHostMaster = master;
	    if (factory == null) {
	        factory = new JedisFactory(master.getHost(), master.getPort(),
	                                   timeout, password, database);
	        initPool(poolConfig, factory);
	    } else {
	        factory.setHostAndPort(currentHostMaster);
	        // although we clear the pool, we still have to check the returned object
	        // in getResource, this call only clears idle instances, not borrowed instances
	        internalPool.clear();
	    }

	    log.info("Created JedisPool to master at " + master);;	if (!master.equals(currentHostMaster)) {
	    currentHostMaster = master;
	    log.info("Created JedisPool to master at " + master);
	    initPool(poolConfig,
		    new JedisFactory(master.getHost(), master.getPort(),
			    timeout, password, database));;		if (!master.equals(currentHostMaster)) {
			currentHostMaster = master;
			log.info("Created JedisPool to master at " + master);
			initPool(poolConfig,
					new JedisFactory(master.getHost(), master.getPort(),
							timeout, password, database));
		}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/main/java/redis/clients/jedis/JedisSentinelPool;initSentinels(Set<String>,String);		Jedis jedis = null;
		try {
		    jedis = new Jedis(hap.getHost(), hap.getPort());

		    if (master == null) {
			master = toHostAndPort(jedis
				.sentinelGetMasterAddrByName(masterName));
			log.fine("Found Redis master at " + master);
			break outer;
		    }
		} catch (JedisConnectionException e) {
		    log.warning("Cannot connect to sentinel running @ " + hap
			    + ". Trying next one.");
		} finally {
		    if (jedis != null) {
	        jedis.close();
		    };		try {
		    Jedis jedis = new Jedis(hap.getHost(), hap.getPort());

		    if (master == null) {
			master = toHostAndPort(jedis
				.sentinelGetMasterAddrByName(masterName));
			log.fine("Found Redis master at " + master);
			jedis.disconnect();
			break outer;
		    }
		} catch (JedisConnectionException e) {
		    log.warning("Cannot connect to sentinel running @ " + hap
			    + ". Trying next one.");;		for (String sentinel : sentinels) {
			final HostAndPort hap = toHostAndPort(Arrays.asList(sentinel
					.split(":")));
			MasterListener masterListener = new MasterListener(masterName,
					hap.getHost(), hap.getPort());
			masterListeners.add(masterListener);
			masterListener.start();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;setUp();    public void setUp() throws Exception {
	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());;    public void setUp() throws Exception {
	sentinels.add(sentinel1.toString());;	public void setUp() throws Exception {
		sentinels.add(sentinel1.toString());
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;setUp();	sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	sentinelJedis2 = new Jedis(sentinel2.getHost(), sentinel2.getPort());
    };	sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
    };		sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;ensureSafeTwiceFailover();	forceFailover(pool);
	// after failover sentinel needs a bit of time to stabilize before a new failover
	Thread.sleep(100);
	forceFailover(pool);;	forceFailover(pool);
	forceFailover(pool);;		forceFailover(pool);
		forceFailover(pool);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;forceFailover(JedisSentinelPool);	// jedis connection should be master
	Jedis beforeFailoverJedis = pool.getResource();
	assertEquals("PONG", beforeFailoverJedis.ping());;	// jedis connection should be master
	Jedis jedis = pool.getResource();
	assertEquals("PONG", jedis.ping());;		// jedis connection should be master
		Jedis jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;waitForFailover(JedisSentinelPool,HostAndPort);	    throws InterruptedException {
	HostAndPort newMaster = JedisSentinelTestUtil
		.waitForNewPromotedMaster(MASTER_NAME, sentinelJedis1, sentinelJedis2);;	    throws InterruptedException {
	HostAndPort newMaster = JedisSentinelTestUtil
		.waitForNewPromotedMaster(sentinelJedis1);;			throws InterruptedException {
		HostAndPort newMaster = JedisSentinelTestUtil
				.waitForNewPromotedMaster(sentinelJedis1);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b;/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest;waitForJedisSentinelPoolRecognizeNewMaster(JedisSentinelPool,HostAndPort);	while (true) {
	    HostAndPort currentHostMaster = pool.getCurrentHostMaster();;	while (true) {
	    String host = pool.getCurrentHostMaster().getHost();
	    int port = pool.getCurrentHostMaster().getPort();;		while (true) {
			String host = pool.getCurrentHostMaster().getHost();
			int port = pool.getCurrentHostMaster().getPort();
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40;/src/main/java/redis/clients/jedis/JedisCluster;JedisCluster(Set<HostAndPort>,GenericObjectPoolConfig);public JedisCluster(Set<HostAndPort> nodes,
        final GenericObjectPoolConfig poolConfig) {
	this(nodes, DEFAULT_TIMEOUT, DEFAULT_MAX_REDIRECTIONS, poolConfig);
    };public JedisCluster(Set<HostAndPort> nodes,
        final GenericObjectPoolConfig poolConfig) {
    this(nodes, DEFAULT_TIMEOUT, DEFAULT_MAX_REDIRECTIONS, poolConfig);
    };public JedisCluster(Set<HostAndPort> nodes, final GenericObjectPoolConfig poolConfig) {
    this(nodes, DEFAULT_TIMEOUT, DEFAULT_MAX_REDIRECTIONS, poolConfig);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40;/src/main/java/redis/clients/jedis/JedisCluster;JedisCluster(Set<HostAndPort>,int,GenericObjectPoolConfig);public JedisCluster(Set<HostAndPort> nodes, int timeout,
        final GenericObjectPoolConfig poolConfig) {
	this(nodes, timeout, DEFAULT_MAX_REDIRECTIONS, poolConfig);
    };public JedisCluster(Set<HostAndPort> nodes, int timeout,
        final GenericObjectPoolConfig poolConfig) {
    this(nodes, timeout, DEFAULT_MAX_REDIRECTIONS, poolConfig);
    };public JedisCluster(Set<HostAndPort> nodes, int timeout, final GenericObjectPoolConfig poolConfig) {
    this(nodes, timeout, DEFAULT_MAX_REDIRECTIONS, poolConfig);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40;/src/main/java/redis/clients/jedis/JedisCluster;JedisCluster(Set<HostAndPort>,int,int,GenericObjectPoolConfig);public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout,
        int maxRedirections, final GenericObjectPoolConfig poolConfig) {
	super(jedisClusterNode, timeout, maxRedirections, poolConfig);
    };public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout,
        int maxRedirections, final GenericObjectPoolConfig poolConfig) {
    this.connectionHandler = new JedisSlotBasedConnectionHandler(
            jedisClusterNode, poolConfig);
    this.timeout = timeout;
    this.maxRedirections = maxRedirections;
    };public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout, int maxRedirections,
      final GenericObjectPoolConfig poolConfig) {
    this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig);
    this.timeout = timeout;
    this.maxRedirections = maxRedirections;
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40;/src/main/java/redis/clients/jedis/BinaryJedis;eval(byte[],List<byte[]>,List<byte[]>);	client.setTimeoutInfinite();
	client.eval(script, toByteArray(keys.size()), getParamsWithBinary(keys, args));
	return client.getOne();
    };	client.setTimeoutInfinite();
	client.eval(script, toByteArray(keys.size()), getParams(keys, args));
	return client.getOne();
    };    return eval(script, toByteArray(keys.size()), getParams(keys, args));
  }
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_8d7f5cc_38d9130/rev_8d7f5cc-38d9130;/src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier;addMultiPointMethods(ParameterSignature,List<PotentialAssignment>);            Class<?> returnType = dataPointsMethod.getReturnType();
            
            if (returnType.isArray() && sig.canPotentiallyAcceptType(returnType.getComponentType())) {
                try {
                    addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));
                } catch (Throwable e) {
                    // ignore and move on
                };            try {
                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));
            } catch (Throwable e) {
                // ignore and move on;            try {
                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));
            } catch (Throwable t) {
                DataPoints annotation = dataPointsMethod.getAnnotation(DataPoints.class);
                if (annotation != null) {
                    for (Class<? extends Throwable> ignored : annotation.ignoredExceptions()) {
                        if (ignored.isAssignableFrom(t.getClass())) {
                            return;
                        }
                    }
                }
                throw t;
/home/paper219/Desktop/analysis/fullsample//projects/junit/revisions/rev_8d7f5cc_38d9130/rev_8d7f5cc-38d9130;/src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest;theoryMeansOnlyAssumeShouldFail();    public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {
        Result result = runTheoryClass(TheoryWithNoUnassumedParameters.class);
        Assert.assertEquals(1, result.getFailureCount());
    };	public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {
		JUnitCore junitRunner = new JUnitCore();
		Runner theoryRunner = new Theories(TheoryWithNoUnassumedParameters.class);
		Request request = Request.runner(theoryRunner);
		Result result = junitRunner.run(request);
		Assert.assertEquals(1, result.getFailureCount());
	};	public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {
		Result result = runTheoryClass(TheoryWithNoUnassumedParameters.class);
		Assert.assertEquals(1, result.getFailureCount());
	}
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2;/src/main/java/redis/clients/jedis/JedisCluster;echo(String);    // note that it'll be run from arbitary node
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {;    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {;    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;blpop(String);    public List<String> blpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(arg);
	    }
	}.run(arg);
    };    public List<String> blpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(arg);
	    }
	}.run(null);
    };  @Deprecated
  public List<String> blpop(final String arg) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.blpop(arg);
      }
    }.run(arg);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;brpop(String);    public List<String> brpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(arg);
	    }
	}.run(arg);
    };    public List<String> brpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(arg);
	    }
	}.run(null);
    };  @Deprecated
  public List<String> brpop(final String arg) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.brpop(arg);
      }
    }.run(arg);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;hscan(String,String);    public ScanResult<Entry<String, String>> hscan(final String key,
	    final String cursor) {
	return new JedisClusterCommand<ScanResult<Entry<String, String>>>(
		connectionHandler, timeout, maxRedirections) {
	    @Override
	    public ScanResult<Entry<String, String>> execute(Jedis connection) {
		return connection.hscan(key, cursor);
	    }
	}.run(key);
    };    public ScanResult<Entry<String, String>> hscan(final String key,
	    final String cursor) {
	return new JedisClusterCommand<ScanResult<Entry<String, String>>>(
		connectionHandler, timeout, maxRedirections) {
	    @Override
	    public ScanResult<Entry<String, String>> execute(Jedis connection) {
		return connection.hscan(key, cursor);
	    }
	}.run(null);
    };  public ScanResult<Entry<String, String>> hscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<Entry<String, String>>>(connectionHandler,
        maxRedirections) {
      @Override
      public ScanResult<Entry<String, String>> execute(Jedis connection) {
        return connection.hscan(key, cursor);
      }
    }.run(key);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;sscan(String,String);    public ScanResult<String> sscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<String> execute(Jedis connection) {
		return connection.sscan(key, cursor);
	    }
	}.run(key);
    };    public ScanResult<String> sscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<String> execute(Jedis connection) {
		return connection.sscan(key, cursor);
	    }
	}.run(null);
    };  public ScanResult<String> sscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<String>>(connectionHandler, maxRedirections) {
      @Override
      public ScanResult<String> execute(Jedis connection) {
        return connection.sscan(key, cursor);
      }
    }.run(key);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;zscan(String,String);    public ScanResult<Tuple> zscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<Tuple> execute(Jedis connection) {
		return connection.zscan(key, cursor);
	    }
	}.run(key);
    };    public ScanResult<Tuple> zscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<Tuple> execute(Jedis connection) {
		return connection.zscan(key, cursor);
	    }
	}.run(null);
    };  public ScanResult<Tuple> zscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler, maxRedirections) {
      @Override
      public ScanResult<Tuple> execute(Jedis connection) {
        return connection.zscan(key, cursor);
      }
    }.run(key);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;blpop(int,String);    public List<String> blpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(timeout, key);
	    }
	}.run(key);
    };    public List<String> blpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(timeout,key);
	    }
	}.run(null);
    };  public List<String> blpop(final int timeout, final String key) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.blpop(timeout, key);
      }
    }.run(key);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1;/src/main/java/redis/clients/jedis/JedisCluster;brpop(int,String);    public List<String> brpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(timeout, key);
	    }
	}.run(key);
    };    public List<String> brpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(timeout,key);
	    }
	}.run(null);
    };  public List<String> brpop(final int timeout, final String key) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.brpop(timeout, key);
      }
    }.run(key);
  }
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783;/src/main/java/redis/clients/jedis/BinaryJedis;pfcount(byte[]);  public long pfcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    client.pfcount(key);;  public long pfcount(final byte[] key) {
    checkIsInMulti();
    client.pfcount(key);;  public Long pfcount(byte[]... keys) {
    checkIsInMulti();
    client.pfcount(keys);
/home/paper219/Desktop/analysis/fullsample//projects/jedis/revisions/rev_1e5e10c_48170f7/rev_1e5e10c-48170f7;/src/main/java/redis/clients/jedis/BinaryJedis;pfcount(byte[]);  public long pfcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    client.pfcount(key);;  public long pfcount(final byte[] key) {
    checkIsInMulti();
    client.pfcount(key);;  public Long pfcount(byte[]... keys) {
    checkIsInMulti();
    client.pfcount(keys);
