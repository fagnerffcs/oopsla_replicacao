file;ssmergeConf
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_d61f4d7_f9e7887/rev_d61f4d7-f9e7887/src/main/java/redis/clients/jedis/Protocol.java;<<<<<<< MINE
private Object processBulkReply(DataInputStream is) {
	int len = Integer.parseInt(readLine(is));
	if (len == -1) {
	    return null;
	}
	byte[] read = new byte[len];
	int offset = 0;
	try {
		while(offset < len) {
		    offset += is.read(read, offset, (len - offset));
		}
	    // read 2 more bytes for the command delimiter
	    is.read();
	    is.read();
	} catch (IOException e) {
	    throw new JedisException(e);
	}

	return new String(read, CHARSET);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_d61f4d7_f9e7887/rev_d61f4d7-f9e7887/src/test/java/redis/clients/jedis/tests/ProtocolTest.java;<<<<<<< MINE
@Test
    public void fragmentedBulkReply() {
    	FragmentedByteArrayInputStream fis = new FragmentedByteArrayInputStream("$30\r\n012345678901234567890123456789\r\n".getBytes());
    	Protocol protocol = new Protocol();
    	String response = (String) protocol.read(new DataInputStream(fis));
    	assertEquals("012345678901234567890123456789", response);
    	assertEquals(3, fis.getReadMethodCallCount());
    }
=======
@Test
    public void fragmentedBulkReply() {
    	FragmentedByteArrayInputStream fis = new FragmentedByteArrayInputStream("$30\r\n012345678901234567890123456789\r\n".getBytes());
    	Protocol protocol = new Protocol();
    	String response = (String) protocol.read(new RedisInputStream(fis));
    	assertEquals("012345678901234567890123456789", response);
//    	assertEquals(3, fis.getReadMethodCallCount());
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	public void checkConnections() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port, 2000);
		pool.setResourcesNumber(10);
		pool.init();
=======
    public void checkConnections() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(10);
	pool.init();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	}
=======
	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	public void checkConnectionWithDefaultPort() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(10);
		pool.init();
=======
    public void checkConnectionWithDefaultPort() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(10);
	pool.init();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "bar");
		assertEquals("bar", jedis.get("foo"));
		pool.returnResource(jedis);
		pool.destroy();
	}
=======
	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "bar");
	assertEquals("bar", jedis.get("foo"));
	pool.returnResource(jedis);
	pool.destroy();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	public void checkJedisIsReusedWhenReturned() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();
=======
    public void checkJedisIsReusedWhenReturned() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");
		pool.returnResource(jedis);
=======
	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");
	pool.returnResource(jedis);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	}
=======
	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	public void checkPoolRepairedWhenJedisIsBroken() throws TimeoutException,
			IOException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();
=======
    public void checkPoolRepairedWhenJedisIsBroken() throws TimeoutException,
	    IOException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.quit();
		pool.returnBrokenResource(jedis);
=======
	Jedis jedis = pool.getResource(200);
	jedis.quit();
	pool.returnBrokenResource(jedis);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.incr("foo");
		pool.returnResource(jedis);
		pool.destroy();
	}
=======
	jedis = pool.getResource(200);
	jedis.incr("foo");
	pool.returnResource(jedis);
	pool.destroy();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	public void checkPoolOverflow() throws TimeoutException {
		JedisPool pool = new JedisPool(host, port);
		pool.setResourcesNumber(1);
		pool.init();
=======
    public void checkPoolOverflow() throws TimeoutException {
	JedisPool pool = new JedisPool("localhost", Protocol.DEFAULT_PORT,
		2000, "foobared");
	pool.setResourcesNumber(1);
	pool.init();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis jedis = pool.getResource(200);
		jedis.auth("foobared");
		jedis.set("foo", "0");
=======
	Jedis jedis = pool.getResource(200);
	jedis.set("foo", "0");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_e4ee2c0_f454880/rev_e4ee2c0-f454880/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
		Jedis newJedis = pool.getResource(200);
		newJedis.auth("foobared");
		newJedis.incr("foo");
	}
=======
	Jedis newJedis = pool.getResource(200);
	newJedis.incr("foo");
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Jedis(JedisShardInfo shardInfo) {
        client = new Client(shardInfo.getHost(), shardInfo.getPort());
        client.setTimeout(shardInfo.getTimeout());
        this.password = shardInfo.getPassword();
=======
public Jedis(final JedisShardInfo shardInfo) {
    	super(shardInfo);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Integer zcount(String key, double min, double max) {
        runChecks();
=======
public Integer zcount(final String key, final double min, final double max) {
        checkIsInMulti();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public String ping() {
        runChecks();
        client.ping();
        return client.getStatusCodeReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public void quit() {
        runChecks();
        client.quit();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public String flushDB() {
        runChecks();
        client.flushDB();
        return client.getStatusCodeReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Integer dbSize() {
        runChecks();
        client.dbSize();
        return client.getIntegerReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public String select(int index) {
        runChecks();
        client.select(index);
        return client.getStatusCodeReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public String flushAll() {
        runChecks();
        client.flushAll();
        return client.getStatusCodeReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public void connect() throws UnknownHostException, IOException {
        if (!client.isConnected()) {
            client.connect();
            if (this.password != null) {
                this.auth(this.password);
            }
        }
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public String auth(String password) {
        runChecks();
        client.auth(password);
        return client.getStatusCodeReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f625489_d3362da/rev_f625489-d3362da/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
protected Connection sendCommand(String name, String... args) {
        protocol.sendCommand(outputStream, name, args);
        pipelinedCommands++;
        return this;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_333a9bc_e7e4c4c/rev_333a9bc-e7e4c4c/src/main/java/redis/clients/jedis/Transaction.java;<<<<<<< MINE
=======
public void setbit(String key, long offset, String value) {
        client.setbit(key, offset, value);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_333a9bc_e7e4c4c/rev_333a9bc-e7e4c4c/src/main/java/redis/clients/jedis/Transaction.java;<<<<<<< MINE
        return client.getStatusCodeReply() == "1";
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_333a9bc_e7e4c4c/rev_333a9bc-e7e4c4c/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
        List<Object> all = new ArrayList<Object>();
        flush();
        while (pipelinedCommands > 0) {
            all.add(protocol.read(inputStream));
            pipelinedCommands--;
        }
        return all;
=======
        return getAll(0);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_219beb3_b77d9de/rev_219beb3-b77d9de/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
=======
@Override
		protected void runChild(final Runner runner, final RunNotifier notifier) {
			Callable<Object> callable= new Callable<Object>() {
				public Object call() throws Exception {
					superRunChild(runner, notifier);
					return null;
				}
			};
			fCollator.process(callable);
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_219beb3_b77d9de/rev_219beb3-b77d9de/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
=======
@Override
		public void run(RunNotifier notifier) {
			super.run(notifier);
			for (Future<Object> each : fCollator.results)
				try {
					each.get();
				} catch (Exception e) {
					e.printStackTrace();
				} 
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_219beb3_b77d9de/rev_219beb3-b77d9de/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
=======
@Override
		protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {
			Callable<Object> callable= new Callable<Object>() {
				public Object call() throws Exception {
					superRunChild(method, notifier);
					return null;
				}
			};
			fCollator.process(callable);
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_219beb3_b77d9de/rev_219beb3-b77d9de/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
=======
@Override
		public void run(RunNotifier notifier) {
			super.run(notifier);
			for (Future<Object> each : fCollator.results)
				try {
					each.get();
				} catch (Exception e) {
					e.printStackTrace();
				} 
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_2527d9a_2386579/rev_2527d9a-2386579/src/main/java/org/junit/experimental/interceptor/TestWatchman.java;<<<<<<< MINE
public void starting(FrameworkMethod method) throws Exception {
	}
=======
public void starting(FrameworkMethod method) {
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b737131_ff2ff91/rev_b737131-ff2ff91/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
private static <T> Runner parallelize(ParentRunner<T> runner) {
		runner.setRunnerInterceptor(new RunnerInterceptor() {
			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();

			private final ExecutorService fService= Executors
					.newCachedThreadPool();

			public void runChild(final Runnable childStatement) {
				fResults.add(fService.submit(new Callable<Object>() {
					public Object call() throws Exception {
						childStatement.run();
						return null;
					}
				}));
			}

			public void finished() {
				for (Future<Object> each : fResults)
					try {
						each.get();
					} catch (Exception e) {
						e.printStackTrace();
					}
			}
		});
		return runner;
	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b737131_ff2ff91/rev_b737131-ff2ff91/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
@Override
	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)
			throws Throwable {
		// TODO (May 4, 2009 4:09:16 PM): no guarantees here
		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super
				.getRunner(builder, testClass);
		return fMethods ? parallelize(runner) : runner;
	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_9577910_f2594e3/rev_9577910-f2594e3/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
private static <T> Runner parallelize(ParentRunner<T> runner) {
		runner.setRunnerInterceptor(new RunnerInterceptor() {
			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();

			private final ExecutorService fService= Executors
					.newCachedThreadPool();

			public void runChild(final Runnable childStatement) {
				fResults.add(fService.submit(new Callable<Object>() {
					public Object call() throws Exception {
						childStatement.run();
						return null;
					}
				}));
			}

			public void finished() {
				for (Future<Object> each : fResults)
					try {
						each.get();
					} catch (Exception e) {
						e.printStackTrace();
					}
			}
		});
		return runner;
	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_9577910_f2594e3/rev_9577910-f2594e3/src/main/java/org/junit/experimental/ParallelComputer.java;<<<<<<< MINE
@Override
	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)
			throws Throwable {
		// TODO (May 4, 2009 4:09:16 PM): no guarantees here
		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super
				.getRunner(builder, testClass);
		return fMethods ? parallelize(runner) : runner;
	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_a402014_3f05aac/rev_a402014-3f05aac/src/main/java/org/junit/matchers/JUnitMatchers.java;<<<<<<< MINE
public static <T> Matcher<T> isOneOf(T... objects) {
		List<Matcher<? super T>> matchers = new ArrayList<Matcher<? super T>>();
		for (T each : objects) {
			matchers.add(equalTo(each));
		}
		return anyOf(matchers);
	}
=======
public static <T> Matcher<T> isOneOf(T... objects) {
		List<Matcher<? super T>> matchers = new ArrayList<Matcher<? super T>>();
		for (T each : objects) {
			matchers.add(is(each));
		}
		return anyOf(matchers);
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_99a84a5_c865737/rev_99a84a5-c865737/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java;<<<<<<< MINE
=======
private void validateInterceptorField(Field field, List<Throwable> errors) {
		if (!MethodRule.class.isAssignableFrom(field.getType()))
			errors.add(new Exception("Field " + field.getName()
					+ " must implement StatementInterceptor"));
		if (!Modifier.isPublic(field.getModifiers()))
			errors.add(new Exception("Field " + field.getName()
					+ " must be public"));
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_99a84a5_c865737/rev_99a84a5-c865737/src/main/java/org/junit/experimental/max/MaxHistory.java;<<<<<<< MINE
public static MaxHistory forFolder(File file) {
		if (file.exists())
			try {
				return readHistory(file);
			} catch (CouldNotReadCoreException e) {
				e.printStackTrace();
				file.delete();
			}
		return new MaxHistory(file);
=======
public static MaxHistory forFolder(File file) {
		// TODO: temp!
		if (file.getPath() == null)
			throw new NullPointerException();
		if (file.exists())
			try {
				return readHistory(file);
			} catch (CouldNotReadCoreException e) {
				e.printStackTrace();
				file.delete();
			}
		return new MaxHistory(file);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_99a84a5_c865737/rev_99a84a5-c865737/src/main/java/org/junit/experimental/interceptor/TestName.java;<<<<<<< MINE
=======
@Override
	public void starting(FrameworkMethod method) {
		fName= method.getName();
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_99a84a5_c865737/rev_99a84a5-c865737/src/main/java/org/junit/experimental/interceptor/ExpectedException.java;<<<<<<< MINE
=======
public void expect(Matcher<?> matcher) {
		if (fMatcher == null)
			fMatcher= matcher;
		else
			fMatcher= both(fMatcher).and(matches(matcher));
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/junit/framework/JUnit4TestAdapterCache.java;<<<<<<< MINE
public List<Test> asTestList(Plan plan) {
		if (plan.isTest())
			return Arrays.asList(asTest(plan));
		else {
			List<Test> returnThis = new ArrayList<Test>();
			for (Plan child : plan.getChildren()) {
				returnThis.add(asTest(child));
			}
			return returnThis;
		}
	}
=======
public List<Test> asTestList(Plan plan) {
		Description description= plan.getDescription();
		if (description.isTest())
			return Arrays.asList(asTestCase(description));
		else {
			List<Test> returnThis= new ArrayList<Test>();
			for (Plan child : plan.getChildren()) {
				returnThis.add(asTest(child));
			}
			return returnThis;
		}
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/junit/framework/JUnit4TestAdapterCache.java;<<<<<<< MINE
public Test asTest(Plan plan) {
		if (plan.isSuite())
			return createTest(plan);
		else
			return asSingleTest(plan.getDescription());
	}
=======
public Test asTest(Plan plan) {
		Description description= plan.getDescription();
		if (description.isSuite())
			return asTestSuite(plan);
		else
			return asTestCase(description);
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/org/junit/runners/ParentRunner.java;<<<<<<< MINE
public void runChildren(final RunNotifier notifier) {
		for (final T each : getCachedChildren())
			fScheduler.schedule(new Runnable() {
=======
private void runChildren(final RunNotifier notifier) {
		for (final T each : getCachedChildren())
			fScheduler.schedule(new Runnable() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/org/junit/runners/ParentRunner.java;<<<<<<< MINE
public List<T> getCachedChildren() {
		if (fCachedChildren == null)
			fCachedChildren= getChildren();
		return fCachedChildren;
	}
=======
private List<T> getCachedChildren() {
		if (fCachedChildren == null)
			fCachedChildren= getChildren();
		return fCachedChildren;
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/org/junit/runner/Plan.java;<<<<<<< MINE
public abstract Description getDescription();
=======
public Description getDescription() {
		return fDescription;
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/org/junit/runner/Plan.java;<<<<<<< MINE
public abstract List<Plan> getChildren();
=======
public List<Plan> getChildren() {
		ArrayList<Plan> results= new ArrayList<Plan>();
		ArrayList<Description> children= fDescription.getChildren();
		for (Description each : children)
			results.add(Plan.fromDescription(each));
		return results;
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/main/java/org/junit/runner/Plan.java;<<<<<<< MINE
public static Plan fromDescription(final Description description) {
		return new Plan() {
			@Override
			public Description getDescription() {
				return description;
			}
			
			@Override
			public List<Plan> getChildren() {
				List<Description> childrenDescs= description.getChildrenInternal();
				ArrayList<Plan> children= new ArrayList<Plan>();
				for (Description each : childrenDescs)
					children.add(Plan.fromDescription(each));
				return children;
			}
		};
	}
=======
static Plan fromDescription(Description description) {
		return new Plan(description);
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_b33b4b0_c3873cf/rev_b33b4b0-c3873cf/src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java;<<<<<<< MINE
=======
@Test
	public void descriptionAndRunNotificationsAreConsistent() {
		Result result= JUnitCore.runClasses(CompatibilityTest.class);
		assertEquals(0, result.getIgnoreCount());

		Runner runner= Request.aClass(CompatibilityTest.class).getRunner();
		Description description= runner.getDescription();
		assertEquals(1, description.getChildren().size());
		assertEquals("initializationError", description.getChildren().get(0)
				.getMethodName());
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_25fa1d5_2de4d6f/rev_25fa1d5-2de4d6f/src/main/java/junit/framework/TestSuite.java;<<<<<<< MINE
public TestSuite(final Class<?> theClass) {
		addTestsFromTestCase(theClass);
=======
public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(testCaseForClass(each));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_592b71c_5695469/rev_592b71c-5695469/src/main/java/junit/framework/TestSuite.java;<<<<<<< MINE
public TestSuite(final Class<?> theClass) {
		addTestsFromTestCase(theClass);
=======
public TestSuite (Class<?>... classes) {
		for (Class<?> each : classes)
			addTest(testCaseForClass(each));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_63f40a8_ab51452/rev_63f40a8-ab51452/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java;<<<<<<< MINE
protected List<MethodRule> rules(Object test) {
		List<MethodRule> results= new ArrayList<MethodRule>();
		for (FrameworkField each : ruleFields()) {
			if (MethodRule.class.isAssignableFrom(each.getType())) {
				results.add(createRule(test, each));
			}
		}
		return results;
	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f27f809_d97f30a/rev_f27f809-d97f30a/src/test/java/redis/clients/jedis/tests/SharedJedisPipelineTest.java;<<<<<<< MINE
=======
@Before
    public void setUp() throws Exception {
        Jedis jedis = new Jedis(redis1.host, redis1.port);
        jedis.auth("foobared");
        jedis.flushAll();
        jedis.disconnect();
        jedis = new Jedis(redis2.host, redis2.port);
        jedis.auth("foobared");
        jedis.flushAll();
        jedis.disconnect();

        JedisShardInfo shardInfo1 = new JedisShardInfo(redis1.host, redis1.port);
        JedisShardInfo shardInfo2 = new JedisShardInfo(redis2.host, redis2.port);
        shardInfo1.setPassword("foobared");
        shardInfo2.setPassword("foobared");
        List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();
        shards.add(shardInfo1);
        shards.add(shardInfo2);
        this.jedis = new ShardedJedis(shards);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_f27f809_d97f30a/rev_f27f809-d97f30a/src/test/java/redis/clients/jedis/tests/SharedJedisPipelineTest.java;<<<<<<< MINE
=======
@Test
    public void pipeline() throws UnsupportedEncodingException {
        ShardedJedisPipeline p = jedis.pipelined();
        p.set("foo", "bar");
        p.get("foo");
        List<Object> results = p.syncAndReturnAll();

        assertEquals(2, results.size());
        assertEquals("OK", results.get(0));
        assertEquals("bar", results.get(1));
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_cb1b19b_04f6038/rev_cb1b19b-04f6038/src/test/java/redis/clients/jedis/tests/SharedJedisPipelineTest.java;<<<<<<< MINE
=======
@Test
    public void pipelineResponse() {
        jedis.set("string", "foo");
        jedis.lpush("list", "foo");
        jedis.hset("hash", "foo", "bar");
        jedis.zadd("zset", 1, "foo");
        jedis.sadd("set", "foo");

        ShardedJedisPipeline p = jedis.pipelined();
        Response<String> string = p.get("string");
        Response<String> list = p.lpop("list");
        Response<String> hash = p.hget("hash", "foo");
        Response<Set<String>> zset = p.zrange("zset", 0, -1);
        Response<String> set = p.spop("set");
        Response<Boolean> blist = p.exists("list");
        Response<Double> zincrby = p.zincrby("zset", 1, "foo");
        Response<Long> zcard = p.zcard("zset");
        p.lpush("list", "bar");
        Response<List<String>> lrange = p.lrange("list", 0, -1);
        Response<Map<String, String>> hgetAll = p.hgetAll("hash");
        p.sadd("set", "foo");
        Response<Set<String>> smembers = p.smembers("set");
        Response<Set<Tuple>> zrangeWithScores = p.zrangeWithScores("zset", 0,
                -1);
        p.sync();

        assertEquals("foo", string.get());
        assertEquals("foo", list.get());
        assertEquals("bar", hash.get());
        assertEquals("foo", zset.get().iterator().next());
        assertEquals("foo", set.get());
        assertFalse(blist.get());
        assertEquals(Double.valueOf(2), zincrby.get());
        assertEquals(Long.valueOf(1), zcard.get());
        assertEquals(1, lrange.get().size());
        assertNotNull(hgetAll.get().get("foo"));
        assertEquals(1, smembers.get().size());
        assertEquals(1, zrangeWithScores.get().size());
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/ShardedJedis.java;<<<<<<< MINE
public Set<String> zrange(String key, int start, int end) {
	Jedis j = getShard(key);
	return j.zrange(key, start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/ShardedJedis.java;<<<<<<< MINE
public Set<String> zrevrange(String key, int start, int end) {
	Jedis j = getShard(key);
	return j.zrevrange(key, start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/ShardedJedis.java;<<<<<<< MINE
public Set<Tuple> zrangeWithScores(String key, int start, int end) {
	Jedis j = getShard(key);
	return j.zrangeWithScores(key, start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/ShardedJedis.java;<<<<<<< MINE
public Set<Tuple> zrevrangeWithScores(String key, int start, int end) {
	Jedis j = getShard(key);
	return j.zrevrangeWithScores(key, start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/ShardedJedis.java;<<<<<<< MINE
public Long zremrangeByRank(String key, int start, int end) {
	Jedis j = getShard(key);
	return j.zremrangeByRank(key, start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrange(final byte[] key, final int start, final int end) {
	sendCommand(ZRANGE, key, toByteArray(start), toByteArray(end));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrange(final byte[] key, final int start, final int end) {
	sendCommand(ZREVRANGE, key, toByteArray(start), toByteArray(end));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrangeWithScores(final byte[] key, final int start,
	    final int end) {
	sendCommand(ZRANGE, key, toByteArray(start), toByteArray(end),
		WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrangeWithScores(final byte[] key, final int start,
	    final int end) {
	sendCommand(ZREVRANGE, key, toByteArray(start), toByteArray(end),
		WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zremrangeByRank(final byte[] key, final int start, final int end) {
	sendCommand(ZREMRANGEBYRANK, key, toByteArray(start), toByteArray(end));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Set<String> zrange(final String key, final int start, final int end) {
	checkIsInMulti();
	client.zrange(key, start, end);
	final List<String> members = client.getMultiBulkReply();
	return new LinkedHashSet<String>(members);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Set<String> zrevrange(final String key, final int start,
	    final int end) {
	checkIsInMulti();
	client.zrevrange(key, start, end);
	final List<String> members = client.getMultiBulkReply();
	return new LinkedHashSet<String>(members);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Set<Tuple> zrangeWithScores(final String key, final int start,
	    final int end) {
	checkIsInMulti();
	client.zrangeWithScores(key, start, end);
	Set<Tuple> set = getTupledSet();
	return set;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Set<Tuple> zrevrangeWithScores(final String key, final int start,
	    final int end) {
	checkIsInMulti();
	client.zrevrangeWithScores(key, start, end);
	Set<Tuple> set = getTupledSet();
	return set;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Long zremrangeByRank(final String key, final int start, final int end) {
	checkIsInMulti();
	client.zremrangeByRank(key, start, end);
	return client.getIntegerReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void zrange(final String key, final int start, final int end) {
	zrange(SafeEncoder.encode(key), start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void zrevrange(final String key, final int start, final int end) {
	zrevrange(SafeEncoder.encode(key), start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void zrangeWithScores(final String key, final int start,
	    final int end) {
	zrangeWithScores(SafeEncoder.encode(key), start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void zrevrangeWithScores(final String key, final int start,
	    final int end) {
	zrevrangeWithScores(SafeEncoder.encode(key), start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void zremrangeByRank(final String key, final int start, final int end) {
	zremrangeByRank(SafeEncoder.encode(key), start, end);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Commands.java;<<<<<<< MINE
public void zrangeWithScores(final String key, final int start,
	    final int end);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_457cccc_088f84b/rev_457cccc-088f84b/src/main/java/redis/clients/jedis/Commands.java;<<<<<<< MINE
public void zrevrangeWithScores(final String key, final int start,
	    final int end);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zcount(final byte[] key, final double min, final double max) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZCOUNT, key, byteArrayMin, byteArrayMax);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrangeByScore(final byte[] key, final double min,
            final double max) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrangeByScore(final byte[] key, final double max,
            final double min) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrangeByScore(final byte[] key, final double min,
            final double max, final int offset, int count) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,
                LIMIT.raw, toByteArray(offset), toByteArray(count));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrangeByScore(final byte[] key, final double max,
            final double min, final int offset, int count) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,
                LIMIT.raw, toByteArray(offset), toByteArray(count));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrangeByScoreWithScores(final byte[] key, final double min,
            final double max) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,
                WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrangeByScoreWithScores(final byte[] key, final double max,
            final double min) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,
                WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrangeByScoreWithScores(final byte[] key, final double min,
            final double max, final int offset, final int count) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZRANGEBYSCORE, key, byteArrayMin, byteArrayMax,
                LIMIT.raw, toByteArray(offset), toByteArray(count),
                WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_88e662e_155aff0/rev_88e662e-155aff0/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void zrevrangeByScoreWithScores(final byte[] key, final double max,
            final double min, final int offset, final int count) {

        byte byteArrayMin[] = (min == Double.NEGATIVE_INFINITY) ? "-inf".getBytes() : toByteArray(min);
        byte byteArrayMax[] = (max == Double.POSITIVE_INFINITY) ? "+inf".getBytes() : toByteArray(max);

        sendCommand(ZREVRANGEBYSCORE, key, byteArrayMax, byteArrayMin,
                LIMIT.raw, toByteArray(offset), toByteArray(count),
                WITHSCORES.raw);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	// set up master and slaves
	masterJedis = new Jedis(master.host, master.port);
	masterJedis.auth("foobared");
	masterJedis.slaveofNoOne();

	slaveJedis1 = new Jedis(slave1.host, slave1.port);
	slaveJedis1.auth("foobared");
	slaveJedis1.slaveof(master.host, master.port);
	slaveCount++;

	slaveJedis2 = new Jedis(slave2.host, slave2.port);
	slaveJedis2.auth("foobared");
	slaveJedis2.slaveof(master.host, master.port);
	slaveCount++;

	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());

	// FIXME: The following allows the master/slave relationship to
	// be established, and let sentinels know about this relationship.
	// We can do this more elegantly.
	Thread.sleep(10000);
    }
=======
		// set up master and slaves
		masterJedis = new Jedis(master.getHost(), master.getPort());
		masterJedis.auth("foobared");
		masterJedis.slaveofNoOne();

		slaveJedis1 = new Jedis(slave1.getHost(), slave1.getPort());
		slaveJedis1.auth("foobared");
		slaveJedis1.slaveof(master.getHost(), master.getPort());

		slaveJedis2 = new Jedis(slave2.getHost(), slave2.getPort());
		slaveJedis2.auth("foobared");
		slaveJedis2.slaveof(master.getHost(), master.getPort());

		sentinels.add(sentinel1.toString());
		sentinels.add(sentinel2.toString());

		List<HostAndPort> slaves = new ArrayList<HostAndPort>();
		slaves.add(slave1);
		slaves.add(slave2);

		JedisSentinelTestUtil.waitForSentinelRecognizeRedisReplication(sentinel1, 
				MASTER_NAME, master, slaves);
		JedisSentinelTestUtil.waitForSentinelRecognizeRedisReplication(sentinel2, 
				MASTER_NAME, master, slaves);
		
		// No need to wait for sentinels to recognize each other
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
    public void ensureSafeTwiceFailover() throws InterruptedException {
	JedisSentinelPool pool = new JedisSentinelPool("mymaster", sentinels,
		new GenericObjectPoolConfig(), 1000, "foobared", 2);

	// perform failover
	doSegFaultMaster(pool);

	// perform failover once again
	doSegFaultMaster(pool);

	// you can test failover as much as possible
	// but you need to prepare additional slave per failover
    }
=======
	public void ensureSafeTwiceFailover() throws InterruptedException {
		JedisSentinelPool pool = new JedisSentinelPool(MASTER_NAME, sentinels,
				new Config(), 1000, "foobared", 2);

		// perform failover
		doSegFaultMaster(pool);

		// perform failover once again
		doSegFaultMaster(pool);

		// you can test failover as much as possible
		// but you need to prepare additional slave per failover
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
private void doSegFaultMaster(JedisSentinelPool pool)
	    throws InterruptedException {
	// jedis connection should be master
	Jedis jedis = pool.getResource();
	assertEquals("PONG", jedis.ping());
=======
private void doSegFaultMaster(JedisSentinelPool pool) throws InterruptedException {
		HostAndPort oldMaster = pool.getCurrentHostMaster();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	try {
	    jedis.debug(DebugParams.SEGFAULT());
	} catch (Exception e) {
	}
=======
		// jedis connection should be master
		Jedis jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	// wait for the sentinel to promote a master
	// FIXME: we can query the sentinel and sleep
	// right until the master is promoted
	Thread.sleep(35000);
=======
		try {
			jedis.debug(DebugParams.SEGFAULT());
		} catch (Exception e) {
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	jedis = pool.getResource();
	assertEquals("PONG", jedis.ping());
	assertEquals("foobared", jedis.configGet("requirepass").get(1));
	assertEquals(2, jedis.getDB().intValue());
    }
=======
		waitForFailover(pool, oldMaster);

		jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());
		assertEquals("foobared", jedis.configGet("requirepass").get(1));
		assertEquals(2, jedis.getDB().intValue());
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/benchmark/PoolBenchmark.java;<<<<<<< MINE
	final JedisPool pool = new JedisPool(new GenericObjectPoolConfig(),
		hnp.host, hnp.port, 2000, "foobared");
	List<Thread> tds = new ArrayList<Thread>();
=======
        final JedisPool pool = new JedisPool(new Config(), hnp.getHost(), hnp.getPort(),
                2000, "foobared");
        List<Thread> tds = new ArrayList<Thread>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port);
	Jedis jedis = pool.getResource();
	jedis.auth("foobared");
	jedis.set("foo", "0");
	pool.returnResource(jedis);
=======
    	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
        		hnp.getPort());
        Jedis jedis = pool.getResource();
        jedis.auth("foobared");
        jedis.set("foo", "0");
        pool.returnResource(jedis);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port);
	Jedis jedis = pool.getResource();
	jedis.auth("foobared");
	jedis.quit();
	pool.returnBrokenResource(jedis);
=======
    	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
        		hnp.getPort());
        Jedis jedis = pool.getResource();
        jedis.auth("foobared");
        jedis.quit();
        pool.returnBrokenResource(jedis);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	GenericObjectPoolConfig config = new GenericObjectPoolConfig();
	config.setMaxTotal(1);
	config.setBlockWhenExhausted(false);
	JedisPool pool = new JedisPool(config, hnp.host, hnp.port);
	Jedis jedis = pool.getResource();
	jedis.auth("foobared");
	jedis.set("foo", "0");
=======
        Config config = new Config();
        config.maxActive = 1;
        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_FAIL;
        JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort());
        Jedis jedis = pool.getResource();
        jedis.auth("foobared");
        jedis.set("foo", "0");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	JedisPool pool0 = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port, 2000, "foobared");
	Jedis jedis0 = pool0.getResource();
	jedis0.set("foo", "bar");
	assertEquals("bar", jedis0.get("foo"));
	pool0.returnResource(jedis0);
	pool0.destroy();
=======
        JedisPool pool0 = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
        		hnp.getPort(), 2000, "foobared");
        Jedis jedis0 = pool0.getResource();
        jedis0.set("foo", "bar");
        assertEquals( "bar", jedis0.get("foo") );
        pool0.returnResource(jedis0);
        pool0.destroy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
	JedisPool pool1 = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port, 2000, "foobared", 1);
	Jedis jedis1 = pool1.getResource();
	assertNull(jedis1.get("foo"));
	pool1.returnResource(jedis1);
	pool1.destroy();
=======
        JedisPool pool1 = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
        		hnp.getPort(), 2000, "foobared", 1);
        Jedis jedis1 = pool1.getResource();
        assertNull( jedis1.get("foo") );
        pool1.returnResource(jedis0);
        pool1.destroy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
=======
@Test
    public void returnBinary() {
        JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
        		hnp.getPort(), 2000);
        BinaryJedis jedis = pool.getResource();
        pool.returnResource(jedis);
        pool.destroy();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java;<<<<<<< MINE
    public void selectDatabaseOnActivation() {
	JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.host,
		hnp.port, 2000, "foobared");
=======
	public void selectDatabaseOnActivation() {
		JedisPool pool = new JedisPool(new JedisPoolConfig(), hnp.getHost(), 
				hnp.getPort(), 2000, "foobared");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/ShardedJedisPipelineTest.java;<<<<<<< MINE
	Jedis jedis = new Jedis(redis1.host, redis1.port);
	jedis.auth("foobared");
	jedis.flushAll();
	jedis.disconnect();
	jedis = new Jedis(redis2.host, redis2.port);
	jedis.auth("foobared");
	jedis.flushAll();
	jedis.disconnect();
=======
        Jedis jedis = new Jedis(redis1.getHost(), redis1.getPort());
        jedis.auth("foobared");
        jedis.flushAll();
        jedis.disconnect();
        jedis = new Jedis(redis2.getHost(), redis2.getPort());
        jedis.auth("foobared");
        jedis.flushAll();
        jedis.disconnect();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_bbb8677_7e1a1a7/rev_bbb8677-7e1a1a7/src/test/java/redis/clients/jedis/tests/ShardedJedisPipelineTest.java;<<<<<<< MINE
	JedisShardInfo shardInfo1 = new JedisShardInfo(redis1.host, redis1.port);
	JedisShardInfo shardInfo2 = new JedisShardInfo(redis2.host, redis2.port);
	shardInfo1.setPassword("foobared");
	shardInfo2.setPassword("foobared");
	List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();
	shards.add(shardInfo1);
	shards.add(shardInfo2);
	this.jedis = new ShardedJedis(shards);
=======
        JedisShardInfo shardInfo1 = new JedisShardInfo(redis1.getHost(), redis1.getPort());
        JedisShardInfo shardInfo2 = new JedisShardInfo(redis2.getHost(), redis2.getPort());
        shardInfo1.setPassword("foobared");
        shardInfo2.setPassword("foobared");
        List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();
        shards.add(shardInfo1);
        shards.add(shardInfo2);
        this.jedis = new ShardedJedis(shards);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_d7c5823_f11c162/rev_d7c5823-f11c162/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
	flush();
	pipelinedCommands--;
	return (List<Object>) Protocol.read(inputStream);
=======
public List<Object> getObjectMultiBulkReply() {
        flush();
        pipelinedCommands--;
        return getRawObjectMultiBulkReply();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_319a241_8fef62e/rev_319a241-8fef62e/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
	checkIsInMulti();
    	client.asking();
    	return client.getStatusCodeReply();
    }
=======
	checkIsInMulti();
	client.asking();
	return client.getStatusCodeReply();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_8fef62e_10c131b/rev_8fef62e-10c131b/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public List<byte[]> blpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<byte[]> blpop(byte[]... args) {
        checkIsInMulti();
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_8fef62e_10c131b/rev_8fef62e-10c131b/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public List<byte[]> brpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<byte[]> brpop(byte[]... args) {
        checkIsInMulti();
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4fb85d0_51a4bf9/rev_4fb85d0-51a4bf9/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
	return evalResult(client.getOne());
=======
	Object result = client.getOne();

	if (result instanceof byte[])
	    return SafeEncoder.encode((byte[]) result);

	if (result instanceof List<?>) {
	    List<?> list = (List<?>) result;
	    List<String> listResult = new ArrayList<String>(list.size());
	    for (Object bin : list) {
		listResult.add((bin == null ? null : SafeEncoder
			.encode((byte[]) bin)));
	    }

	    return listResult;
	}

	return result;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4fb85d0_51a4bf9/rev_4fb85d0-51a4bf9/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
    public void scriptEvalReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	List<String> results = (List<String>) jedis.eval(script, 2, "key1", "key2", "1", "2");
	assertEquals("key1", results.get(0));
	assertEquals("key2", results.get(1));
	assertEquals("1", results.get(2));
	assertEquals("2", results.get(3));
    }
=======
    public void scriptEvalReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	List<String> results = (List<String>) jedis.eval(script, 2, "key1",
		"key2", "1", "2");
	assertEquals(results.get(0), "key1");
	assertEquals(results.get(1), "key2");
	assertEquals(results.get(2), "1");
	assertEquals(results.get(3), "2");
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4fb85d0_51a4bf9/rev_4fb85d0-51a4bf9/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
    public void scriptEvalShaReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	String sha = jedis.scriptLoad(script);
	List<String> results = (List<String>) jedis.evalsha(sha, 2, "key1", "key2", "1", "2");
	assertEquals("key1", results.get(0));
	assertEquals("key2", results.get(1));
	assertEquals("1", results.get(2));
	assertEquals("2", results.get(3));
    }
=======
    public void scriptEvalShaReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	String sha = jedis.scriptLoad(script);
	List<String> results = (List<String>) jedis.evalsha(sha, 2, "key1",
		"key2", "1", "2");
	assertEquals(results.get(0), "key1");
	assertEquals(results.get(1), "key2");
	assertEquals(results.get(2), "1");
	assertEquals(results.get(3), "2");

    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_c2cf79c_ac53759/rev_c2cf79c-ac53759/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void pfmerge(final byte[] destkey, final byte[]... sourcekeys) {
   	sendCommand(PFMERGE, joinParameters(destkey, sourcekeys));
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_c2cf79c_ac53759/rev_c2cf79c-ac53759/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Long pfadd(final String key, final String... elements) {
	checkIsInMulti();
	client.pfadd(key, elements);
	return client.getIntegerReply();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_167a782_81c8308/rev_167a782-81c8308/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Override
    public Boolean scriptExists(final String sha1) {
    return new JedisClusterCommand<Boolean>(connectionHandler,
        timeout, maxRedirections) {
        @Override
        public Boolean execute(Jedis connection) {
        return connection.scriptExists(sha1);
        }
    }.runScript(null);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public Double incrByFloat(final byte[] key, final double increment) {
	checkIsInMulti();
	client.incrByFloat(key, increment);
	String relpy = client.getBulkReply();
	return (relpy != null ? new Double(relpy) : null);
    }
=======
public Double incrByFloat(final byte[] key, final double integer) {
        checkIsInMulti();
        client.incrByFloat(key, integer);
        String dval = client.getBulkReply();
        return (dval != null ? new Double(dval) : null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public Double hincrByFloat(final byte[] key, final byte[] field,
	    double increment) {
	checkIsInMulti();
	client.hincrByFloat(key, field, increment);
	String relpy = client.getBulkReply();
	return (relpy != null ? new Double(relpy) : null);
    }
=======
public Double hincrByFloat(final byte[] key, final byte[] field, final double value) {
        checkIsInMulti();
        client.hincrByFloat(key, field, value);
        final String dval = client.getBulkReply();
        return (dval != null ? new Double(dval) : null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public List<byte[]> blpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<byte[]> blpop(byte[]... args) {
        checkIsInMulti();
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public List<byte[]> brpop(byte[] arg) {
	checkIsInMulti();
	byte[][] args = new byte[1][];
	args[0] = arg;
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<byte[]> brpop(byte[]... args) {
        checkIsInMulti();
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<byte[]> multiBulkReply = client.getBinaryMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
public Response<Double> hincrByFloat(String key, String field,
	    double increment) {
	getClient(key).hincrByFloat(key, field, increment);
	return getResponse(BuilderFactory.DOUBLE);
    }
=======
public Response<Double> hincrByFloat(String key, String field, double value) {
        getClient(key).hincrByFloat(key, field, value);
        return getResponse(BuilderFactory.DOUBLE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
public Response<Double> hincrByFloat(byte[] key, byte[] field,
	    double increment) {
	getClient(key).hincrByFloat(key, field, increment);
	return getResponse(BuilderFactory.DOUBLE);
    }
=======
public Response<Double> hincrByFloat(byte[] key, byte[] field, double value) {
        getClient(key).hincrByFloat(key, field, value);
        return getResponse(BuilderFactory.DOUBLE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
public Response<Double> incrByFloat(String key, double increment) {
	getClient(key).incrByFloat(key, increment);
	return getResponse(BuilderFactory.DOUBLE);
    }
=======
public Response<Double> incrByFloat(String key, double value) {
        getClient(key).incrByFloat(key, value);
        return getResponse(BuilderFactory.DOUBLE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
public Response<Double> incrByFloat(byte[] key, double increment) {
	getClient(key).incrByFloat(key, increment);
	return getResponse(BuilderFactory.DOUBLE);
    }
=======
public Response<Double> incrByFloat(byte[] key, double value) {
        getClient(key).incrByFloat(key, value);
        return getResponse(BuilderFactory.DOUBLE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void incrByFloat(final byte[] key, final double increment) {
	sendCommand(INCRBYFLOAT, key, toByteArray(increment));
    }
=======
public void incrByFloat(final byte[] key, final double value) {
        sendCommand(INCRBYFLOAT, key, toByteArray(value));
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/BinaryClient.java;<<<<<<< MINE
public void hincrByFloat(final byte[] key, final byte[] field,
	    double increment) {
	sendCommand(HINCRBYFLOAT, key, field, toByteArray(increment));
    }
=======
public void hincrByFloat(final byte[] key, final byte[] field, final double value) {
        sendCommand(HINCRBYFLOAT, key, field, toByteArray(value));
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Double incrByFloat(final String key, final double increment) {
	checkIsInMulti();
	client.incrByFloat(key, increment);
	String relpy = client.getBulkReply();
	return (relpy != null ? new Double(relpy) : null);
    }
=======
public Double incrByFloat(final String key, final double value) {
        checkIsInMulti();
        client.incrByFloat(key, value);
        String dval = client.getBulkReply();
        return (dval != null ? new Double(dval) : null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public Double hincrByFloat(final String key, final String field,
	    double increment) {
	checkIsInMulti();
	client.hincrByFloat(key, field, increment);
	String relpy = client.getBulkReply();
	return (relpy != null ? new Double(relpy) : null);
    }
=======
public Double hincrByFloat(final String key, final String field, final double value) {
        checkIsInMulti();
        client.hincrByFloat(key, field, value);
        final String dval = client.getBulkReply();
        return (dval != null ? new Double(dval) : null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public List<String> blpop(String... args) {
	client.blpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<String> blpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.blpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
public List<String> brpop(String... args) {
	client.brpop(args);
	client.setTimeoutInfinite();
	final List<String> multiBulkReply = client.getMultiBulkReply();
	client.rollbackTimeout();
	return multiBulkReply;
=======
public List<String> brpop(String arg) {
        String[] args = new String[1];
        args[0] = arg;
        client.brpop(args);
        client.setTimeoutInfinite();
        final List<String> multiBulkReply = client.getMultiBulkReply();
        client.rollbackTimeout();
        return multiBulkReply;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void incrByFloat(final String key, final double increment) {
	incrByFloat(SafeEncoder.encode(key), increment);
    }
=======
public void incrByFloat(final String key, final double value) {
        incrByFloat(SafeEncoder.encode(key), value);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
public void hincrByFloat(final String key, final String field,
	    double increment) {
	hincrByFloat(SafeEncoder.encode(key), SafeEncoder.encode(field),
		increment);
    }
=======
public void hincrByFloat(final String key, final String field, final double value) {
        hincrByFloat(SafeEncoder.encode(key), SafeEncoder.encode(field), value);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0d5062c_6af41cd/rev_0d5062c-6af41cd/src/test/java/redis/clients/jedis/tests/commands/StringValuesCommandsTest.java;<<<<<<< MINE
@Test
    public void incrByFloat() {
	double value = jedis.incrByFloat("foo", 10.5);
	assertEquals(10.5, value, 0.0);
	value = jedis.incrByFloat("foo", 0.1);
	assertEquals(10.6, value, 0.0);
    }
=======
@Test
    public void incrByFloat() {
        Double value = jedis.incrByFloat("foo", 2d);
        assertEquals((Double)2d, value);
        value = jedis.incrByFloat("foo", 2.5d);
        assertEquals((Double)4.5d, value);
        value = jedis.incrByFloat("foo", -6.5d);
        assertEquals(Double.compare(-2d, value), 0);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_670e019_0a8aa7a/rev_670e019-0a8aa7a/src/main/java/redis/clients/jedis/JedisSentinelPool.java;<<<<<<< MINE
@Override
    public void returnBrokenResource(final Jedis resource) {
	returnBrokenResourceObject(resource);
=======
public void returnBrokenResource(final Jedis resource) {
	if (resource != null) {
	    returnBrokenResourceObject(resource);
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_670e019_0a8aa7a/rev_670e019-0a8aa7a/src/main/java/redis/clients/jedis/JedisSentinelPool.java;<<<<<<< MINE
@Override
    public void returnResource(final Jedis resource) {
	resource.resetState();
	returnResourceObject(resource);
=======
public void returnResource(final Jedis resource) {
	if (resource != null) {
	    resource.resetState();
	    returnResourceObject(resource);
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_670e019_0a8aa7a/rev_670e019-0a8aa7a/src/main/java/redis/clients/jedis/ShardedJedisPool.java;<<<<<<< MINE
@Override
    public void returnBrokenResource(final ShardedJedis resource) {
	returnBrokenResourceObject(resource);
    }
=======
public void returnBrokenResource(final ShardedJedis resource) {
	returnBrokenResourceObject(resource);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_6c68624_74b527d/rev_6c68624-74b527d/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java;<<<<<<< MINE
	    HostAndPort node = getHostAndPortFromNodeLine(nodeInfo, jedis);
        setNodeIfNotExist(node);

	    JedisPool nodePool = nodes.get(getNodeKey(node));
	    populateNodeSlots(nodeInfo, nodePool);
=======
	    ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(
		    nodeInfo, new HostAndPort(jedis.getClient().getHost(),
			    jedis.getClient().getPort()));

	    HostAndPort targetNode = clusterNodeInfo.getNode();
	    setNodeIfNotExist(targetNode);
	    assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_6c68624_74b527d/rev_6c68624-74b527d/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java;<<<<<<< MINE
	
	JedisPool nodePool = new JedisPool(poolConfig, node.getHost(), node.getPort());
=======

	JedisPool nodePool = new JedisPool(node.getHost(), node.getPort());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
        flush();
        return (List<byte[]>) Protocol.read(inputStream);
=======
	flush();
	pipelinedCommands--;
	return (List<byte[]>) readProtocolWithCheckingBroken();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
@SuppressWarnings("unchecked")
    public List<Object> getObjectMultiBulkReply() {
        flush();
        return (List<Object>) Protocol.read(inputStream);
=======
public List<Object> getObjectMultiBulkReply() {
	flush();
	pipelinedCommands--;
	return getRawObjectMultiBulkReply();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
=======
public List<Object> getAll() {
	return getAll(0);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
=======
public List<Object> getAll(int except) {
	List<Object> all = new ArrayList<Object>();
	flush();
	while (pipelinedCommands > except) {
	    try {
		all.add(readProtocolWithCheckingBroken());
	    } catch (JedisDataException e) {
		all.add(e);
	    }
	    pipelinedCommands--;
	}
	return all;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_360e25e_03c0af2/rev_360e25e-03c0af2/src/main/java/redis/clients/jedis/Connection.java;<<<<<<< MINE
        flush();
        return Protocol.read(inputStream);
=======
	flush();
	pipelinedCommands--;
	return readProtocolWithCheckingBroken();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_26d1f4a_0aacd48/rev_26d1f4a-0aacd48/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<Entry<String, String>> hscan(final String key,
	    final int cursor) {
	return new JedisClusterCommand<ScanResult<Entry<String, String>>>(
		connectionHandler, timeout, maxRedirections) {
	    @Override
	    public ScanResult<Entry<String, String>> execute(Jedis connection) {
		return connection.hscan(key, cursor);
	    }
	}.run(null);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_26d1f4a_0aacd48/rev_26d1f4a-0aacd48/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<String> sscan(final String key, final int cursor) {
	return new JedisClusterCommand<ScanResult<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<String> execute(Jedis connection) {
		return connection.sscan(key, cursor);
	    }
	}.run(null);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_26d1f4a_0aacd48/rev_26d1f4a-0aacd48/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<Tuple> zscan(final String key, final int cursor) {
	return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<Tuple> execute(Jedis connection) {
		return connection.zscan(key, cursor);
	    }
	}.run(null);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_26d1f4a_0aacd48/rev_26d1f4a-0aacd48/src/main/java/redis/clients/jedis/ScanResult.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531
     * @return int(currently), but will be changed to String, so be careful to prepare! 
     */
    public int getCursor() {
	return Integer.parseInt(getStringCursor());
=======
public String getCursor() {
	return cursor;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_26d1f4a_0aacd48/rev_26d1f4a-0aacd48/src/main/java/redis/clients/jedis/ScanResult.java;<<<<<<< MINE
public String getStringCursor() {
	return SafeEncoder.encode(cursor);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java;<<<<<<< MINE
private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,
			Object target, Statement result) {
		for (org.junit.rules.MethodRule each : getMethodRules(target))
			if (! testRules.contains(each))
				result= each.apply(result, method, target);
		return result;
	}
=======
@SuppressWarnings("deprecation")
    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,
            Object target, Statement result) {
        for (org.junit.rules.MethodRule each : getMethodRules(target)) {
            if (!testRules.contains(each)) {
                result = each.apply(result, method, target);
            }
        }
        return result;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java;<<<<<<< MINE
private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
		return rules(target);
	}
=======
@SuppressWarnings("deprecation")
    private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
        return rules(target);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_bbacbd9_2f879b9/rev_bbacbd9-2f879b9/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java;<<<<<<< MINE
protected List<org.junit.rules.MethodRule> rules(Object target) {
		return getTestClass().getAnnotatedFieldValues(target, Rule.class,
				org.junit.rules.MethodRule.class);
	}
=======
@Deprecated
    protected List<org.junit.rules.MethodRule> rules(Object target) {
        return getTestClass().getAnnotatedFieldValues(target, Rule.class,
                org.junit.rules.MethodRule.class);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_6fb53a7_2f879b9/rev_6fb53a7-2f879b9/src/main/java/org/junit/rules/TestWatcher.java;<<<<<<< MINE
				startingQuietly(description, errors);
				try {
					base.evaluate();
					succeededQuietly(description, errors);
				} catch (AssumptionViolatedException e) {
					errors.add(e);
					skippedQuietly(e, description, errors);
				} catch (Throwable t) {
					errors.add(t);
					failedQuietly(t, description, errors);
				} finally {
					finishedQuietly(description, errors);
				}
				
				MultipleFailureException.assertEmpty(errors);
			}
		};
	}
=======
                startingQuietly(description, errors);
                try {
                    base.evaluate();
                    succeededQuietly(description, errors);
                } catch (AssumptionViolatedException e) {
                    skipped(e, description);
                    throw e;
                } catch (Throwable t) {
                    errors.add(t);
                    failedQuietly(t, description, errors);
                } finally {
                    finishedQuietly(description, errors);
                }

                MultipleFailureException.assertEmpty(errors);
            }
        };
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_6fb53a7_2f879b9/rev_6fb53a7-2f879b9/src/main/java/org/junit/rules/TestWatcher.java;<<<<<<< MINE
private void startingQuietly(Description description,
			List<Throwable> errors) {
		try {
			starting(description);
		} catch (Throwable t) {
			errors.add(t);
		}
	}
=======
private void startingQuietly(Description description,
            List<Throwable> errors) {
        try {
            starting(description);
        } catch (Throwable t) {
            errors.add(t);
        }
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/main/java/redis/clients/jedis/JedisSentinelPool.java;<<<<<<< MINE
	    final GenericObjectPoolConfig poolConfig, int timeout,
	    final String password, final int database) {

	this.poolConfig = poolConfig;
	this.timeout = timeout;
	this.password = password;
	this.database = database;
=======
			final GenericObjectPoolConfig poolConfig, int timeout,
			final String password, final int database) {
		this.poolConfig = poolConfig;
		this.timeout = timeout;
		this.password = password;
		this.database = database;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/main/java/redis/clients/jedis/JedisSentinelPool.java;<<<<<<< MINE
	if (!master.equals(currentHostMaster)) {
	    currentHostMaster = master;
	    if (factory == null) {
	        factory = new JedisFactory(master.getHost(), master.getPort(),
	                                   timeout, password, database);
	        initPool(poolConfig, factory);
	    } else {
	        factory.setHostAndPort(currentHostMaster);
	        // although we clear the pool, we still have to check the returned object
	        // in getResource, this call only clears idle instances, not borrowed instances
	        internalPool.clear();
	    }

	    log.info("Created JedisPool to master at " + master);
=======
		if (!master.equals(currentHostMaster)) {
			currentHostMaster = master;
			log.info("Created JedisPool to master at " + master);
			initPool(poolConfig,
					new JedisFactory(master.getHost(), master.getPort(),
							timeout, password, database));
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/main/java/redis/clients/jedis/JedisSentinelPool.java;<<<<<<< MINE
		Jedis jedis = null;
		try {
		    jedis = new Jedis(hap.getHost(), hap.getPort());

		    if (master == null) {
			master = toHostAndPort(jedis
				.sentinelGetMasterAddrByName(masterName));
			log.fine("Found Redis master at " + master);
			break outer;
		    }
		} catch (JedisConnectionException e) {
		    log.warning("Cannot connect to sentinel running @ " + hap
			    + ". Trying next one.");
		} finally {
		    if (jedis != null) {
	        jedis.close();
		    }
=======
		for (String sentinel : sentinels) {
			final HostAndPort hap = toHostAndPort(Arrays.asList(sentinel
					.split(":")));
			MasterListener masterListener = new MasterListener(masterName,
					hap.getHost(), hap.getPort());
			masterListeners.add(masterListener);
			masterListener.start();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
    public void setUp() throws Exception {
	sentinels.add(sentinel1.toString());
	sentinels.add(sentinel2.toString());
=======
	public void setUp() throws Exception {
		sentinels.add(sentinel1.toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	sentinelJedis2 = new Jedis(sentinel2.getHost(), sentinel2.getPort());
    }
=======
		sentinelJedis1 = new Jedis(sentinel1.getHost(), sentinel1.getPort());
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	forceFailover(pool);
	// after failover sentinel needs a bit of time to stabilize before a new failover
	Thread.sleep(100);
	forceFailover(pool);
=======
		forceFailover(pool);
		forceFailover(pool);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	// jedis connection should be master
	Jedis beforeFailoverJedis = pool.getResource();
	assertEquals("PONG", beforeFailoverJedis.ping());
=======
		// jedis connection should be master
		Jedis jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	waitForFailover(pool, oldMaster);

	Jedis afterFailoverJedis = pool.getResource();
	assertEquals("PONG", afterFailoverJedis.ping());
	assertEquals("foobared", afterFailoverJedis.configGet("requirepass").get(1));
	assertEquals(2, afterFailoverJedis.getDB().intValue());
	
	// returning both connections to the pool should not throw
	beforeFailoverJedis.close();
	afterFailoverJedis.close();
    }
=======
		// It can throw JedisDataException while there's no slave to promote
		// There's nothing we can do, so we just pass Exception to make test
		// fail fast
		sentinelJedis1.sentinelFailover(MASTER_NAME);

		waitForFailover(pool, oldMaster);
		// JedisSentinelPool recognize master but may not changed internal pool
		// yet
		Thread.sleep(100);

		jedis = pool.getResource();
		assertEquals("PONG", jedis.ping());
		assertEquals("foobared", jedis.configGet("requirepass").get(1));
		assertEquals(2, jedis.getDB().intValue());
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	    throws InterruptedException {
	HostAndPort newMaster = JedisSentinelTestUtil
		.waitForNewPromotedMaster(MASTER_NAME, sentinelJedis1, sentinelJedis2);
=======
			throws InterruptedException {
		HostAndPort newMaster = JedisSentinelTestUtil
				.waitForNewPromotedMaster(sentinelJedis1);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	while (true) {
	    HostAndPort currentHostMaster = pool.getCurrentHostMaster();
=======
		while (true) {
			String host = pool.getCurrentHostMaster().getHost();
			int port = pool.getCurrentHostMaster().getPort();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53c9344_ab2f43b/rev_53c9344-ab2f43b/src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java;<<<<<<< MINE
	    if (newMaster.equals(currentHostMaster))
		break;
=======
			if (host.equals(newMaster.getHost()) && port == newMaster.getPort())
				break;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_19fc1f8_fc594db/rev_19fc1f8-fc594db/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java;<<<<<<< MINE
private void discoverClusterNodesAndSlots(Jedis jedis) {
        String localNodes = jedis.clusterNodes();
        for (String nodeInfo : localNodes.split("\n")) {
            ClusterNodeInformation clusterNodeInfo = nodeInfoParser.parse(
                    nodeInfo, new HostAndPort(jedis.getClient().getHost(),
                    jedis.getClient().getPort()));

            HostAndPort targetNode = clusterNodeInfo.getNode();
            setNodeIfNotExist(targetNode);
            assignSlotsToNode(clusterNodeInfo.getAvailableSlots(), targetNode);
        }
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_19fc1f8_fc594db/rev_19fc1f8-fc594db/src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java;<<<<<<< MINE
private void setNodeIfNotExist(HostAndPort node) {
	String nodeKey = getNodeKey(node);
	if (nodes.containsKey(nodeKey))
	    return;

	JedisPool nodePool = new JedisPool(poolConfig, node.getHost(), node.getPort());
	nodes.put(nodeKey, nodePool);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_8b0d35b_067ed0a/rev_8b0d35b-067ed0a/src/main/java/junit/runner/Version.java;<<<<<<< MINE
		return VERSION;
	}
=======
		return "4.12-SNAPSHOT";
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_3b31ae7_7836531/rev_3b31ae7-7836531/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
	super(jedisClusterNode, timeout, maxRedirections);
=======
        this(nodes, timeout, maxRedirections,
                new GenericObjectPoolConfig());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0f76459_53e7dc2/rev_0f76459-53e7dc2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Override
    public List<String> blpop(final int timeout, final String... keys) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(timeout, keys);
	    }
	}.run(keys.length, keys);
    }
=======
@Override
    public List<String> blpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(timeout,key);
	    }
	}.run(null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0f76459_53e7dc2/rev_0f76459-53e7dc2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Override
    public List<String> brpop(final int timeout, final String... keys) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(timeout, keys);
	    }
	}.run(keys.length, keys);
    }
=======
@Override
    public List<String> brpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(timeout,key);
	    }
	}.run(null);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0f76459_53e7dc2/rev_0f76459-53e7dc2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<Entry<String, String>> hscan(final String key,
	    final int cursor) {
	return new JedisClusterCommand<ScanResult<Entry<String, String>>>(
		connectionHandler, timeout, maxRedirections) {
	    @Override
	    public ScanResult<Entry<String, String>> execute(Jedis connection) {
		return connection.hscan(key, cursor);
	    }
	}.run(key);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0f76459_53e7dc2/rev_0f76459-53e7dc2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<String> sscan(final String key, final int cursor) {
	return new JedisClusterCommand<ScanResult<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<String> execute(Jedis connection) {
		return connection.sscan(key, cursor);
	    }
	}.run(key);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_0f76459_53e7dc2/rev_0f76459-53e7dc2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
@Deprecated
    /**
     * This method is deprecated due to bug (scan cursor should be unsigned long)
     * And will be removed on next major release
     * @see https://github.com/xetorthio/jedis/issues/531 
     */
    @Override
    public ScanResult<Tuple> zscan(final String key, final int cursor) {
	return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<Tuple> execute(Jedis connection) {
		return connection.zscan(key, cursor);
	    }
	}.run(key);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_3495402_3ebc25e/rev_3495402-3ebc25e/src/main/java/redis/clients/jedis/TransactionBlock.java;<<<<<<< MINE
public void setClient(Client client) {
	super.setClient(client);
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout,
        int maxRedirections, final GenericObjectPoolConfig poolConfig) {
	super(jedisClusterNode, timeout, maxRedirections, poolConfig);
    }
=======
public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout, int maxRedirections,
      final GenericObjectPoolConfig poolConfig) {
    this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig);
    this.timeout = timeout;
    this.maxRedirections = maxRedirections;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public void close() {
    if (connectionHandler != null) {
      for (JedisPool pool : connectionHandler.getNodes().values()) {
        try {
          if (pool != null) {
            pool.destroy();
          }
        } catch (Exception e) {
          // pass
        }
      }
    }
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String ping() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.ping();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String quit() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.quit();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String flushDB() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.flushDB();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public Long dbSize() {
    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
      @Override
      public Long execute(Jedis connection) {
        return connection.dbSize();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String select(final int index) {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.select(index);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String flushAll() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.flushAll();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String auth(final String password) {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.auth(password);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String save() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.save();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String bgsave() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.bgsave();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String bgrewriteaof() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.bgrewriteaof();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public Long lastsave() {
    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
      @Override
      public Long execute(Jedis connection) {
        return connection.lastsave();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String shutdown() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.shutdown();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String info() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.info();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String info(final String section) {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.info(section);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String slaveof(final String host, final int port) {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.slaveof(host, port);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String slaveofNoOne() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.slaveofNoOne();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public Long getDB() {
    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
      @Override
      public Long execute(Jedis connection) {
        return connection.getDB();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String debug(final DebugParams params) {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.debug(params);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String configResetStat() {
    return new JedisClusterCommand<String>(connectionHandler, timeout, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.configResetStat();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public Long waitReplicas(int replicas, long timeout) {
    // TODO Auto-generated method stub
    return null;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/util/JedisClusterCRC16.java;<<<<<<< MINE
	return getCRC16(bytes, 0, bytes.length);
=======
    int crc = 0x0000;

    for (byte b : bytes) {
      crc = ((crc << 8) ^ LOOKUP_TABLE[((crc >>> 8) ^ (b & 0xFF)) & 0xFF]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/main/java/redis/clients/util/JedisClusterCRC16.java;<<<<<<< MINE
	byte[] bytesKey = SafeEncoder.encode(key);
	return getCRC16(bytesKey, 0, bytesKey.length);
    }
=======
    return getCRC16(SafeEncoder.encode(key));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java;<<<<<<< MINE
    public void testGetCRC16() throws Exception {
	Map<String, Integer> solutions = prepareSolutionSet();
	
	for (Entry<String, Integer> entry : solutions.entrySet()) {
	    // string version
	    String key = entry.getKey();
	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(key));
	    
	    // byte array version
	    byte[] bytesKey = SafeEncoder.encode(key);
	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(bytesKey));
	}
=======
  public void testGetCRC16() throws Exception {
    Map<String, Integer> solutions = prepareSolutionSet();

    for (Entry<String, Integer> entry : solutions.entrySet()) {
      // string version
      assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey()));

      // byte array version
      assertEquals(entry.getValue().intValue(),
        JedisClusterCRC16.getCRC16(SafeEncoder.encode(entry.getKey())));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/test/java/redis/clients/jedis/tests/JedisClusterTest.java;<<<<<<< MINE
=======
@Test(expected = JedisClusterException.class)
  public void testThrowExceptionWithoutKey() {
    Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
    jedisClusterNode.add(new HostAndPort("127.0.0.1", 7379));
    JedisCluster jc = new JedisCluster(jedisClusterNode);
    jc.ping();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/test/java/redis/clients/jedis/tests/JedisClusterTest.java;<<<<<<< MINE
    public void testCloseable() throws IOException {
	Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
	jedisClusterNode.add(new HostAndPort(nodeInfo1.getHost(), nodeInfo1.getPort()));
	
	JedisCluster jc = null;
	try {
	    jc = new JedisCluster(jedisClusterNode);
	    jc.set("51", "foo");
	} finally {
	    if (jc != null) {
		jc.close();
	    }
	}
=======
  public void testCloseable() {
    Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
    jedisClusterNode.add(new HostAndPort(nodeInfo1.getHost(), nodeInfo1.getPort()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_53e7dc2_d33bd40/rev_53e7dc2-d33bd40/src/test/java/redis/clients/jedis/tests/JedisClusterTest.java;<<<<<<< MINE
    public void testJedisClusterRunsWithMultithreaded() throws InterruptedException, ExecutionException, IOException {
	Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
	jedisClusterNode.add(new HostAndPort("127.0.0.1", 7379));
	final JedisCluster jc = new JedisCluster(jedisClusterNode);
	jc.set("foo", "bar");
	
	ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 100, 0, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(10));
	List<Future<String>> futures = new ArrayList<Future<String>>();
	for (int i = 0 ; i < 50 ; i++) {
	    executor.submit(new Callable<String>() {
		@Override
		public String call() throws Exception {
		    // FIXME : invalidate slot cache from JedisCluster to test random connection also does work
		    return jc.get("foo");
		}
	    });
	}
=======
  public void testJedisClusterRunsWithMultithreaded() throws InterruptedException,
      ExecutionException {
    Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
    jedisClusterNode.add(new HostAndPort("127.0.0.1", 7379));
    final JedisCluster jc = new JedisCluster(jedisClusterNode);
    jc.set("foo", "bar");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
	client.setTimeoutInfinite();
	client.eval(script, toByteArray(keys.size()), getParamsWithBinary(keys, args));
	return client.getOne();
    }
=======
    return eval(script, toByteArray(keys.size()), getParams(keys, args));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
=======
private byte[][] getParams(List<byte[]> keys, List<byte[]> args) {
    final int keyCount = keys.size();
    final int argCount = args.size();
    byte[][] params = new byte[keyCount + argCount][];

    for (int i = 0; i < keyCount; i++)
      params[i] = keys.get(i);

    for (int i = 0; i < argCount; i++)
      params[keyCount + i] = args.get(i);

    return params;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public Long scriptExists(byte[] sha1) {
	byte[][] a = new byte[1][];
	a[0] = sha1;
	return scriptExists(a).get(0);
    }
=======
public List<Long> scriptExists(byte[]... sha1) {
    client.scriptExists(sha1);
    return client.getIntegerMultiBulkReply();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
=======
public Response<String> eval(String script) {
    return this.eval(script, 0);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
=======
public Response<String> eval(String script, List<String> keys, List<String> args) {
    String[] argv = Jedis.getParams(keys, args);
    return this.eval(script, keys.size(), argv);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
=======
public Response<String> evalsha(String script) {
    return this.evalsha(script, 0);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/main/java/redis/clients/jedis/PipelineBase.java;<<<<<<< MINE
=======
public Response<String> evalsha(String sha1, List<String> keys, List<String> args) {
    String[] argv = Jedis.getParams(keys, args);
    return this.evalsha(sha1, keys.size(), argv);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
	List<byte[]> responses = (List<byte[]>) binaryJedis.eval(
		script.getBytes(), keys, args);
	assertEquals(5, responses.size());
	assertEquals("key1", new String(responses.get(0)));
	assertEquals("key2", new String(responses.get(1)));
	assertEquals("first", new String(responses.get(2)));
	assertEquals("second", new String(responses.get(3)));
	assertEquals("third", new String(responses.get(4)));
	
	binaryJedis.close();
    }
=======
    List<byte[]> responses = (List<byte[]>) binaryJedis.eval(script.getBytes(), keys, args);
    assertEquals(5, responses.size());
    assertEquals("key1", new String(responses.get(0)));
    assertEquals("key2", new String(responses.get(1)));
    assertEquals("first", new String(responses.get(2)));
    assertEquals("second", new String(responses.get(3)));
    assertEquals("third", new String(responses.get(4)));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
@SuppressWarnings("unchecked")
    @Test
    public void evalNestedLists() {
	String script = "return { {KEYS[1]} , {2} }";
	List<?> results = (List<?>) jedis.eval(script, 1, "key1");
=======
@Test
  public void evalNestedLists() {
    String script = "return { {KEYS[1]} , {2} }";
    List<?> results = (List<?>) jedis.eval(script, 1, "key1");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
    public void scriptLoadBinary() {
	jedis.scriptLoad(SafeEncoder.encode("return redis.call('get','foo')"));
	byte[][] scripts = new byte[1][];
	scripts[0] = SafeEncoder.encode("6b1bf486c81ceb7edf3c093f4c48582e38c0e791");
	List<Long> exists = jedis.scriptExists(scripts);
	assertEquals(new Long(1), exists.get(0));
    }
=======
  public void scriptLoadBinary() {
    jedis.scriptLoad(SafeEncoder.encode("return redis.call('get','foo')"));
    List<Long> exists = jedis.scriptExists(SafeEncoder
        .encode("6b1bf486c81ceb7edf3c093f4c48582e38c0e791"));
    assertEquals(new Long(1), exists.get(0));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
    @SuppressWarnings("unchecked")
    public void scriptEvalReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	
	List<String> results = (List<String>) jedis.eval(script, 2, "key1", "key2", "1", "2");
	assertEquals("key1", results.get(0));
	assertEquals("key2", results.get(1));
	assertEquals("1", results.get(2));
	assertEquals("2", results.get(3));
    }
=======
  public void scriptEvalReturnNullValues() {
    String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
    List<String> results = (List<String>) jedis.eval(script, 2, "key1", "key2", "1", "2");
    assertEquals("key1", results.get(0));
    assertEquals("key2", results.get(1));
    assertEquals("1", results.get(2));
    assertEquals("2", results.get(3));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java;<<<<<<< MINE
    @SuppressWarnings("unchecked")
    public void scriptEvalShaReturnNullValues() {
	String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
	String sha = jedis.scriptLoad(script);
	List<String> results = (List<String>) jedis.evalsha(sha, 2, "key1", "key2", "1", "2");
	assertEquals("key1", results.get(0));
	assertEquals("key2", results.get(1));
	assertEquals("1", results.get(2));
	assertEquals("2", results.get(3));
    }
=======
  public void scriptEvalShaReturnNullValues() {
    String script = "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}";
    String sha = jedis.scriptLoad(script);
    List<String> results = (List<String>) jedis.evalsha(sha, 2, "key1", "key2", "1", "2");
    assertEquals("key1", results.get(0));
    assertEquals("key2", results.get(1));
    assertEquals("1", results.get(2));
    assertEquals("2", results.get(3));
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/PipeliningTest.java;<<<<<<< MINE
	Pipeline p = jedis.pipelined();
	Response<Object> result = p.eval(script);
	p.sync();
=======
    Pipeline p = jedis.pipelined();
    Response<String> result = p.eval(script);
    p.sync();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/PipeliningTest.java;<<<<<<< MINE
	Pipeline p = jedis.pipelined();
	p.set(key, "0");
	Response<Object> result0 = p.eval(script, Arrays.asList(key),
		Arrays.asList(arg));
	p.incr(key);
	Response<Object> result1 = p.eval(script, Arrays.asList(key),
		Arrays.asList(arg));
	Response<String> result2 = p.get(key);
	p.sync();
=======
    Pipeline p = jedis.pipelined();
    p.set(key, "0");
    Response<String> result0 = p.eval(script, Arrays.asList(key), Arrays.asList(arg));
    p.incr(key);
    Response<String> result1 = p.eval(script, Arrays.asList(key), Arrays.asList(arg));
    Response<String> result2 = p.get(key);
    p.sync();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/PipeliningTest.java;<<<<<<< MINE
	Pipeline p = jedis.pipelined();
	Response<Object> result = p.evalsha(sha1);
	p.sync();
=======
    Pipeline p = jedis.pipelined();
    Response<String> result = p.evalsha(sha1);
    p.sync();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_2510e34_d33bd40/rev_2510e34-d33bd40/src/test/java/redis/clients/jedis/tests/PipeliningTest.java;<<<<<<< MINE
	Pipeline p = jedis.pipelined();
	p.set(key, "0");
	Response<Object> result0 = p.evalsha(sha1, Arrays.asList(key),
		Arrays.asList(arg));
	p.incr(key);
	Response<Object> result1 = p.evalsha(sha1, Arrays.asList(key),
		Arrays.asList(arg));
	Response<String> result2 = p.get(key);
	p.sync();
=======
    Pipeline p = jedis.pipelined();
    p.set(key, "0");
    Response<String> result0 = p.evalsha(sha1, Arrays.asList(key), Arrays.asList(arg));
    p.incr(key);
    Response<String> result1 = p.evalsha(sha1, Arrays.asList(key), Arrays.asList(arg));
    Response<String> result2 = p.get(key);
    p.sync();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_8d7f5cc_38d9130/rev_8d7f5cc-38d9130/src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java;<<<<<<< MINE
    public void dataPointsAnnotationMeansTreatAsArrayOnly() throws Exception {
        List<PotentialAssignment> assignments = potentialAssignments(
                HasDataPointsWithObjectParameter.class.getMethod("theory", Object.class));
        
        assertEquals(2, assignments.size());
        for (PotentialAssignment assignment : assignments) {
            assertNotEquals(HasDataPointsWithObjectParameter.objectField, assignment.getValue());
        }
=======
    public void dataPointsAnnotationMeansTreatAsArrayOnly() throws Throwable {
        List<PotentialAssignment> valueSources = allMemberValuesFor(
                HasDataPoints.class, Object.class);
        assertThat(valueSources.size(), is(2));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_8d7f5cc_38d9130/rev_8d7f5cc-38d9130/src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java;<<<<<<< MINE
    public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {
        Result result = runTheoryClass(TheoryWithNoUnassumedParameters.class);
        Assert.assertEquals(1, result.getFailureCount());
    }
=======
	public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {
		Result result = runTheoryClass(TheoryWithNoUnassumedParameters.class);
		Assert.assertEquals(1, result.getFailureCount());
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_00faaba_b42a861/rev_00faaba-b42a861/src/main/java/redis/clients/jedis/JedisPool.java;<<<<<<< MINE
protected void returnBrokenResource(final Jedis resource) {
=======
@Deprecated
  public void returnBrokenResource(final Jedis resource) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_00faaba_b42a861/rev_00faaba-b42a861/src/main/java/redis/clients/jedis/JedisPool.java;<<<<<<< MINE
protected void returnResource(final Jedis resource) {
=======
@Deprecated
  public void returnResource(final Jedis resource) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_6e2706b_7196dc6/rev_6e2706b-7196dc6/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Override
  public String set(final String key, final String value, final String nxxx, final String expx,
      final long time) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.set(key, value, nxxx, expx, time);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String ping() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.ping();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String quit() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.quit();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String flushDB() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.flushDB();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public Long dbSize() {
    return new JedisClusterCommand<Long>(connectionHandler, maxRedirections) {
      @Override
      public Long execute(Jedis connection) {
        return connection.dbSize();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String select(final int index) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.select(index);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String flushAll() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.flushAll();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String auth(final String password) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.auth(password);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String save() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.save();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String bgsave() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.bgsave();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String bgrewriteaof() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.bgrewriteaof();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public Long lastsave() {
    return new JedisClusterCommand<Long>(connectionHandler, maxRedirections) {
      @Override
      public Long execute(Jedis connection) {
        return connection.lastsave();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String shutdown() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.shutdown();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String info() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.info();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String info(final String section) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.info(section);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String slaveof(final String host, final int port) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.slaveof(host, port);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String slaveofNoOne() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.slaveofNoOne();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public int getDB() {
    return new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {
      @Override
      public Integer execute(Jedis connection) {
        return connection.getDB();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String debug(final DebugParams params) {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.debug(params);
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public String configResetStat() {
    return new JedisClusterCommand<String>(connectionHandler, maxRedirections) {
      @Override
      public String execute(Jedis connection) {
        return connection.configResetStat();
      }
    }.run(null);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
=======
@Deprecated
  @Override
  public Long waitReplicas(int replicas, long timeout) {
    // TODO Auto-generated method stub
    return null;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_80d2827_d1842a2/rev_80d2827-d1842a2/src/test/java/redis/clients/jedis/tests/ShardedJedisTest.java;<<<<<<< MINE

    for (String clientInfo : deadClient.clientList().split("\n")) {
      if (clientInfo.contains("DEAD")) {
        // Ugly, but cmon, it's a test.
        String[] hostAndPort = clientInfo.split(" ")[1].split("=")[1].split(":");
        // It would be better if we kill the client by Id as it's safer but jedis doesn't implement
        // the command yet.
        deadClient.clientKill(hostAndPort[0] + ":" + hostAndPort[1]);
      }
    }

    assertEquals(true, deadClient.isConnected());
    assertEquals(false, deadClient.getClient().getSocket().isClosed());
    assertEquals(false, deadClient.getClient().isBroken()); // normal - not found

    shardedJedis.disconnect();

    assertEquals(false, deadClient.isConnected());
    assertEquals(true, deadClient.getClient().getSocket().isClosed());
    assertEquals(true, deadClient.getClient().isBroken());

    Jedis jedis2 = it.next();
    assertEquals(false, jedis2.isConnected());
    assertEquals(true, jedis2.getClient().getSocket().isClosed());
    assertEquals(false, jedis2.getClient().isBroken());

=======

    ClientKillerUtil.killClient(deadClient, "DEAD");

    assertEquals(true, deadClient.isConnected());
    assertEquals(false, deadClient.getClient().getSocket().isClosed());
    assertEquals(false, deadClient.getClient().isBroken()); // normal - not found

    shardedJedis.disconnect();

    assertEquals(false, deadClient.isConnected());
    assertEquals(true, deadClient.getClient().getSocket().isClosed());
    assertEquals(true, deadClient.getClient().isBroken());

    Jedis jedis2 = it.next();
    assertEquals(false, jedis2.isConnected());
    assertEquals(true, jedis2.getClient().getSocket().isClosed());
    assertEquals(false, jedis2.getClient().isBroken());

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public List<String> blpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(arg);
	    }
	}.run(arg);
    }
=======
  @Deprecated
  public List<String> blpop(final String arg) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.blpop(arg);
      }
    }.run(arg);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public List<String> brpop(final String arg) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(arg);
	    }
	}.run(arg);
    }
=======
  @Deprecated
  public List<String> brpop(final String arg) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.brpop(arg);
      }
    }.run(arg);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public ScanResult<Entry<String, String>> hscan(final String key,
	    final String cursor) {
	return new JedisClusterCommand<ScanResult<Entry<String, String>>>(
		connectionHandler, timeout, maxRedirections) {
	    @Override
	    public ScanResult<Entry<String, String>> execute(Jedis connection) {
		return connection.hscan(key, cursor);
	    }
	}.run(key);
    }
=======
  public ScanResult<Entry<String, String>> hscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<Entry<String, String>>>(connectionHandler,
        maxRedirections) {
      @Override
      public ScanResult<Entry<String, String>> execute(Jedis connection) {
        return connection.hscan(key, cursor);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public ScanResult<String> sscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<String> execute(Jedis connection) {
		return connection.sscan(key, cursor);
	    }
	}.run(key);
    }
=======
  public ScanResult<String> sscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<String>>(connectionHandler, maxRedirections) {
      @Override
      public ScanResult<String> execute(Jedis connection) {
        return connection.sscan(key, cursor);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public ScanResult<Tuple> zscan(final String key, final String cursor) {
	return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public ScanResult<Tuple> execute(Jedis connection) {
		return connection.zscan(key, cursor);
	    }
	}.run(key);
    }
=======
  public ScanResult<Tuple> zscan(final String key, final String cursor) {
    return new JedisClusterCommand<ScanResult<Tuple>>(connectionHandler, maxRedirections) {
      @Override
      public ScanResult<Tuple> execute(Jedis connection) {
        return connection.zscan(key, cursor);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public List<String> blpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.blpop(timeout, key);
	    }
	}.run(key);
    }
=======
  public List<String> blpop(final int timeout, final String key) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.blpop(timeout, key);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_4a9b82a_18308d1/rev_4a9b82a-18308d1/src/main/java/redis/clients/jedis/JedisCluster.java;<<<<<<< MINE
    public List<String> brpop(final int timeout, final String key) {
	return new JedisClusterCommand<List<String>>(connectionHandler,
		timeout, maxRedirections) {
	    @Override
	    public List<String> execute(Jedis connection) {
		return connection.brpop(timeout, key);
	    }
	}.run(key);
    }
=======
  public List<String> brpop(final int timeout, final String key) {
    return new JedisClusterCommand<List<String>>(connectionHandler, maxRedirections) {
      @Override
      public List<String> execute(Jedis connection) {
        return connection.brpop(timeout, key);
      }
    }.run(key);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/junit/revisions/rev_ae1ffc9_6dd24ff/rev_ae1ffc9-6dd24ff/src/test/java/org/junit/tests/running/classes/TestClassTest.java;<<<<<<< MINE
@Ignore
    	@Test
    	public String methodToBeMatched() {
    		return "jupiter";
    	}
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_60c1bdf_8851c49/rev_60c1bdf-8851c49/src/main/java/redis/clients/util/Pool.java;<<<<<<< MINE
protected void returnResourceObject(final T resource) {
=======
@Deprecated
  public void returnResourceObject(final T resource) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public Long del(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    client.del(keys);
=======
public Long del(final byte[] key) {
    checkIsInMulti();
    client.del(key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public List<byte[]> blpop(byte[]... args) {
    checkIsInMultiOrPipeline();
    client.blpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
public List<byte[]> blpop(byte[]... args) {
    checkIsInMulti();
    client.blpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public List<byte[]> brpop(byte[]... args) {
    checkIsInMultiOrPipeline();
    client.brpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
public List<byte[]> brpop(byte[]... args) {
    checkIsInMulti();
    client.brpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
  public long pfcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    client.pfcount(key);
=======
  public Long pfcount(byte[]... keys) {
    checkIsInMulti();
    client.pfcount(keys);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public String set(final byte[] key, final byte[] value, final byte[] nxxx, final byte[] expx,
      final long time) {
    checkIsInMultiOrPipeline();
    client.set(key, value, nxxx, expx, time);
    return client.getStatusCodeReply();
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public String set(final byte[] key, final byte[] value, final byte[] nxxx) {
    checkIsInMultiOrPipeline();
    client.set(key, value, nxxx);
    return client.getStatusCodeReply();
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
public String set(final byte[] key, final byte[] value, final byte[] nxxx, final byte[] expx,
      final int time) {
    checkIsInMultiOrPipeline();
    client.set(key, value, nxxx, expx, time);
    return client.getStatusCodeReply();
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Long del(final String... keys) {
    checkIsInMultiOrPipeline();
    client.del(keys);
=======
public Long del(String key) {
    client.del(key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> blpop(String... args) {
    checkIsInMultiOrPipeline();
    client.blpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
@Deprecated
  public List<String> blpop(String arg) {
    return blpop(new String[] { arg });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> brpop(String... args) {
    checkIsInMultiOrPipeline();
    client.brpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
@Deprecated
  public List<String> brpop(String arg) {
    return brpop(new String[] { arg });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Boolean scriptExists(String sha1) {
    String[] a = new String[1];
    a[0] = sha1;
    return scriptExists(a).get(0);
=======
public List<Boolean> scriptExists(String... sha1) {
    client.scriptExists(sha1);
    List<Long> result = client.getIntegerMultiBulkReply();
    List<Boolean> exists = new ArrayList<Boolean>();

    for (Long value : result)
      exists.add(value == 1);

    return exists;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public long pfcount(final String key) {
    checkIsInMultiOrPipeline();
    client.pfcount(key);
=======
@Override
  public long pfcount(String... keys) {
    checkIsInMulti();
    client.pfcount(keys);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> blpop(final int timeout, final String... keys) {
    return blpop(getArgsAddTimeout(timeout, keys));
=======
@Override
  public List<String> blpop(int timeout, String key) {
    return blpop(key, String.valueOf(timeout));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> brpop(final int timeout, final String... keys) {
    return brpop(getArgsAddTimeout(timeout, keys));
=======
@Override
  public List<String> brpop(int timeout, String key) {
    return brpop(key, String.valueOf(timeout));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public String set(final String key, final String value, final String nxxx, final String expx,
      final long time) {
    checkIsInMultiOrPipeline();
    client.set(key, value, nxxx, expx, time);
    return client.getStatusCodeReply();
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
@Override
  public void set(final String key, final String value, final String nxxx, final String expx,
      final long time) {
    set(SafeEncoder.encode(key), SafeEncoder.encode(value), SafeEncoder.encode(nxxx),
      SafeEncoder.encode(expx), time);
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_adeec7e_454f783/rev_adeec7e-454f783/src/main/java/redis/clients/jedis/BinaryShardedJedis.java;<<<<<<< MINE
@Override
  public String set(byte[] key, byte[] value, byte[] nxxx, byte[] expx, long time) {
    Jedis j = getShard(key);
    return j.set(key, value, nxxx, expx, time);
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public Boolean exists(final byte[] key) {
=======
public Long exists(final byte[]... keys) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public Boolean exists(final byte[] key) {
=======
@Deprecated
  public Boolean exists(final byte[] key) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public Long del(final byte[]... keys) {
=======
public Long del(final byte[] key) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Boolean exists(final String key) {
=======
public Long exists(final String... keys) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Boolean exists(final String key) {
=======
@Deprecated
  public Boolean exists(final String key) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Long del(final String... keys) {
    checkIsInMultiOrPipeline();
    client.del(keys);
=======
public Long del(String key) {
    client.del(key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public Boolean scriptExists(String sha1) {
    String[] a = new String[1];
    a[0] = sha1;
    return scriptExists(a).get(0);
=======
public List<Boolean> scriptExists(String... sha1) {
    client.scriptExists(sha1);
    List<Long> result = client.getIntegerMultiBulkReply();
    List<Boolean> exists = new ArrayList<Boolean>();

    for (Long value : result)
      exists.add(value == 1);

    return exists;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public long pfcount(final String key) {
=======
@Override
  public long pfcount(String... keys) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> blpop(final int timeout, final String... keys) {
    return blpop(getArgsAddTimeout(timeout, keys));
=======
@Override
  public List<String> blpop(int timeout, String key) {
    return blpop(key, String.valueOf(timeout));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Jedis.java;<<<<<<< MINE
@Override
  public List<String> brpop(final int timeout, final String... keys) {
    return brpop(getArgsAddTimeout(timeout, keys));
=======
@Override
  public List<String> brpop(int timeout, String key) {
    return brpop(key, String.valueOf(timeout));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
@Override
  public void exists(final String key) {
=======
@Deprecated
  public void exists(final String key) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Client.java;<<<<<<< MINE
@Override
  public void exists(final String key) {
    exists(SafeEncoder.encode(key));
=======
public void exists(final String... keys) {
    final byte[][] bkeys = SafeEncoder.encodeMany(keys);
    exists(bkeys);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Commands.java;<<<<<<< MINE
=======
@Deprecated
  public void exists(final String key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_9e95ce1_b540775/rev_9e95ce1-b540775/src/main/java/redis/clients/jedis/Commands.java;<<<<<<< MINE
=======
public void exists(final String... keys);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_1e5e10c_48170f7/rev_1e5e10c-48170f7/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public Long del(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    client.del(keys);
=======
public Long del(final byte[] key) {
    checkIsInMulti();
    client.del(key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_1e5e10c_48170f7/rev_1e5e10c-48170f7/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public List<byte[]> blpop(byte[]... args) {
    checkIsInMultiOrPipeline();
    client.blpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
public List<byte[]> blpop(byte[]... args) {
    checkIsInMulti();
    client.blpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_1e5e10c_48170f7/rev_1e5e10c-48170f7/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
@Override
  public List<byte[]> brpop(byte[]... args) {
    checkIsInMultiOrPipeline();
    client.brpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
=======
public List<byte[]> brpop(byte[]... args) {
    checkIsInMulti();
    client.brpop(args);
    client.setTimeoutInfinite();
    try {
      return client.getBinaryMultiBulkReply();
    } finally {
      client.rollbackTimeout();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/jedis/revisions/rev_1e5e10c_48170f7/rev_1e5e10c-48170f7/src/main/java/redis/clients/jedis/BinaryJedis.java;<<<<<<< MINE
  public long pfcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    client.pfcount(key);
=======
  public Long pfcount(byte[]... keys) {
    checkIsInMulti();
    client.pfcount(keys);
>>>>>>> YOURS
