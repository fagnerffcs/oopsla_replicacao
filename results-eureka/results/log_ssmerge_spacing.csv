revision;file;methodsignature;leftbody;basebody;rightbody
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplication(String,boolean);public Application getApplication(String appName,
                                      boolean includeRemoteRegion) {;;public Application getApplication(String appName, boolean includeRemoteRegion) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationsFromAllRemoteRegions();;;public Applications getApplicationsFromAllRemoteRegions() {
        return getApplicationsFromMultipleRegions(null);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationsFromLocalRegionOnly();;;public Applications getApplicationsFromLocalRegionOnly() {
        return getApplicationsFromMultipleRegions(new String[0]);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationsFromMultipleRegions(String[]);;;public Applications getApplicationsFromMultipleRegions(@Nullable String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        if (includeRemoteRegion) {
            GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS.increment();
        } else {
            GET_ALL_CACHE_MISS.increment();
        }
        Applications apps = new Applications();
        apps.setVersion(1L);
        for (Entry<String, Map<String, Lease<InstanceInfo>>> entry : _registry.entrySet()) {
            Application app = null;

            if (entry.getValue() != null) {
                for (Entry<String, Lease<InstanceInfo>> stringLeaseEntry : entry.getValue().entrySet()) {
                    Lease<InstanceInfo> lease = stringLeaseEntry.getValue();
                    if (app == null) {
                        app = new Application(lease.getHolder().getAppName());
                    }
                    app.addInstance(decorateInstanceInfo(lease));
                }
            }
            if (app != null) {
                apps.addApplication(app);
            }
        }
        if (includeRemoteRegion) {
            for (String remoteRegion : remoteRegions) {
                RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                if (null != remoteRegistry) {
                    Applications remoteApps = remoteRegistry.getApplications();
                    for (Application application : remoteApps.getRegisteredApplications()) {
                        if (shouldFetchFromRemoteRegistry(application.getName(), remoteRegion)) {
                            Application appInstanceTillNow = apps.getRegisteredApplications(application.getName());
                            if (appInstanceTillNow == null) {
                                appInstanceTillNow = new Application(application.getName());
                                apps.addApplication(appInstanceTillNow);
                            }
                            for (InstanceInfo instanceInfo : application.getInstances()) {
                                appInstanceTillNow.addInstance(instanceInfo);
                            }
                        }
                    }
                }
            }
        }
        apps.setAppsHashCode(apps.getReconcileHashCode());
        return apps;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationFromMultipleRegions(String,String[]);;;@Nullable
    public Application getApplicationFromMultipleRegions(String appName, @Nullable String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        Application app = null;

        Map<String, Lease<InstanceInfo>> leaseMap = _registry.get(appName);

        if (leaseMap != null && leaseMap.size() > 0) {
            for (Entry<String, Lease<InstanceInfo>> entry : leaseMap.entrySet()) {
                if (app == null) {
                    app = new Application(appName);
                }
                app.addInstance(decorateInstanceInfo(entry.getValue()));
            }
        }

        if (includeRemoteRegion) {
            for (String remoteRegion : remoteRegions) {
                if (shouldFetchFromRemoteRegistry(appName, remoteRegion)) {
                    RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                    if (null != remoteRegistry) {
                        Application remoteApp = remoteRegistry.getApplication(appName);
                        if (null != remoteApp) {
                            if (null == app) {
                                app = new Application(appName);
                            }
                            for (InstanceInfo instanceInfo : remoteApp.getInstances()) {
                                app.addInstance(instanceInfo);
                            }
                        }
                    }
                }
            }
        }
        return app;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;shouldFetchFromRemoteRegistry(String,String);;;private boolean shouldFetchFromRemoteRegistry(String appName, String remoteRegion) {
        Set<String> whiteList = eurekaConfig.getRemoteRegionAppWhitelist(remoteRegion);
        if (null == whiteList) {
            whiteList = eurekaConfig.getRemoteRegionAppWhitelist(null); // see global whitelist.
        }
        return null == whiteList || whiteList.contains(appName);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationDeltas();            Iterator<RecentlyChangedItem> iter = this.recentlyChangedQueue
                    .iterator();;;            Iterator<RecentlyChangedItem> iter = this.recentlyChangedQueue.iterator();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig;getRemoteRegionUrlsWithName();;;Map<String, String> getRemoteRegionUrlsWithName();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig;getRemoteRegionAppWhitelist(String);;;@Nullable
    Set<String> getRemoteRegionAppWhitelist(@Nullable String regionName);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getRemoteRegionUrlsWithName();;;@Override
    public Map<String, String> getRemoteRegionUrlsWithName() {
        String propName = namespace + "remoteRegionUrlsWithName";
        String remoteRegionUrlWithNameString = configInstance.getStringProperty(propName, null).get();
        if (null == remoteRegionUrlWithNameString) {
            return Collections.emptyMap();
        }

        String[] remoteRegionUrlWithNamePairs = remoteRegionUrlWithNameString.split(",");
        Map<String, String> toReturn = new HashMap<String, String>(remoteRegionUrlWithNamePairs.length);

        final String pairSplitChar = ";";
        for (String remoteRegionUrlWithNamePair : remoteRegionUrlWithNamePairs) {
            String[] pairSplit = remoteRegionUrlWithNamePair.split(pairSplitChar);
            if (pairSplit.length < 2) {
                logger.error("Error reading eureka remote region urls from property {}. " +
                             "Invalid entry {} for remote region url. The entry must contain region name and url separated by a {}. Ignoring this entry.",
                             new String[]{propName, remoteRegionUrlWithNamePair, pairSplitChar});
            } else {
                String regionName = pairSplit[0];
                String regionUrl = pairSplit[1];
                if (pairSplit.length > 2) {
                    StringBuilder regionUrlAssembler = new StringBuilder();
                    for (int i = 1; i < pairSplit.length; i++) {
                        if (regionUrlAssembler.length() != 0) {
                            regionUrlAssembler.append(pairSplitChar);
                        }
                        regionUrlAssembler.append(pairSplit[i]);
                    }
                    regionUrl = regionUrlAssembler.toString();
                }
                toReturn.put(regionName, regionUrl);
            }
        }
        return toReturn;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getRemoteRegionAppWhitelist(String);;;@Nullable
    @Override
    public Set<String> getRemoteRegionAppWhitelist(@Nullable String regionName) {
        if (null == regionName) {
            regionName = "global";
        } else {
            regionName = regionName.trim().toLowerCase();
        }
        DynamicStringProperty appWhiteListProp =
                configInstance.getStringProperty(namespace + "remoteRegion." + regionName + ".appWhiteList", null);
        if (null == appWhiteListProp || null == appWhiteListProp.get()) {
            return null;
        } else {
            String appWhiteListStr = appWhiteListProp.get();
            String[] whitelistEntries = appWhiteListStr.split(",");
            return new HashSet<String>(Arrays.asList(whitelistEntries));
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/TestDefaultEurekaServerConfig;testRemoteRegionUrlsWithName2Regions();;;@Test
    public void testRemoteRegionUrlsWithName2Regions() throws Exception {
        String region1 = "myregion1";
        String region1url = "http://local:888/eee";
        String region2 = "myregion2";
        String region2url = "http://local:888/eee";
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegionUrlsWithName", region1
                                                                                                + ";" + region1url
                                                                                                + "," + region2
                                                                                                + ";" + region2url);
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        Map<String,String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();

        Assert.assertEquals("Unexpected remote region url count.", 2, remoteRegionUrlsWithName.size());
        Assert.assertTrue("Remote region 1 not found.", remoteRegionUrlsWithName.containsKey(region1));
        Assert.assertTrue("Remote region 2 not found.", remoteRegionUrlsWithName.containsKey(region2));
        Assert.assertEquals("Unexpected remote region 1 url.", region1url, remoteRegionUrlsWithName.get(region1));
        Assert.assertEquals("Unexpected remote region 2 url.", region2url, remoteRegionUrlsWithName.get(region2));

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/TestDefaultEurekaServerConfig;testRemoteRegionUrlsWithName1Region();;;@Test
    public void testRemoteRegionUrlsWithName1Region() throws Exception {
        String region1 = "myregion1";
        String region1url = "http://local:888/eee";
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegionUrlsWithName", region1
                                                                                                + ";" + region1url);
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        Map<String,String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();

        Assert.assertEquals("Unexpected remote region url count.", 1, remoteRegionUrlsWithName.size());
        Assert.assertTrue("Remote region 1 not found.", remoteRegionUrlsWithName.containsKey(region1));
        Assert.assertEquals("Unexpected remote region 1 url.", region1url, remoteRegionUrlsWithName.get(region1));

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/TestDefaultEurekaServerConfig;testGetGlobalAppWhiteList();;;@Test
    public void testGetGlobalAppWhiteList() throws Exception {
        String whitelistApp = "myapp";
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegion.global.appWhiteList", whitelistApp);
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        Set<String> globalList = config.getRemoteRegionAppWhitelist(null);
        Assert.assertNotNull("Global whitelist is null.", globalList);
        Assert.assertEquals("Global whitelist not as expected.", 1, globalList.size());
        Assert.assertEquals("Global whitelist not as expected.", whitelistApp, globalList.iterator().next());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/TestDefaultEurekaServerConfig;testGetRegionAppWhiteList();;;@Test
    public void testGetRegionAppWhiteList() throws Exception {
        String globalWhiteListApp = "myapp";
        String regionWhiteListApp = "myapp";
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegion.global.appWhiteList", globalWhiteListApp);
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegion.region1.appWhiteList", regionWhiteListApp);
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        Set<String> regionList = config.getRemoteRegionAppWhitelist(null);
        Assert.assertNotNull("Region whitelist is null.", regionList);
        Assert.assertEquals("Region whitelist not as expected.", 1, regionList.size());
        Assert.assertEquals("Region whitelist not as expected.", regionWhiteListApp, regionList.iterator().next());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;setUp();;;@Before
    public void setUp() throws Exception {
        ConfigurationManager.getConfigInstance().setProperty("eureka.deltaRetentionTimerIntervalInMs",
                                                             "600000");
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegion.registryFetchIntervalInSeconds",
                                                             "5");
        ConfigurationManager.getConfigInstance().setProperty("eureka.remoteRegionUrlsWithName",
                                                             "myregion;http://localhost:" + REMOTE_REGION_PORT + "/" +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
        populateRemoteRegistryAtStartup();
        mockRemoteEurekaServer = new MockRemoteEurekaServer(REMOTE_REGION_PORT, remoteRegionApps, remoteRegionAppsDelta);
        mockRemoteEurekaServer.start();

        EurekaServerConfig serverConfig = new DefaultEurekaServerConfig();
        EurekaServerConfigurationManager.getInstance().setConfiguration(serverConfig);
        ApplicationInfoManager.getInstance().initComponent(new MyDataCenterInstanceConfig());
        registry = new InstanceRegistry() {

            @Override
            public boolean isLeaseExpirationEnabled() {
                return false;
            }

            @Override
            public InstanceInfo getNextServerFromEureka(String virtualHostname, boolean secure) {
                return null;
            }
        };
        registry.initRemoteRegionRegistry();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;tearDown();;;@After
    public void tearDown() throws Exception {
        mockRemoteEurekaServer.stop();
        for (Pair<String, String> registeredApp : registeredApps) {
            System.out.println("Canceling application: " + registeredApp.first() + " from local registry.");
            registry.cancel(registeredApp.first(), registeredApp.second(), false);
        }
        remoteRegionApps.clear();
        remoteRegionAppsDelta.clear();
        ConfigurationManager.getConfigInstance().clearProperty("eureka.remoteRegionUrls");
        ConfigurationManager.getConfigInstance().clearProperty("eureka.deltaRetentionTimerIntervalInMs");
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;testGetAppsFromAllRemoteRegions();;;@Test
    public void testGetAppsFromAllRemoteRegions() throws Exception {
        Applications apps = registry.getApplicationsFromAllRemoteRegions();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from remote regions do not match", 1, registeredApplications.size());
        Application app = registeredApplications.iterator().next();
        Assert.assertEquals("Added app did not return from remote registry", REMOTE_REGION_APP_NAME, app.getName());
        Assert.assertEquals("Returned app did not have the instance", 1, app.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;testGetAppsDeltaFromAllRemoteRegions();;;@Test
    public void testGetAppsDeltaFromAllRemoteRegions() throws Exception {
        testGetAppsFromAllRemoteRegions(); // to add to registry

        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME)); /// local delta
        waitForDeltaToBeRetrieved();
        Applications appDelta = registry.getApplicationDeltasFromMultipleRegions(null);
        List<Application> registeredApplications = appDelta.getRegisteredApplications();
        Assert.assertEquals("Apps size from remote regions do not match", 2, registeredApplications.size());
        Application locaApplication = null;
        Application remApplication = null;
        for (Application registeredApplication : registeredApplications) {
            if (registeredApplication.getName().equalsIgnoreCase(LOCAL_REGION_APP_NAME)) {
                locaApplication = registeredApplication;
            }
            if (registeredApplication.getName().equalsIgnoreCase(REMOTE_REGION_APP_NAME)) {
                remApplication = registeredApplication;
            }
        }
        Assert.assertNotNull("Did not find local registry app in delta.", locaApplication);
        Assert.assertEquals("Local registry app instance count in delta not as expected.", 1,
                            locaApplication.getInstances().size());
        Assert.assertNotNull("Did not find remote registry app in delta", remApplication);
        Assert.assertEquals("Remote registry app instance count  in delta not as expected.", 1,
                            remApplication.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;waitForDeltaToBeRetrieved();;;private void waitForDeltaToBeRetrieved() throws InterruptedException {
        int count = 0;
        while (count < 3 && !mockRemoteEurekaServer.isSentDelta()) {
            System.out.println("Sleeping for 10 seconds to let the remote registry fetch delta. Attempt: " + count);
            Thread.sleep(10 * 1000);
            System.out.println("Done sleeping for 10 seconds to let the remote registry fetch delta");
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;testGetAppsFromLocalRegionOnly();;;@Test
    public void testGetAppsFromLocalRegionOnly() throws Exception {
        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME));

        Applications apps = registry.getApplicationsFromLocalRegionOnly();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from local region do not match", 1, registeredApplications.size());
        Application app = registeredApplications.iterator().next();
        Assert.assertEquals("Added app did not return from local registry", LOCAL_REGION_APP_NAME, app.getName());
        Assert.assertEquals("Returned app did not have the instance", 1, app.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;testGetAppsFromBothRegions();;;@Test
    public void testGetAppsFromBothRegions() throws Exception {
        registerInstanceLocally(createRemoteInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME));
        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME));

        Applications apps = registry.getApplicationsFromAllRemoteRegions();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from both regions do not match", 2, registeredApplications.size());
        Application locaApplication = null;
        Application remApplication = null;
        for (Application registeredApplication : registeredApplications) {
            if (registeredApplication.getName().equalsIgnoreCase(LOCAL_REGION_APP_NAME)) {
                locaApplication = registeredApplication;
            }
            if (registeredApplication.getName().equalsIgnoreCase(REMOTE_REGION_APP_NAME)) {
                remApplication = registeredApplication;
            }
        }
        Assert.assertNotNull("Did not find local registry app", locaApplication);
        Assert.assertEquals("Local registry app instance count not as expected.", 1,
                            locaApplication.getInstances().size());
        Assert.assertNotNull("Did not find remote registry app", remApplication);
        Assert.assertEquals("Remote registry app instance count not as expected.", 2,
                            remApplication.getInstances().size());

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;registerInstanceLocally(InstanceInfo);;;private void registerInstanceLocally(InstanceInfo remoteInstance) {
        registry.register(remoteInstance, 10000000, false);
        registeredApps.add(new Pair<String, String>(LOCAL_REGION_APP_NAME, LOCAL_REGION_APP_NAME));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;populateRemoteRegistryAtStartup();;;private void populateRemoteRegistryAtStartup() {
        Application myapp = createRemoteApps();
        Application myappDelta = createRemoteAppsDelta();
        remoteRegionApps.put(REMOTE_REGION_APP_NAME, myapp);
        remoteRegionAppsDelta.put(REMOTE_REGION_APP_NAME, myappDelta);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;createRemoteApps();;;private Application createRemoteApps() {
        Application myapp = new Application(REMOTE_REGION_APP_NAME);
        InstanceInfo instanceInfo = createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME);
        //instanceInfo.setActionType(InstanceInfo.ActionType.MODIFIED);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;createRemoteAppsDelta();;;private Application createRemoteAppsDelta() {
        Application myapp = new Application(REMOTE_REGION_APP_NAME);
        InstanceInfo instanceInfo = createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;createRemoteInstance(String);;;private InstanceInfo createRemoteInstance(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = InstanceInfo.Builder.newBuilder();
        instanceBuilder.setAppName(REMOTE_REGION_APP_NAME);
        instanceBuilder.setHostName(instanceHostName);
        instanceBuilder.setIPAddr("10.10.101.1");
        instanceBuilder.setDataCenterInfo(new DataCenterInfo() {
            @Override
            public Name getName() {
                return Name.MyOwn;
            }
        });
        return instanceBuilder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;createLocalApps();;;private Application createLocalApps() {
        Application myapp = new Application(LOCAL_REGION_APP_NAME);
        InstanceInfo instanceInfo = createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/InstanceRegistryTest;createLocalInstance(String);;;private InstanceInfo createLocalInstance(String hostname) {
        InstanceInfo.Builder instanceBuilder = InstanceInfo.Builder.newBuilder();
        instanceBuilder.setAppName(LOCAL_REGION_APP_NAME);
        instanceBuilder.setHostName(hostname);
        instanceBuilder.setIPAddr("10.10.101.1");
        instanceBuilder.setDataCenterInfo(new DataCenterInfo() {
            @Override
            public Name getName() {
                return Name.MyOwn;
            }
        });
        return instanceBuilder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;MockRemoteEurekaServer(int,Map<String,Application>,Map<String,Application>);;;public MockRemoteEurekaServer(int port, Map<String, Application> applicationMap,
                                  Map<String, Application> applicationDeltaMap) {
        this.applicationMap = applicationMap;
        this.applicationDeltaMap = applicationDeltaMap;
        server = new Server(port);
        server.setHandler(new AppsResourceHandler());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;start();;;public void start() throws Exception {
        server.start();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;stop();;;public void stop() throws Exception {
        server.stop();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;isSentDelta();;;public boolean isSentDelta() {
        return sentDelta;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);;;@Override
        public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch)
                throws IOException, ServletException {
            String pathInfo = request.getPathInfo();
            System.out.println(
                    "Eureka resource mock, received request on path: " + pathInfo + ". HTTP method: |" + request
                            .getMethod() + "|");
            boolean handled = false;
            if (null != pathInfo && pathInfo.startsWith("")) {
                pathInfo = pathInfo.substring(EUREKA_API_BASE_PATH.length());
                if (pathInfo.startsWith("apps/delta")) {
                    Applications apps = new Applications();
                    for (Application application : applicationDeltaMap.values()) {
                        apps.addApplication(application);
                    }
                    apps.setAppsHashCode(apps.getReconcileHashCode());
                    sendOkResponseWithContent((Request) request, response, XmlXStream.getInstance().toXML(apps));
                    handled = true;
                    sentDelta = true;
                } else if(pathInfo.startsWith("apps")) {
                    Applications apps = new Applications();
                    for (Application application : applicationMap.values()) {
                        apps.addApplication(application);
                    }
                    apps.setAppsHashCode(apps.getReconcileHashCode());
                    sendOkResponseWithContent((Request) request, response, XmlXStream.getInstance().toXML(apps));
                    handled = true;
                }
            }

            if(!handled) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND,
                                   "Request path: " + pathInfo + " not supported by eureka resource mock.");
            }
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;sendOkResponseWithContent(Request,HttpServletResponse,String);;;private void sendOkResponseWithContent(Request request, HttpServletResponse response, String content)
                throws IOException {
            response.setContentType("application/xml");
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().println(content);
            response.getWriter().flush();
            request.setHandled(true);
            System.out.println("Eureka resource mock, sent response for request path: " + request.getPathInfo());
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/InstanceRegionChecker;InstanceRegionChecker(String,EurekaClientConfig);;;InstanceRegionChecker(String remoteRegionsToFetch, EurekaClientConfig clientConfig) {
        localRegion = clientConfig.getRegion();
        if (null != remoteRegionsToFetch) {
            String[] remoteRegions = remoteRegionsToFetch.split(",");
            for (String remoteRegion : remoteRegions) {
                String[] availabilityZones = clientConfig.getAvailabilityZones(remoteRegion);
                if (null == availabilityZones ||
                    (availabilityZones.length == 1 && availabilityZones[0].equals(DEFAULT_ZONE))) {
                    String msg = "No availability zone information available for remote region: " + remoteRegion +
                                 ". This is required if registry information for this region is configured to be fetched.";
                    logger.error(msg);
                    throw new RuntimeException(msg);
                } else {
                    for (String availabilityZone : availabilityZones) {
                        availabilityZoneVsRegion.put(availabilityZone, remoteRegion);
                    }
                }
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/InstanceRegionChecker;getInstanceRegion(InstanceInfo);;;@Nullable
    public String getInstanceRegion(InstanceInfo instanceInfo) {
        if (DataCenterInfo.Name.Amazon.equals(instanceInfo.getDataCenterInfo().getName())) {
            Map<String, String> metadata = instanceInfo.getMetadata();
            String availabilityZone = metadata.get(AmazonInfo.MetaDataKey.availabilityZone.getName());
            if (null != availabilityZone) {
                return availabilityZoneVsRegion.get(availabilityZone);
            }
        }

        return null;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/InstanceRegionChecker;isInstanceInLocalRegion(InstanceInfo);;;public boolean isInstanceInLocalRegion(InstanceInfo instanceInfo) {
        String instanceRegion = getInstanceRegion(instanceInfo);
        return isLocalRegion(instanceRegion);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/InstanceRegionChecker;isLocalRegion(String);;;public boolean isLocalRegion(@Nullable String instanceRegion) {
        return null == instanceRegion || instanceRegion.equals(localRegion); // no region == local
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/InstanceRegionChecker;getLocalRegion();;;public String getLocalRegion() {
        return localRegion;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig;fetchRegistryForRemoteRegions();;;@Nullable
    @Override
    public String fetchRegistryForRemoteRegions() {
        return configInstance.getStringProperty(namespace + "fetchRemoteRegionsRegistry", null).get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig;fetchRegistryForRemoteRegions();;;@Nullable
    String fetchRegistryForRemoteRegions();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;DiscoveryClient(InstanceInfo,EurekaClientConfig);;;            remoteRegionsToFetch = clientConfig.fetchRegistryForRemoteRegions();
            instanceRegionChecker = new InstanceRegionChecker(remoteRegionsToFetch, clientConfig);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;getInstancesByVipAddress(String,boolean,String);;;public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure, String region) {
        if (vipAddress == null) {
            throw new IllegalArgumentException(
                    "Supplied VIP Address cannot be null");
        }
        Applications applications;
        if (instanceRegionChecker.isLocalRegion(region)) {
            applications = this.localRegionApps.get();
        } else {
            applications = remoteRegionVsApps.get(region);
            if (null == region) {
                logger.debug("No applications are defined for region {}, so returning an empty instance list for vip address {}.",
                             region, vipAddress);
                return Collections.emptyList();
            }
        }

        if (!secure) {
            return applications.getInstancesByVirtualHostName(vipAddress);
        } else {
            return applications.getInstancesBySecureVirtualHostName(vipAddress);

        }

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;fetchRegistry();;;            Applications applications = getApplications();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;getReconcileHashCode(Applications);;;private String getReconcileHashCode(Applications applications) {
        TreeMap<String, AtomicInteger> instanceCountMap = new TreeMap<String, AtomicInteger>();
        if (isFetchingRemoteRegionRegistries()) {
            for (Applications remoteApp : remoteRegionVsApps.values()) {
                remoteApp.populateInstanceCountMap(instanceCountMap);
            }
        }
        applications.populateInstanceCountMap(instanceCountMap);
        return Applications.getReconcileHashCode(instanceCountMap);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;reconcileAndLogDifference(ClientResponse,Applications,String);            Map<String, List<String>> reconcileDiffMap = getApplications()
            .getReconcileMapDiff(serverApps);;;            Map<String, List<String>> reconcileDiffMap = getApplications().getReconcileMapDiff(serverApps);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;reconcileAndLogDifference(ClientResponse,Applications,String);            for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap
                    .entrySet()) {;;            for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;updateDelta(Applications);private void updateDelta(Applications delta) {;;private void
    updateDelta(Applications delta) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;updateDelta(Applications);;;                Applications applications = getApplications();
                String instanceRegion = instanceRegionChecker.getInstanceRegion(instance);
                if (!instanceRegionChecker.isLocalRegion(instanceRegion)) {
                    Applications remoteApps = remoteRegionVsApps.get(instanceRegion);
                    if (null == remoteApps) {
                        remoteApps = new Applications();
                        remoteRegionVsApps.put(instanceRegion, remoteApps);
                    }
                    applications = remoteApps;
                }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;updateDelta(Applications);                            instance.getId());;;                                 instance.getId());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;updateDelta(Applications);;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;makeRemoteCall(Action,int);;;                if (isFetchingRemoteRegionRegistries()) {
                    urlPath += "?regions=" + remoteRegionsToFetch;
                }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;makeRemoteCall(Action,int);;;                if (isFetchingRemoteRegionRegistries()) {
                    urlPath += "?regions=" + remoteRegionsToFetch;
                }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;isFetchingRemoteRegionRegistries();;;private boolean isFetchingRemoteRegionRegistries() {
        return null != remoteRegionsToFetch;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Application;shuffleAndStoreInstances(Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);;;public void shuffleAndStoreInstances(Map<String, Applications> remoteRegionsRegistry,
                                         EurekaClientConfig clientConfig, InstanceRegionChecker instanceRegionChecker) {
        _shuffleAndStoreInstances(clientConfig.shouldFilterOnlyUpInstances(), true, remoteRegionsRegistry, clientConfig,
                                  instanceRegionChecker);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Application;_shuffleAndStoreInstances(boolean,boolean,Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);;;private void _shuffleAndStoreInstances(boolean filterUpInstances, boolean indexByRemoteRegions,
                                           @Nullable Map<String, Applications> remoteRegionsRegistry,
                                           @Nullable EurekaClientConfig clientConfig,
                                           @Nullable InstanceRegionChecker instanceRegionChecker) {
        List<InstanceInfo> instanceInfoList;
        synchronized (instances) {
            instanceInfoList = new ArrayList<InstanceInfo>(instances);
        }
        if (indexByRemoteRegions || filterUpInstances) {
            Iterator<InstanceInfo> it = instanceInfoList.iterator();
            while (it.hasNext()) {
                InstanceInfo instanceInfo = it.next();
                if (filterUpInstances && !InstanceStatus.UP.equals(instanceInfo.getStatus())) {
                    it.remove();
                } else if (indexByRemoteRegions && null != instanceRegionChecker && null != clientConfig
                           && null != remoteRegionsRegistry) {
                    String instanceRegion = instanceRegionChecker.getInstanceRegion(instanceInfo);
                    if (!instanceRegionChecker.isLocalRegion(instanceRegion)) {
                        Applications appsForRemoteRegion = remoteRegionsRegistry.get(instanceRegion);
                        if (null == appsForRemoteRegion) {
                            appsForRemoteRegion = new Applications();
                            remoteRegionsRegistry.put(instanceRegion, appsForRemoteRegion);
                        }

                        Application remoteApp = appsForRemoteRegion.getRegisteredApplications(instanceInfo.getAppName());
                        if (null == remoteApp) {
                            remoteApp = new Application(instanceInfo.getAppName());
                            appsForRemoteRegion.addApplication(remoteApp);
                        }

                        remoteApp.addInstance(instanceInfo);
                        this.removeInstance(instanceInfo, false);
                        it.remove();
                    }
                }
            }

        }
        Collections.shuffle(instanceInfoList);
        this.shuffledInstances.set(instanceInfoList);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Application;removeInstance(InstanceInfo,boolean);;;private void removeInstance(InstanceInfo i, boolean markAsDirty) {
        instancesMap.remove(i.getId());
        synchronized (instances) {
            instances.remove(i);
            if (markAsDirty) {
                isDirty = true;
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;populateInstanceCountMap(TreeMap<String,AtomicInteger>);;;public void populateInstanceCountMap(TreeMap<String, AtomicInteger> instanceCountMap) {
        for (Application app : this.getRegisteredApplications()) {
            for (InstanceInfo info : app.getInstancesAsIsFromEureka()) {
                AtomicInteger instanceCount = instanceCountMap.get(info
                        .getStatus().name());
                if (instanceCount == null) {
                    instanceCount = new AtomicInteger(0);
                    instanceCountMap
                    .put(info.getStatus().name(), instanceCount);
                }
                instanceCount.incrementAndGet();
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;getReconcileHashCode(TreeMap<String,AtomicInteger>);;;public static String getReconcileHashCode(TreeMap<String, AtomicInteger> instanceCountMap) {
        String reconcileHashCode = "";
        for (Map.Entry<String, AtomicInteger> mapEntry : instanceCountMap
                .entrySet()) {
            reconcileHashCode = reconcileHashCode + mapEntry.getKey()
            + STATUS_DELIMITER + mapEntry.getValue().get()
            + STATUS_DELIMITER;
        }
        return reconcileHashCode;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;shuffleAndIndexInstances(Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);;;public void shuffleAndIndexInstances(Map<String, Applications> remoteRegionsRegistry, EurekaClientConfig clientConfig,
                                         InstanceRegionChecker instanceRegionChecker) {
        _shuffleInstances(clientConfig.shouldFilterOnlyUpInstances(), true, remoteRegionsRegistry, clientConfig,
                          instanceRegionChecker);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;_shuffleInstances(boolean,boolean,Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);;;private void _shuffleInstances(boolean filterUpInstances, boolean indexByRemoteRegions,
                                   @Nullable Map<String, Applications> remoteRegionsRegistry,
                                   @Nullable EurekaClientConfig clientConfig,
                                   @Nullable InstanceRegionChecker instanceRegionChecker) {
        this.virtualHostNameAppMap.clear();
        this.secureVirtualHostNameAppMap.clear();
        for (Application application : appNameApplicationMap.values()) {
            if (indexByRemoteRegions) {
                application.shuffleAndStoreInstances(remoteRegionsRegistry, clientConfig, instanceRegionChecker);
            } else {
                application.shuffleAndStoreInstances(filterUpInstances);
            }
            this.addInstancesToVIPMaps(application);
        }
        shuffleAndFilterInstances(this.virtualHostNameAppMap,
                this.shuffleVirtualHostNameMap, virtualHostNameIndexMap,
                filterUpInstances);
        shuffleAndFilterInstances(this.secureVirtualHostNameAppMap,
                this.shuffledSecureVirtualHostNameMap,
                secureVirtualHostNameIndexMap, filterUpInstances);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;MockRemoteEurekaServer(int,Map<String,Application>,Map<String,Application>,Map<String,Application>,Map<String,Application>);;;public MockRemoteEurekaServer(int port, Map<String, Application> localRegionApps,
                                  Map<String, Application> localRegionAppsDelta,
                                  Map<String, Application> remoteRegionApps,
                                  Map<String, Application> remoteRegionAppsDelta) {
        this.applicationMap = localRegionApps;
        this.applicationDeltaMap = localRegionAppsDelta;
        this.remoteRegionApps = remoteRegionApps;
        this.remoteRegionAppsDelta = remoteRegionAppsDelta;
        server = new Server(port);
        server.setHandler(new AppsResourceHandler());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;start();;;public void start() throws Exception {
        server.start();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;stop();;;public void stop() throws Exception {
        server.stop();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;isSentDelta();;;public boolean isSentDelta() {
        return sentDelta;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);;;@Override
        public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch)
                throws IOException, ServletException {
            String pathInfo = request.getPathInfo();
            System.out.println(
                    "Eureka resource mock, received request on path: " + pathInfo + ". HTTP method: |" + request
                            .getMethod() + "|" + ", query string: " + request.getQueryString());
            boolean handled = false;
            if (null != pathInfo && pathInfo.startsWith("")) {
                pathInfo = pathInfo.substring(EUREKA_API_BASE_PATH.length());
                boolean includeRemote = isRemoteRequest(request);

                if (pathInfo.startsWith("apps/delta")) {
                    Applications apps = new Applications();
                    apps.setVersion(100l);
                    if (!sentDelta) {
                        addDeltaApps(includeRemote, apps);
                    }
                    apps.setAppsHashCode(getDeltaAppsHashCode(includeRemote));
                    sendOkResponseWithContent((Request) request, response, XmlXStream.getInstance().toXML(apps));
                    handled = true;
                    sentDelta = true;
                } else if(pathInfo.startsWith("apps")) {
                    Applications apps = new Applications();
                    apps.setVersion(100l);
                    for (Application application : applicationMap.values()) {
                        apps.addApplication(application);
                    }
                    if (includeRemote) {
                        for (Application application : remoteRegionApps.values()) {
                            apps.addApplication(application);
                        }
                    }

                    if (sentDelta) {
                        addDeltaApps(includeRemote, apps);
                    }
                    apps.setAppsHashCode(apps.getReconcileHashCode());
                    sendOkResponseWithContent((Request) request, response, XmlXStream.getInstance().toXML(apps));
                    handled = true;
                }
            }

            if(!handled) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND,
                                   "Request path: " + pathInfo + " not supported by eureka resource mock.");
            }
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;addDeltaApps(boolean,Applications);;;private void addDeltaApps(boolean includeRemote, Applications apps) {
            for (Application application : applicationDeltaMap.values()) {
                apps.addApplication(application);
            }
            if (includeRemote) {
                for (Application application : remoteRegionAppsDelta.values()) {
                    apps.addApplication(application);
                }
            }
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;getDeltaAppsHashCode(boolean);;;private String getDeltaAppsHashCode(boolean includeRemote) {
            Applications allApps = new Applications();
            for (Application application : applicationMap.values()) {
                allApps.addApplication(application);
            }

            if (includeRemote) {
                for (Application application : remoteRegionApps.values()) {
                    allApps.addApplication(application);
                }
            }
            addDeltaApps(includeRemote, allApps);
            return allApps.getReconcileHashCode();
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;isRemoteRequest(HttpServletRequest);;;private boolean isRemoteRequest(HttpServletRequest request) {
            String queryString = request.getQueryString();
            return queryString.contains("regions=");
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;sendOkResponseWithContent(Request,HttpServletResponse,String);;;private void sendOkResponseWithContent(Request request, HttpServletResponse response, String content)
                throws IOException {
            response.setContentType("application/xml");
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().println(content);
            response.getWriter().flush();
            request.setHandled(true);
            System.out.println("Eureka resource mock, sent response for request path: " + request.getPathInfo());
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;setUp();;;@Before
    public void setUp() throws Exception {
        ConfigurationManager.getConfigInstance().setProperty("eureka.client.refresh.interval", "10");
        ConfigurationManager.getConfigInstance().setProperty("eureka.registration.enabled", "false");
        ConfigurationManager.getConfigInstance().setProperty("eureka.fetchRemoteRegionsRegistry", REMOTE_REGION);
        ConfigurationManager.getConfigInstance().setProperty("eureka.myregion.availabilityZones", REMOTE_ZONE);
        ConfigurationManager.getConfigInstance().setProperty("eureka.serviceUrl.default",
                                                             "http://localhost:" + LOCAL_EUREKA_PORT +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
        populateLocalRegistryAtStartup();
        populateRemoteRegistryAtStartup();

        mockLocalEurekaServer = new MockRemoteEurekaServer(LOCAL_EUREKA_PORT, localRegionApps, localRegionAppsDelta,
                                                           remoteRegionApps, remoteRegionAppsDelta);
        mockLocalEurekaServer.start();

        InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder();
        builder.setIPAddr("10.10.101.00");
        builder.setHostName("Hosttt");
        builder.setAppName("EurekaTestApp-" + UUID.randomUUID());
        builder.setDataCenterInfo(new DataCenterInfo() {
            @Override
            public Name getName() {
                return Name.MyOwn;
            }
        });
        client = new DiscoveryClient(builder.build(), new DefaultEurekaClientConfig());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;tearDown();;;@After
    public void tearDown() throws Exception {
        client.shutdown();
        ConfigurationManager.getConfigInstance().clearProperty("eureka.client.refresh.interval");
        ConfigurationManager.getConfigInstance().clearProperty("eureka.registration.enabled");
        ConfigurationManager.getConfigInstance().clearProperty("eureka.fetchRemoteRegionsRegistry");
        ConfigurationManager.getConfigInstance().clearProperty("eureka.myregion.availabilityZones");
        ConfigurationManager.getConfigInstance().clearProperty("eureka.serviceUrl.default");
        mockLocalEurekaServer.stop();
        localRegionApps.clear();
        localRegionAppsDelta.clear();
        remoteRegionApps.clear();
        remoteRegionAppsDelta.clear();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;testGetByVipInLocalRegion();;;@Test
    public void testGetByVipInLocalRegion() throws Exception {
        List<InstanceInfo> instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false);
        Assert.assertEquals("Unexpected number of instances found for local region.", 1, instancesByVipAddress.size());
        InstanceInfo instance = instancesByVipAddress.iterator().next();
        Assert.assertEquals("Local instance not returned for local region vip address",
                            LOCAL_REGION_INSTANCE_1_HOSTNAME, instance.getHostName());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;testGetByVipInRemoteRegion();;;@Test
    public void testGetByVipInRemoteRegion() throws Exception {
        List<InstanceInfo> instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false, REMOTE_REGION);
        Assert.assertEquals("Unexpected number of instances found for remote region.", 1, instancesByVipAddress.size());
        InstanceInfo instance = instancesByVipAddress.iterator().next();
        Assert.assertEquals("Remote instance not returned for remote region vip address", REMOTE_REGION_INSTANCE_1_HOSTNAME, instance.getHostName());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;testDelta();;;@Test
    public void testDelta() throws Exception {
        waitForDeltaToBeRetrieved();

        checkInstancesFromARegion("local", LOCAL_REGION_INSTANCE_1_HOSTNAME,
                                  LOCAL_REGION_INSTANCE_2_HOSTNAME);
        checkInstancesFromARegion(REMOTE_REGION, REMOTE_REGION_INSTANCE_1_HOSTNAME,
                                  REMOTE_REGION_INSTANCE_2_HOSTNAME);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;checkInstancesFromARegion(String,String,String);;;private void checkInstancesFromARegion(String region, String instance1Hostname, String instance2Hostname) {
        List<InstanceInfo> instancesByVipAddress;
        if (region.equals("local")) {
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false);
        } else {
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false, region);
        }
        Assert.assertEquals("Unexpected number of instances found for " + region + " region.", 2,
                            instancesByVipAddress.size());
        InstanceInfo localInstance1 = null;
        InstanceInfo localInstance2 = null;
        for (InstanceInfo instance : instancesByVipAddress) {
            if (instance.getHostName().equals(instance1Hostname)) {
                localInstance1 = instance;
            } else if (instance.getHostName().equals(instance2Hostname)) {
                localInstance2 = instance;
            }
        }

        Assert.assertNotNull("Expected instance not returned for " + region + " region vip address", localInstance1);
        Assert.assertNotNull("Instance added as delta not returned for " + region + " region vip address", localInstance2);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;waitForDeltaToBeRetrieved();;;private void waitForDeltaToBeRetrieved() throws InterruptedException {
        int count = 0;
        while (count < 3 && !mockLocalEurekaServer.isSentDelta()) {
            System.out.println("Sleeping for 10 seconds to let the remote registry fetch delta. Attempt: " + count);
            Thread.sleep(10 * 1000);
            System.out.println("Done sleeping for 10 seconds to let the remote registry fetch delta");
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;populateRemoteRegistryAtStartup();;;private void populateRemoteRegistryAtStartup() {
        Application myapp = createRemoteApps();
        Application myappDelta = createRemoteAppsDelta();
        remoteRegionApps.put(REMOTE_REGION_APP_NAME, myapp);
        remoteRegionAppsDelta.put(REMOTE_REGION_APP_NAME, myappDelta);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createRemoteApps();;;private Application createRemoteApps() {
        Application myapp = new Application(REMOTE_REGION_APP_NAME);
        InstanceInfo instanceInfo = createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createRemoteAppsDelta();;;private Application createRemoteAppsDelta() {
        Application myapp = new Application(REMOTE_REGION_APP_NAME);
        InstanceInfo instanceInfo = createRemoteInstance(REMOTE_REGION_INSTANCE_2_HOSTNAME);
        instanceInfo.setActionType(InstanceInfo.ActionType.ADDED);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createRemoteInstance(String);;;private InstanceInfo createRemoteInstance(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = InstanceInfo.Builder.newBuilder();
        instanceBuilder.setAppName(REMOTE_REGION_APP_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP_ADDR);
        instanceBuilder.setHostName(instanceHostName);
        instanceBuilder.setIPAddr("10.10.101.1");
        AmazonInfo amazonInfo = getAmazonInfo(REMOTE_ZONE, instanceHostName);
        instanceBuilder.setDataCenterInfo(amazonInfo);
        instanceBuilder.setMetadata(amazonInfo.getMetadata());
        return instanceBuilder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;populateLocalRegistryAtStartup();;;private void populateLocalRegistryAtStartup() {
        Application myapp = createLocalApps();
        Application myappDelta = createLocalAppsDelta();
        localRegionApps.put(LOCAL_REGION_APP_NAME, myapp);
        localRegionAppsDelta.put(LOCAL_REGION_APP_NAME, myappDelta);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createLocalApps();;;private Application createLocalApps() {
        Application myapp = new Application(LOCAL_REGION_APP_NAME);
        InstanceInfo instanceInfo = createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createLocalAppsDelta();;;private Application createLocalAppsDelta() {
        Application myapp = new Application(LOCAL_REGION_APP_NAME);
        InstanceInfo instanceInfo = createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME);
        instanceInfo.setActionType(InstanceInfo.ActionType.ADDED);
        myapp.addInstance(instanceInfo);
        return myapp;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;createLocalInstance(String);;;private InstanceInfo createLocalInstance(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = InstanceInfo.Builder.newBuilder();
        instanceBuilder.setAppName(LOCAL_REGION_APP_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP_ADDR);
        instanceBuilder.setHostName(instanceHostName);
        instanceBuilder.setIPAddr("10.10.101.1");
        AmazonInfo amazonInfo = getAmazonInfo(null, instanceHostName);
        instanceBuilder.setDataCenterInfo(amazonInfo);
        instanceBuilder.setMetadata(amazonInfo.getMetadata());
        return instanceBuilder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientTest;getAmazonInfo(String,String);;;private AmazonInfo getAmazonInfo(@Nullable String availabilityZone, String instanceHostName) {
        AmazonInfo.Builder azBuilder = AmazonInfo.Builder.newBuilder();
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.availabilityZone, (null == availabilityZone) ? "us-east-1a" : availabilityZone);
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceId, instanceHostName);
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.amiId, "XXX");
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceType, "XXX");
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.localIpv4, "XXX");
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicIpv4, "XXX");
        azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicHostname, instanceHostName);
        return azBuilder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_b7e1825_f0dec22/rev_b7e1825-f0dec22;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;getPort();;;public int getPort() {
        return port;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig;getRegistryRefreshSingleVipAddress();;;@Override
    public String getRegistryRefreshSingleVipAddress() {
        return configInstance.getStringProperty(
                namespace + "registryRefreshSingleVipAddress", null).get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig;getRegistryRefreshSingleVipAddress();;;@Nullable
    String getRegistryRefreshSingleVipAddress();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;fetchRegistry(boolean);;;                logger.info("Single vip registry refresh property : {}", clientConfig.getRegistryRefreshSingleVipAddress());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester;setupDiscoveryClient();;;protected void setupDiscoveryClient() {
        InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder();
        builder.setIPAddr("10.10.101.00");
        builder.setHostName("Hosttt");
        builder.setAppName("EurekaTestApp-" + UUID.randomUUID());
        builder.setDataCenterInfo(new DataCenterInfo() {
            @Override
            public Name getName() {
                return Name.MyOwn;
            }
        });
        client = new DiscoveryClient(builder.build(), new DefaultEurekaClientConfig());

        ApplicationInfoManager.getInstance().initComponent(new MyDataCenterInstanceConfig());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;testCacheRefreshSingleAppForLocalRegion();;;@Test
    public void testCacheRefreshSingleAppForLocalRegion() throws Exception {
        final String propertyName = "eureka.registryRefreshSingleVipAddress";
        try {
            if (client != null) {
                client.shutdown();  // shutdown and restart the client to pick up the config
            }

            ConfigurationManager.getConfigInstance().setProperty(propertyName, ALL_REGIONS_VIP1_ADDR);
            setupDiscoveryClient();

            List<Application> registeredApps = client.getApplications().getRegisteredApplications();
            Assert.assertEquals(1, registeredApps.size());

            Application app = registeredApps.get(0);
            Assert.assertEquals(LOCAL_REGION_APP1_NAME, app.getName());

            List<InstanceInfo> instances = app.getInstances();
            Assert.assertEquals(1, instances.size());
        } finally {
            ConfigurationManager.getConfigInstance().clearProperty(propertyName);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);;;                } else if (pathInfo.startsWith("vips/")) {
                    String vipAddress = pathInfo.substring("vips/".length());
                    Applications apps = new Applications();
                    apps.setVersion(-1l);
                    for (Application application : applicationMap.values()) {
                        Application retApp = new Application(application.getName());
                        for (InstanceInfo instance : application.getInstances()) {
                            if (vipAddress.equals(instance.getVIPAddress())) {
                                retApp.addInstance(instance);
                            }
                        }

                        if (retApp.getInstances().size() > 0) {
                            apps.addApplication(retApp);
                        }
                    }

                    apps.setAppsHashCode(apps.getReconcileHashCode());
                    sendOkResponseWithContent((Request) request, response, apps);
                    handled = true;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter;logAuth(ServletRequest);        if ( EurekaServerConfigurationManager.getInstance().getConfiguration().shouldLogIdentityHeaders() ) {;;        if (EurekaServerConfigurationManager.getInstance().getConfiguration().shouldLogIdentityHeaders()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry;reconcileAndLogDifference(ClientResponse,Applications,String);            Applications delta, String reconcileHashCode) throws Throwable {;;                                                     Applications delta, String reconcileHashCode) throws Throwable {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaEnvironment();        .getString(EUREKA_DATACENTER);;;                .getString(EUREKA_DATACENTER);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;handleEIPBinding(PeerAwareInstanceRegistry);    throws InterruptedException {;;            throws InterruptedException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;handleEIPBinding(PeerAwareInstanceRegistry);         // Bind to EIP if needed;;        // Bind to EIP if needed
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;handleEIPBinding(PeerAwareInstanceRegistry);;;            } catch (Throwable e) {
                logger.error("Cannot bind to EIP", e);
                Thread.sleep(EIP_BIND_SLEEP_TIME_MS);
            }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;handleEIPBinding(PeerAwareInstanceRegistry);       // Schedule a timer which periodically checks for EIP binding.;;        // Schedule a timer which periodically checks for EIP binding.
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;scheduleEIPBindTask(EurekaServerConfig,PeerAwareInstanceRegistry);            @Override
            public void run() {
                try {
                    // If the EIP is not bound, the registry could  be stale
                    // First sync up the registry from the neighboring node before
                    // trying to bind the EIP
                    EIPManager eipManager = EIPManager.getInstance();
                    if (!eipManager.isEIPBound()) {
                        registry.clearRegistry();
                        int count = registry.syncUp();
                        registry.openForTraffic(count);
                    } else {
                        // An EIP is already bound
                        return;
                    }
                    eipManager.bindEIP();
                } catch (Throwable e) {
                    logger.error("Could not bind to EIP", e);
                }
            }
        }, eurekaServerConfig.getEIPBindingRetryIntervalMs(),
        eurekaServerConfig.getEIPBindingRetryIntervalMs());;;                           @Override
                           public void run() {
                               try {
                                   // If the EIP is not bound, the registry could  be stale
                                   // First sync up the registry from the neighboring node before
                                   // trying to bind the EIP
                                   EIPManager eipManager = EIPManager.getInstance();
                                   if (!eipManager.isEIPBound()) {
                                       registry.clearRegistry();
                                       int count = registry.syncUp();
                                       registry.openForTraffic(count);
                                   } else {
                                       // An EIP is already bound
                                       return;
                                   }
                                   eipManager.bindEIP();
                               } catch (Throwable e) {
                                   logger.error("Could not bind to EIP", e);
                               }
                           }
                       }, eurekaServerConfig.getEIPBindingRetryIntervalMs(),
                eurekaServerConfig.getEIPBindingRetryIntervalMs());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;register(InstanceInfo,int,boolean);                                                               .getLastDirtyTimestamp();;;                        .getLastDirtyTimestamp();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;register(InstanceInfo,int,boolean);                            + "the one that is being registered {}", existingLastDirtyTimestamp,;;                                    + "the one that is being registered {}", existingLastDirtyTimestamp,
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;register(InstanceInfo,int,boolean);                                                              + "(" + r.getId() + ")"));;;                        + "(" + r.getId() + ")"));
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;register(InstanceInfo,int,boolean);                        + "overrides", r.getOverriddenStatus(), r.getId());;;                                + "overrides", r.getOverriddenStatus(), r.getId());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;register(InstanceInfo,int,boolean);                         + r.getId());;;                    + r.getId());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;cancel(String,String,boolean);                            + appName + ":" + id);;;                        + appName + ":" + id);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;cancel(String,String,boolean);                             + id);;;                        + id);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;renew(String,String,boolean);                if(overriddenInstanceStatus == InstanceStatus.UNKNOWN) {;;                if (overriddenInstanceStatus == InstanceStatus.UNKNOWN) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;renew(String,String,boolean);                                     instanceInfo.getOverriddenStatus().name(),
                                     instanceInfo.getId()};;;                            instanceInfo.getOverriddenStatus().name(),
                            instanceInfo.getId()};
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;renew(String,String,boolean);                            + "Hence setting the status to overridden status", args);;;                                    + "Hence setting the status to overridden status", args);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;storeOverriddenStatusIfRequired(String,InstanceStatus);            || (!overriddenStatus.equals(instanceStatus))) {;;                || (!overriddenStatus.equals(instanceStatus))) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;deleteStatusOverride(String,String,InstanceStatus,String,boolean);                if(currentOverride != null && info != null) {;;                if (currentOverride != null && info != null) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationsFromMultipleRegions(String[]);                    Arrays.toString(remoteRegions));;;                Arrays.toString(remoteRegions));
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationsFromMultipleRegions(String[]);                                    + "whitelist and this app is not in the whitelist.", application.getName(),;;                                            + "whitelist and this app is not in the whitelist.", application.getName(),
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationDeltas();                         + this.recentlyChangedQueue.size());;;                    + this.recentlyChangedQueue.size());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationDeltas();                                 instanceInfo.getStatus().name(),
                                 instanceInfo.getActionType().name()};;;                        instanceInfo.getStatus().name(),
                        instanceInfo.getActionType().name()};
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getApplicationDeltasFromMultipleRegions(String[]);                                 instanceInfo.getStatus().name(),
                                 instanceInfo.getActionType().name()};;;                        instanceInfo.getStatus().name(),
                        instanceInfo.getActionType().name()};
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getInstanceByAppAndId(String,String,boolean);            && (!isLeaseExpirationEnabled() || !lease.isExpired())) {;;                && (!isLeaseExpirationEnabled() || !lease.isExpired())) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getInstanceByAppAndId(String,String,boolean);                if(application != null) {;;                if (application != null) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getInstancesById(String,boolean);                .entrySet().iterator(); iter.hasNext();) {;;                .entrySet().iterator(); iter.hasNext(); ) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getInstancesById(String,boolean);                    || (isLeaseExpirationEnabled() && lease.isExpired())) {;;                        || (isLeaseExpirationEnabled() && lease.isExpired())) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getInstancesById(String,boolean);                                                             .getRegisteredApplications()) {;;                        .getRegisteredApplications()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;decorateInstanceInfo(Lease<InstanceInfo>);                                   .setRegistrationTimestamp(lease.getRegistrationTimestamp())
                                   .setRenewalTimestamp(lease.getLastRenewalTimestamp())
                                   .setServiceUpTimestamp(lease.getServiceUpTimestamp())
                                   .setRenewalIntervalInSecs(renewalInterval)
                                   .setDurationInSecs(leaseDuration)
                                   .setEvictionTimestamp(lease.getEvictionTimestamp()).build());;;                .setRegistrationTimestamp(lease.getRegistrationTimestamp())
                .setRenewalTimestamp(lease.getLastRenewalTimestamp())
                .setServiceUpTimestamp(lease.getServiceUpTimestamp())
                .setRenewalIntervalInSecs(renewalInterval)
                .setDurationInSecs(leaseDuration)
                .setEvictionTimestamp(lease.getEvictionTimestamp()).build());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getOverriddenInstanceStatus(InstanceInfo,Lease<InstanceInfo>,boolean);            && (!InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {;;                && (!InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;getOverriddenInstanceStatus(InstanceInfo,Lease<InstanceInfo>,boolean);                && (InstanceStatus.OUT_OF_SERVICE.equals(existingStatus);;                    && (InstanceStatus.OUT_OF_SERVICE.equals(existingStatus)
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry;initRemoteRegionRegistry();                    Arrays.toString(allKnownRemoteRegions));;;                Arrays.toString(allKnownRemoteRegions));
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;scheduleRenewalThresholdUpdateTask();            @Override
            public void run() {
                updateRenewalThreshold();;;                           @Override
                           public void run() {
                               updateRenewalThreshold();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;scheduleRenewalThresholdUpdateTask();            };;                           }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;scheduleRenewalThresholdUpdateTask();        }, EUREKA_SERVER_CONFIG.getRenewalThresholdUpdateIntervalMs(),;;                       }, EUREKA_SERVER_CONFIG.getRenewalThresholdUpdateIntervalMs(),
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;setupPeerEurekaNodes();                @Override
                public void run() {
                    try {
                        updatePeerEurekaNodes();
                    } catch (Throwable e) {
                        logger.error("Cannot update the replica Nodes", e);
                    };;                                           @Override
                                           public void run() {
                                               try {
                                                   updatePeerEurekaNodes();
                                               } catch (Throwable e) {
                                                   logger.error("Cannot update the replica Nodes", e);
                                               }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;setupPeerEurekaNodes();                }
            }, EUREKA_SERVER_CONFIG.getPeerEurekaNodesUpdateIntervalMs(),;;                                           }
                                       }, EUREKA_SERVER_CONFIG.getPeerEurekaNodesUpdateIntervalMs(),
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;primeAwsReplicas();                                + "channels are open", peerHostName);;;                                        + "channels are open", peerHostName);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;shouldAllowAccess(boolean);                                               + EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())) {;;                    + EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;cancel(String,String,boolean);            final boolean isReplication) {;;                          final boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;renew(String,String,boolean);            final boolean isReplication) {;;                         final boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;statusUpdate(String,String,InstanceStatus,String,boolean);            final InstanceStatus newStatus, String lastDirtyTimestamp,
            final boolean isReplication) {;;                                final InstanceStatus newStatus, String lastDirtyTimestamp,
                                final boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;statusUpdate(String,ASGStatus,boolean);            final boolean isReplication) {;;                             final boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;getNextServerFromEureka(String,boolean);            boolean secure) {;;                                                boolean secure) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;updateRenewalThreshold();               if ((count * 2) > (EUREKA_SERVER_CONFIG;;                if ((count * 2) > (EUREKA_SERVER_CONFIG
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;isBelowRenewThresold();                        + (EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())))) {;;                + (EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())))) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;replicateToPeers(Action,String,String,InstanceInfo,InstanceStatus,boolean);            InstanceInfo info /* optional */,
            InstanceStatus newStatus /* optional */, boolean isReplication) {;;                                  InstanceInfo info /* optional */,
                                  InstanceStatus newStatus /* optional */, boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;replicateInstanceActionsToPeers(Action,String,String,InstanceInfo,InstanceStatus,PeerEurekaNode);            String id, InstanceInfo info, InstanceStatus newStatus,
            PeerEurekaNode node) {;;                                                 String id, InstanceInfo info, InstanceStatus newStatus,
                                                 PeerEurekaNode node) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;replicateInstanceActionsToPeers(Action,String,String,InstanceInfo,InstanceStatus,PeerEurekaNode);            case Cancel:
                node.cancel(appName, id);
                break;
            case Heartbeat:
                InstanceStatus overriddenStatus = overriddenInstanceStatusMap
                        .get(id);
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.heartbeat(appName, id, infoFromRegistry, overriddenStatus,
                        false);
                break;
            case Register:
                node.register(info);
                break;
            case StatusUpdate:
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.statusUpdate(appName, id, newStatus, infoFromRegistry);
                break;
            case DeleteStatusOverride:
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.deleteStatusOverride(appName, id, infoFromRegistry);
                break;;;                case Cancel:
                    node.cancel(appName, id);
                    break;
                case Heartbeat:
                    InstanceStatus overriddenStatus = overriddenInstanceStatusMap
                            .get(id);
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.heartbeat(appName, id, infoFromRegistry, overriddenStatus,
                            false);
                    break;
                case Register:
                    node.register(info);
                    break;
                case StatusUpdate:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.statusUpdate(appName, id, newStatus, infoFromRegistry);
                    break;
                case DeleteStatusOverride:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.deleteStatusOverride(appName, id, infoFromRegistry);
                    break;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry;replicateASGInfoToReplicaNodes(String,ASGStatus,PeerEurekaNode);            final ASGStatus newStatus, final PeerEurekaNode node) {;;                                                final ASGStatus newStatus, final PeerEurekaNode node) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/StatusFilter;doFilter(ServletRequest,ServletResponse,FilterChain);            FilterChain chain) throws IOException, ServletException {;;                         FilterChain chain) throws IOException, ServletException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/StatusFilter;doFilter(ServletRequest,ServletResponse,FilterChain);                    + status + " - try another DS node: ");;;                            + status + " - try another DS node: ");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;init();            .loadCascadedPropertiesFromResources(eurekaPropsFile);;;                    .loadCascadedPropertiesFromResources(eurekaPropsFile);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;init();                    + "specific properties or the configuration is installed with a different mechanism.",;;                            + "specific properties or the configuration is installed with a different mechanism.",
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getPeerEurekaNodesUpdateIntervalMs();        .getIntProperty(namespace + "peerEurekaNodesUpdateIntervalMs",
                (10 * 60 * 1000)).get();;;                .getIntProperty(namespace + "peerEurekaNodesUpdateIntervalMs",
                        (10 * 60 * 1000)).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getMaxIdleThreadInMinutesAgeForStatusReplication();        .getLongProperty(
                namespace + "maxIdleThreadAgeInMinutesForStatusReplication",
                10).get();;;                .getLongProperty(
                        namespace + "maxIdleThreadAgeInMinutesForStatusReplication",
                        10).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getRemoteRegionUrlsWithName();                             new String[]{propName, remoteRegionUrlWithNamePair, pairSplitChar});;;                        new String[]{propName, remoteRegionUrlWithNamePair, pairSplitChar});
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;PeerEurekaNode(String);                    if (serviceUrl.startsWith("https://") && 
                    		"true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
	                    jerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(jerseyClientName,
	                            config.getPeerNodeConnectTimeoutMs(),
	                            config.getPeerNodeReadTimeoutMs(),
	                            config.getPeerNodeTotalConnections(),
	                            config.getPeerNodeTotalConnectionsPerHost(),
	                            config.getPeerNodeConnectionIdleTimeoutSeconds());
                    }else{
	                    jerseyClient = EurekaJerseyClient.createJerseyClient(jerseyClientName,
	                            config.getPeerNodeConnectTimeoutMs(),
	                            config.getPeerNodeReadTimeoutMs(),
	                            config.getPeerNodeTotalConnections(),
	                            config.getPeerNodeTotalConnectionsPerHost(),
	                            config.getPeerNodeConnectionIdleTimeoutSeconds());;;                    if (serviceUrl.startsWith("https://") &&
                            "true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
                        jerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(jerseyClientName,
                                config.getPeerNodeConnectTimeoutMs(),
                                config.getPeerNodeReadTimeoutMs(),
                                config.getPeerNodeTotalConnections(),
                                config.getPeerNodeTotalConnectionsPerHost(),
                                config.getPeerNodeConnectionIdleTimeoutSeconds());
                    } else {
                        jerseyClient = EurekaJerseyClient.createJerseyClient(jerseyClientName,
                                config.getPeerNodeConnectTimeoutMs(),
                                config.getPeerNodeReadTimeoutMs(),
                                config.getPeerNodeTotalConnections(),
                                config.getPeerNodeTotalConnectionsPerHost(),
                                config.getPeerNodeConnectionIdleTimeoutSeconds());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;PeerEurekaNode(String);               ip = InetAddress.getLocalHost().getHostAddress();;;                ip = InetAddress.getLocalHost().getHostAddress();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;heartbeat(String,String,InstanceInfo,InstanceStatus,boolean);            final InstanceInfo info, final InstanceStatus overriddenStatus,
            boolean primeConnection) throws Throwable {;;                          final InstanceInfo info, final InstanceStatus overriddenStatus,
                          boolean primeConnection) throws Throwable {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;heartbeat(String,String,InstanceInfo,InstanceStatus,boolean);            public void handleFailure(int statusCode) throws Throwable  {
               super.handleFailure(statusCode);
               if (statusCode == 404) {
                   logger.warn(name + appName + "/" + id
                           + " : heartbeat: missing entry.");
                   if (info != null) {
                       logger.warn(
                               "Cannot find instance id {} and hence replicating the instance with status {}",
                               info.getId(), info.getStatus().toString());
                       register(info);
                   }
               } else if (config.shouldSyncWhenTimestampDiffers() && this.getPeerInstanceInfo() != null) {
                   syncInstancesIfTimestampDiffers(id, info, this.getPeerInstanceInfo());
               };;            public void handleFailure(int statusCode) throws Throwable {
                super.handleFailure(statusCode);
                if (statusCode == 404) {
                    logger.warn(name + appName + "/" + id
                            + " : heartbeat: missing entry.");
                    if (info != null) {
                        logger.warn(
                                "Cannot find instance id {} and hence replicating the instance with status {}",
                                info.getId(), info.getStatus().toString());
                        register(info);
                    }
                } else if (config.shouldSyncWhenTimestampDiffers() && this.getPeerInstanceInfo() != null) {
                    syncInstancesIfTimestampDiffers(id, info, this.getPeerInstanceInfo());
                }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;statusUpdate(String,String,InstanceStatus,InstanceInfo);            final InstanceStatus newStatus, final InstanceInfo info) {;;                             final InstanceStatus newStatus, final InstanceInfo info) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;statusUpdate(String,String,InstanceStatus,InstanceInfo);                   return response.getStatus();;;                    return response.getStatus();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;sendHeartBeat(String,String,InstanceInfo,InstanceStatus,ReplicationTask);            final InstanceInfo info, final InstanceStatus overriddenStatus, ReplicationTask task);;                              final InstanceInfo info, final InstanceStatus overriddenStatus, ReplicationTask task)
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;sendHeartBeat(String,String,InstanceInfo,InstanceStatus,ReplicationTask);                .queryParam("lastDirtyTimestamp",;;                    .queryParam("lastDirtyTimestamp",
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;sendHeartBeat(String,String,InstanceInfo,InstanceStatus,ReplicationTask);            if ((response.getStatus() == Status.OK.getStatusCode())  && response.hasEntity()) {;;            if ((response.getStatus() == Status.OK.getStatusCode()) && response.hasEntity()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;syncInstancesIfTimestampDiffers(String,InstanceInfo,InstanceInfo);           ) {;;    ) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;syncInstancesIfTimestampDiffers(String,InstanceInfo,InstanceInfo);                if (infoFromPeer != null) {
                    Object[] args = {id, info.getLastDirtyTimestamp(), infoFromPeer.getLastDirtyTimestamp()};;;            if (infoFromPeer != null) {
                Object[] args = {id, info.getLastDirtyTimestamp(), infoFromPeer.getLastDirtyTimestamp()};
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;syncInstancesIfTimestampDiffers(String,InstanceInfo,InstanceInfo);;;                logger.warn(
                        "Peer wants us to take the instance information from it, since the timestamp differs,"
                                + "Id : {} My Timestamp : {}, Peer's timestamp: {}", args);
                if ((infoFromPeer.getOverriddenStatus() != null)
                        && !(InstanceStatus.UNKNOWN.equals(infoFromPeer
                        .getOverriddenStatus()))) {
                    Object[] args1 = {id, info.getOverriddenStatus(), infoFromPeer.getOverriddenStatus()};
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;syncInstancesIfTimestampDiffers(String,InstanceInfo,InstanceInfo);                        PeerAwareInstanceRegistry.getInstance()
                                .storeOverriddenStatusIfRequired(id,
                                        infoFromPeer.getOverriddenStatus());
                    }
                    PeerAwareInstanceRegistry.getInstance().register(
                            infoFromPeer, true);;;                    PeerAwareInstanceRegistry.getInstance()
                            .storeOverriddenStatusIfRequired(id,
                                    infoFromPeer.getOverriddenStatus());
                }
                PeerAwareInstanceRegistry.getInstance().register(
                        infoFromPeer, true);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;syncInstancesIfTimestampDiffers(String,InstanceInfo,InstanceInfo);                };;            }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;getBatcher(String,String);                 250);;;                250);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;getBatcher(String,String);            private String BATCH_URL_PATH = "peerreplication/batch/";;;;                    private String BATCH_URL_PATH = "peerreplication/batch/";
                    ;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;getBatcher(String,String);;;                        Action action = list.getList().get(0).action;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;getBatcher(String,String);;;                            } catch (Throwable e) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode;isSuccess(int);                &&  statusCode < 300;;;                && statusCode < 300;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;isEIPBound();        .get(MetaDataKey.instanceId);;;                .get(MetaDataKey.instanceId);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;isEIPBound();        .get(MetaDataKey.availabilityZone);;;                .get(MetaDataKey.availabilityZone);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;isEIPBound();        .get(MetaDataKey.publicIpv4);;;                .get(MetaDataKey.publicIpv4);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;bindEIP();                                + "skipping this", eipEntry, associatedInstanceId);;;                                        + "skipping this", eipEntry, associatedInstanceId);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;bindEIP();                            + publicIp);;;                        + publicIp);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;unbindEIP();            .get(MetaDataKey.publicIpv4);;;                    .get(MetaDataKey.publicIpv4);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;unbindEIP();                .withPublicIps(myPublicIP);;;                        .withPublicIps(myPublicIP);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;unbindEIP();                .describeAddresses(describeAddressRequest);;;                        .describeAddresses(describeAddressRequest);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;getCandidateEIPs(String,String);                    + myZone);;;                            + myZone);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;getEIPsForZoneFromConfig(String);        .getEurekaClientConfig().getEurekaServerServiceUrls(myZone);;;                .getEurekaClientConfig().getEurekaServerServiceUrls(myZone);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;getEIPsForZoneFromDNS(String);        .getEurekaClient().getServiceUrlsFromDNS(myZone, true);;;                .getEurekaClient().getServiceUrlsFromDNS(myZone, true);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;getEC2Service();        .getConfiguration();;;                .getConfiguration();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager;getEC2Service();        .getRegion();;;                .getRegion();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil;getASGNames();        .getApplications(false);;;                .getApplications(false);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource;getStatusInfo();        .getAppName();;;                .getAppName();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource;isReplicaAvailable(String,String);            .getApplication(myAppName, false);;;                    .getApplication(myAppName, false);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;renewLease(String,String,String,String);                        .getConfiguration().shouldSyncWhenTimestampDiffers()) {;;                .getConfiguration().shouldSyncWhenTimestampDiffers()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;statusUpdate(String,String,String);            if(registry.getInstanceByAppAndId(app.getName(), id) == null) {;;            if (registry.getInstanceByAppAndId(app.getName(), id) == null) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;deleteStatusUpdate(String,String,String);            if(registry.getInstanceByAppAndId(app.getName(), id) == null) {;;            if (registry.getInstanceByAppAndId(app.getName(), id) == null) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;validateDirtyTimestamp(Long,boolean);            boolean isReplication) {;;                                            boolean isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;validateDirtyTimestamp(Long,boolean);                            .getLastDirtyTimestamp()))) {;;                    .getLastDirtyTimestamp()))) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;statusUpdate(String,String,String);            @QueryParam("value") String newStatus,
            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {;;                                 @QueryParam("value") String newStatus,
                                 @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/InstancesResource;getById(String,String);            @PathParam("id") String id) {;;                            @PathParam("id") String id) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource;getApplication(String,String);            @HeaderParam("Accept") final String acceptHeader) {;;                                   @HeaderParam("Accept") final String acceptHeader) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource;addInstance(InstanceInfo,String);    @Consumes({ "application/json", "application/xml" });;    @Consumes({"application/json", "application/xml"})
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource;addInstance(InstanceInfo,String);            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {;;                            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                                .getLastDirtyTimestamp().toString());;;                        .getLastDirtyTimestamp().toString());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                        .setResponseEntity((InstanceInfo) response
                                .getEntity());;;                                .setResponseEntity((InstanceInfo) response
                                        .getEntity());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                    .setStatusCode(Status.OK.getStatusCode());;;                            .setStatusCode(Status.OK.getStatusCode());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                            .toString());;;                                    .toString());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                    .setStatusCode(response.getStatus());;;                            .setStatusCode(response.getStatus());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                    .setStatusCode(response.getStatus());;;                            .setStatusCode(response.getStatus());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;batchReplication(PeerEurekaNode.ReplicationList);                    .setStatusCode(response.getStatus());;;                            .setStatusCode(response.getStatus());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest;testRemoteRegionUrlsWithName2Regions();                                                                                                + ';' + region1url
                                                                                                + ',' + region2
                                                                                                + ';' + region2url);;;                + ';' + region1url
                + ',' + region2
                + ';' + region2url);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest;testRemoteRegionUrlsWithName2Regions();        Map<String,String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();;;        Map<String, String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest;testRemoteRegionUrlsWithName1Region();                                                                                                + ';' + region1url);;;                + ';' + region1url);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest;testRemoteRegionUrlsWithName1Region();        Map<String,String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();;;        Map<String, String> remoteRegionUrlsWithName = config.getRemoteRegionUrlsWithName();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/AbstractTester;setUp();                                                             "5");;;                "5");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/AbstractTester;setUp();                                                             REMOTE_REGION_NAME + ";http://localhost:"
                                                             + REMOTE_REGION_PORT + '/' +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                REMOTE_REGION_NAME + ";http://localhost:"
                        + REMOTE_REGION_PORT + '/' +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/AbstractTester;setUp();                                                             "http://localhost:" + mockRemoteEurekaServer.getPort() +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                "http://localhost:" + mockRemoteEurekaServer.getPort() +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;stringifyAppMap(Map<String,Application>);                                                 entry.getValue().getInstances().size());;;                    entry.getValue().getInstances().size());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);                                   "Request path: " + pathInfo + " not supported by eureka resource mock.");;;                        "Request path: " + pathInfo + " not supported by eureka resource mock.");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer;sendOkResponseWithContent(Request,HttpServletResponse,String);                               " with content" + content);;;                    " with content" + content);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;read(InputStream);                while(line != null) {  // need to read all the buffer for a clean connection close;;                while (line != null) {  // need to read all the buffer for a clean connection close
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;autoBuild(String);                        if (uc.getResponseCode() != HttpURLConnection.HTTP_OK ) {  // need to read the error for clean connection close;;                        if (uc.getResponseCode() != HttpURLConnection.HTTP_OK) {  // need to read the error for clean connection close
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;autoBuild(String);                                while(br.readLine() != null) {;;                                while (br.readLine() != null) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;initProperties(String);            .getInstance().getBooleanProperty(
                    namespace + "logAmazonMetadataErrors", false);;;                        .getInstance().getBooleanProperty(
                                namespace + "logAmazonMetadataErrors", false);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;initProperties(String);            .getInstance().getIntProperty(
                    namespace + "mt.read_timeout", 8000);;;                        .getInstance().getIntProperty(
                                namespace + "mt.read_timeout", 8000);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;initProperties(String);            .getInstance().getIntProperty(
                    namespace + "mt.connect_timeout", 3000);;;                        .getInstance().getIntProperty(
                                namespace + "mt.connect_timeout", 3000);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo;initProperties(String);            .getInstance().getIntProperty(namespace + "mt.num_retries",
                    3);;;                        .getInstance().getIntProperty(namespace + "mt.num_retries",
                                3);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/CloudInstanceConfig;initDataCenterInfo();                        + "register. \nSet the property " + namespace + "validateInstanceId to false to ignore the"
                        + "metadata call");;;                                + "register. \nSet the property " + namespace + "validateInstanceId to false to ignore the"
                                + "metadata call");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/CloudInstanceConfig;refreshAmazonInfo();                AmazonInfo newInfo = AmazonInfo.Builder.newBuilder()
                .autoBuild(namespace);
                String newHostname = newInfo.get(MetaDataKey.publicHostname);
                String existingHostname = ((AmazonInfo) info)
                .get(MetaDataKey.publicHostname);
                if (newHostname != null
                        && !newHostname.equals(existingHostname)) {
                    // public dns has changed on us, re-sync it
                    logger.warn("The public hostname changed from : "
                            + existingHostname + " => " + newHostname);
                    this.info = newInfo;
                }
       } catch (Throwable t) {;;            AmazonInfo newInfo = AmazonInfo.Builder.newBuilder()
                    .autoBuild(namespace);
            String newHostname = newInfo.get(MetaDataKey.publicHostname);
            String existingHostname = ((AmazonInfo) info)
                    .get(MetaDataKey.publicHostname);
            if (newHostname != null
                    && !newHostname.equals(existingHostname)) {
                // public dns has changed on us, re-sync it
                logger.warn("The public hostname changed from : "
                        + existingHostname + " => " + newHostname);
                this.info = newInfo;
            }
        } catch (Throwable t) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;isInstanceEnabledOnit();                                           super.isInstanceEnabledOnit()).get();;;                super.isInstanceEnabledOnit()).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getSecurePort();        .get();;;                .get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getSecurePortEnabled();                                           super.getSecurePortEnabled()).get();;;                super.getSecurePortEnabled()).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getASGName();        .get();;;                .get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getMetadataMap();        .getBackingConfigurationSource();;;                .getBackingConfigurationSource();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getMetadataMap();        iter.hasNext();) {;;             iter.hasNext(); ) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getStatusPageUrlPath();                return INSTANCE.getStringProperty(namespace + "statusPageUrlPath",
                        DEFAULT_STATUSPAGE_URLPATH).get();;;        return INSTANCE.getStringProperty(namespace + "statusPageUrlPath",
                DEFAULT_STATUSPAGE_URLPATH).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getStatusPageUrl();       return INSTANCE.getStringProperty(namespace + "statusPageUrl", null)
        .get();;;        return INSTANCE.getStringProperty(namespace + "statusPageUrl", null)
                .get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getHomePageUrlPath();            DEFAULT_HOMEPAGE_URLPATH).get();;;                DEFAULT_HOMEPAGE_URLPATH).get();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getHealthCheckUrl();        .get();
     };;                .get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;getSecureHealthCheckUrl();     };;    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;init(String);                                                                               UNKNOWN_APPLICATION);;;                UNKNOWN_APPLICATION);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig;init(String);                    + "specific properties or the configuration is installed with a different mechanism.",;;                            + "specific properties or the configuration is installed with a different mechanism.",
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();            .newBuilder()
            .setRenewalIntervalInSecs(
                    config.getLeaseRenewalIntervalInSeconds());;                    .newBuilder()
                    .setRenewalIntervalInSecs(
                            config.getLeaseRenewalIntervalInSeconds())
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();    ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();    ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();                .setAppName(config.getAppname())
                .setAppGroupName(config.getAppGroupName())
                .setDataCenterInfo(config.getDataCenterInfo())
                .setIPAddr(config.getIpAddress())
                .setHostName(config.getHostName(false))
                .setPort(config.getNonSecurePort())
                .enablePort(PortType.UNSECURE,
                        config.isNonSecurePortEnabled())
                .setSecurePort(config.getSecurePort())
                .enablePort(PortType.SECURE, config.getSecurePortEnabled())
                .setVIPAddress(config.getVirtualHostName())
                .setSecureVIPAddress(config.getSecureVirtualHostName())
                .setHomePageUrl(config.getHomePageUrlPath(),
                                config.getHomePageUrl())
                .setStatusPageUrl(config.getStatusPageUrlPath(),
                                  config.getStatusPageUrl())
                .setHealthCheckUrls(config.getHealthCheckUrlPath(),
                                    config.getHealthCheckUrl(),
                                    config.getSecureHealthCheckUrl())
                .setASGName(config.getASGName());
    ;;                    .setAppName(config.getAppname())
                    .setAppGroupName(config.getAppGroupName())
                    .setDataCenterInfo(config.getDataCenterInfo())
                    .setIPAddr(config.getIpAddress())
                    .setHostName(config.getHostName(false))
                    .setPort(config.getNonSecurePort())
                    .enablePort(PortType.UNSECURE,
                            config.isNonSecurePortEnabled())
                    .setSecurePort(config.getSecurePort())
                    .enablePort(PortType.SECURE, config.getSecurePortEnabled())
                    .setVIPAddress(config.getVirtualHostName())
                    .setSecureVIPAddress(config.getSecureVirtualHostName())
                    .setHomePageUrl(config.getHomePageUrlPath(),
                            config.getHomePageUrl())
                    .setStatusPageUrl(config.getStatusPageUrlPath(),
                            config.getStatusPageUrl())
                    .setHealthCheckUrls(config.getHealthCheckUrlPath(),
                            config.getHealthCheckUrl(),
                            config.getSecureHealthCheckUrl())
                    .setASGName(config.getASGName());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();    ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider;get();    ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver;EurekaUpStatusResolver(EurekaClient,EventBus);        this.client   = client;;;        this.client = client;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver;init();            ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryManager;initComponent(EurekaInstanceConfig,EurekaClientConfig);            EurekaClientConfig eurekaConfig) {;;                              EurekaClientConfig eurekaConfig) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig;init();                    + "specific properties or the configuration is installed with a different mechanism.",;;                            + "specific properties or the configuration is installed with a different mechanism.",
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig;getInitialInstanceInfoReplicationIntervalSeconds();	public int getInitialInstanceInfoReplicationIntervalSeconds() {;;    public int getInitialInstanceInfoReplicationIntervalSeconds() {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig;getInitialInstanceInfoReplicationIntervalSeconds();	};;    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/AbstractAzToRegionMapper;setRegionsToFetch(String[]);                    || (availabilityZones.size() == 1 && availabilityZones.iterator().next().equals(DEFAULT_ZONE))
                    || availabilityZones.isEmpty()) {;;                        || (availabilityZones.size() == 1 && availabilityZones.iterator().next().equals(DEFAULT_ZONE))
                        || availabilityZones.isEmpty()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;makeRemoteCall(Action);        if(isQueryAction(action)) {;;        if (isQueryAction(action)) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;makeRemoteCallWithFollowRedirect(Action,String);                    if(isQueryAction(action)) {;;                    if (isQueryAction(action)) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;getZone(InstanceInfo);        String[] availZones = clientConfig.getAvailabilityZones(clientConfig .getRegion());;;        String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/Application;shuffleAndStoreInstances(Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);                                  instanceRegionChecker);;;                instanceRegionChecker);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/Application;_shuffleAndStoreInstances(boolean,boolean,Map<String,Applications>,EurekaClientConfig,InstanceRegionChecker);                           && null != remoteRegionsRegistry) {;;                        && null != remoteRegionsRegistry) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;getInstancesByVirtualHostName(String);	AtomicReference<List<InstanceInfo>> ref = this.shuffleVirtualHostNameMap
		.get(virtualHostName.toUpperCase(Locale.ROOT));;;        AtomicReference<List<InstanceInfo>> ref = this.shuffleVirtualHostNameMap
                .get(virtualHostName.toUpperCase(Locale.ROOT));
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/Applications;addInstanceToMap(InstanceInfo,String,Map<String,AbstractQueue<InstanceInfo>>);            Map<String, AbstractQueue<InstanceInfo>> vipMap) {;;                                  Map<String, AbstractQueue<InstanceInfo>> vipMap) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/NamedConnectionPool;getConnectionCount();@Monitor(name="connectionCount", type=DataSourceType.GAUGE);;@Monitor(name = "connectionCount", type = DataSourceType.GAUGE)
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createJerseyClient(String,int,int,int,int,int);                                                                               maxTotalConnections);;;                    maxTotalConnections);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createJerseyClient(String,int,int,int,int,int);                                    connectionIdleTimeout, jerseyClientConfig);;;                    connectionIdleTimeout, jerseyClientConfig);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createProxyJerseyClient(String,int,int,int,int,int,String,String,String,String);            int readTimeout, int maxConnectionsPerHost, int maxTotalConnections, int connectionIdleTimeout, 
            String proxyHost, String proxyPort, String proxyUserName, String proxyPassword) {
      Preconditions.checkNotNull(clientName, "Client name can not be null.");
      try {
          ClientConfig jerseyClientConfig = new ProxyCustomApacheHttpClientConfig(clientName, maxConnectionsPerHost,
                  maxTotalConnections, proxyHost, proxyPort, proxyUserName, proxyPassword);
          
          return new JerseyClient(connectionTimeout, readTimeout, 
                                  connectionIdleTimeout, jerseyClientConfig);
      } catch (Throwable e) {
          throw new RuntimeException("Cannot create Jersey client ", e);
      };;                                                       int readTimeout, int maxConnectionsPerHost, int maxTotalConnections, int connectionIdleTimeout,
                                                       String proxyHost, String proxyPort, String proxyUserName, String proxyPassword) {
        Preconditions.checkNotNull(clientName, "Client name can not be null.");
        try {
            ClientConfig jerseyClientConfig = new ProxyCustomApacheHttpClientConfig(clientName, maxConnectionsPerHost,
                    maxTotalConnections, proxyHost, proxyPort, proxyUserName, proxyPassword);

            return new JerseyClient(connectionTimeout, readTimeout,
                    connectionIdleTimeout, jerseyClientConfig);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot create Jersey client ", e);
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createSSLJerseyClient(String,int,int,int,int,int,String,String);                                    connectionIdleTimeout, jerseyClientConfig);;;                    connectionIdleTimeout, jerseyClientConfig);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createSystemSSLJerseyClient(String,int,int,int,int,int);    		int readTimeout, int maxConnectionsPerHost,
    		int maxTotalConnections, int connectionIdleTimeout) {
    	Preconditions.checkNotNull(clientName, "Client name can not be null.");	
     	try {
    		ClientConfig jerseyClientConfig = new SystemSSLCustomApacheHttpClientConfig(
    				clientName, maxConnectionsPerHost, maxTotalConnections);
    		
    		return new JerseyClient(connectionTimeout, readTimeout,
    				connectionIdleTimeout, jerseyClientConfig);
    	} catch (Throwable e) {
    		throw new RuntimeException("Cannot create System SSL Jersey client ", e);
    	};;                                                           int readTimeout, int maxConnectionsPerHost,
                                                           int maxTotalConnections, int connectionIdleTimeout) {
        Preconditions.checkNotNull(clientName, "Client name can not be null.");
        try {
            ClientConfig jerseyClientConfig = new SystemSSLCustomApacheHttpClientConfig(
                    clientName, maxConnectionsPerHost, maxTotalConnections);

            return new JerseyClient(connectionTimeout, readTimeout,
                    connectionIdleTimeout, jerseyClientConfig);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot create System SSL Jersey client ", e);
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;ProxyCustomApacheHttpClientConfig(String,int,int,String,String,String,String);              String proxyHost, String proxyPort, String proxyUserName, String proxyPassword)
          throws Throwable {
        MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName);
        cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
        cm.setMaxTotal(maxTotalConnections);
        getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);
          // To pin a client to specific server in case redirect happens, we handle redirects directly
          // (see DiscoveryClient.makeRemoteCall methods).
        getProperties().put(PROPERTY_FOLLOW_REDIRECTS, Boolean.FALSE);
          getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);;;                                                 String proxyHost, String proxyPort, String proxyUserName, String proxyPassword)
                throws Throwable {
            MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName);
            cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
            cm.setMaxTotal(maxTotalConnections);
            getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);
            // To pin a client to specific server in case redirect happens, we handle redirects directly
            // (see DiscoveryClient.makeRemoteCall methods).
            getProperties().put(PROPERTY_FOLLOW_REDIRECTS, Boolean.FALSE);
            getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;SSLCustomApacheHttpClientConfig(String,int,int,String,String);            .getInstance(TrustManagerFactory.getDefaultAlgorithm());;;                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;SSLCustomApacheHttpClientConfig(String,int,int,String,String);                .setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);;;                        .setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;createTrustManagers(KeyStore);                                                                  .getDefaultAlgorithm());;;                        .getDefaultAlgorithm());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;SystemSSLCustomApacheHttpClientConfig(String,int,int);    			int maxTotalConnections) throws Throwable {
    		
    		SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSystemSocketFactory();
    		SchemeRegistry sslSchemeRegistry = new SchemeRegistry();
    		sslSchemeRegistry.register(new Scheme(PROTOCOL, HTTPS_PORT, sslSocketFactory));
    		
    		MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName, sslSchemeRegistry);
    		cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
    		cm.setMaxTotal(maxTotalConnections);
    		getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);;;                                                     int maxTotalConnections) throws Throwable {

            SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSystemSocketFactory();
            SchemeRegistry sslSchemeRegistry = new SchemeRegistry();
            sslSchemeRegistry.register(new Scheme(PROTOCOL, HTTPS_PORT, sslSocketFactory));

            MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName, sslSchemeRegistry);
            cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
            cm.setMaxTotal(maxTotalConnections);
            getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;SystemSSLCustomApacheHttpClientConfig(String,int,int);    		getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
    	};;            getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient;run();                    .getClientHandler()
                    .getHttpClient()
                    .getConnectionManager()
                    .closeIdleConnections(connectionIdleTimeout, TimeUnit.SECONDS);;;                            .getClientHandler()
                            .getHttpClient()
                            .getConnectionManager()
                            .closeIdleConnections(connectionIdleTimeout, TimeUnit.SECONDS);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/EntityBodyConverter;read(InputStream,Class,MediaType);    throws IOException {;;            throws IOException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/EntityBodyConverter;write(Object,OutputStream,MediaType);    throws IOException {;;            throws IOException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                    "com.netflix.appinfo.AmazonInfo");;;                            "com.netflix.appinfo.AmazonInfo");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                    "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo");;;                            "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                    "java.util.Collections$EmptyMap");;;                            "java.util.Collections$EmptyMap");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                    "java.util.Collections$EmptyMap");;;                            "java.util.Collections$EmptyMap");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                        for(Map.Entry<String, String> entry: metadataMap.entrySet()) {;;                        for (Map.Entry<String, String> entry : metadataMap.entrySet()) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                MarshallingContext context) {;;                            MarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;marshal(Object,HierarchicalStreamWriter,MarshallingContext);                    .iterator(); iter.hasNext();) {;;                    .iterator(); iter.hasNext(); ) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;unmarshal(HierarchicalStreamReader,UnmarshallingContext);                UnmarshallingContext context) {;;                                UnmarshallingContext context) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;autoMarshalEligible(Object,HierarchicalStreamWriter);            HierarchicalStreamWriter writer) {;;                                            HierarchicalStreamWriter writer) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/converters/Converters;autoUnmarshalEligible(HierarchicalStreamReader,Object);            Object o) {;;                                              Object o) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;isReadable(Class,Type,Annotation[],MediaType);            Annotation[] annotations, MediaType mediaType) {;;                              Annotation[] annotations, MediaType mediaType) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;readFrom(Class,Type,Annotation[],MediaType,MultivaluedMap,InputStream);            Annotation[] annotations, MediaType mediaType,
            MultivaluedMap headers, InputStream inputStream)
    throws IOException, WebApplicationException {;;                           Annotation[] annotations, MediaType mediaType,
                           MultivaluedMap headers, InputStream inputStream)
            throws IOException, WebApplicationException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;readFrom(Class,Type,Annotation[],MediaType,MultivaluedMap,InputStream);        if(mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {;;        if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;readFrom(Class,Type,Annotation[],MediaType,MultivaluedMap,InputStream);            } catch(Error e) {;;            } catch (Error e) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;getSize(Object,Class,Type,Annotation[],MediaType);            Type type, Annotation[] annotations, MediaType mediaType) {;;                        Type type, Annotation[] annotations, MediaType mediaType) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;isWriteable(Class,Type,Annotation[],MediaType);            Annotation[] annotations, MediaType mediaType) {;;                               Annotation[] annotations, MediaType mediaType) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;writeTo(Object,Class,Type,Annotation[],MediaType,MultivaluedMap,OutputStream);            Type type, Annotation[] annotations, MediaType mediaType,
            MultivaluedMap headers, OutputStream outputStream)
    throws IOException, WebApplicationException {;;                        Type type, Annotation[] annotations, MediaType mediaType,
                        MultivaluedMap headers, OutputStream outputStream)
            throws IOException, WebApplicationException {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;writeTo(Object,Class,Type,Annotation[],MediaType,MultivaluedMap,OutputStream);        if(mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {;;        if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;checkForAnnotation(Class);            .getAnnotation(Serializer.class);;;                    .getAnnotation(Serializer.class);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider;getSerializer(Class);    private static ISerializer getSerializer(@SuppressWarnings("rawtypes")Class serializableClass) {;;    private static ISerializer getSerializer(@SuppressWarnings("rawtypes") Class serializableClass) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientDisableRegistryTest;setUp();                MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientDisableRegistryTest;testDisableFetchRegistry();                           mockLocalEurekaServer.isSentRegistry());;;                mockLocalEurekaServer.isSentRegistry());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;testEurekaClientPeriodicHeartbeat();            Thread.sleep(7*1000);;;            Thread.sleep(7 * 1000);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;testEurekaClientPeriodicCacheRefresh();            Thread.sleep(7*1000);;;            Thread.sleep(7 * 1000);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;testGetInvalidVIPForRemoteRegion();                                                                                   REMOTE_REGION);;;                REMOTE_REGION);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;testGetInvalidVIPForRemoteRegion();                            instancesByVipAddress.size());;;                instancesByVipAddress.size());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest;checkInstancesFromARegion(String,String,String);                            instancesByVipAddress.size());;;                instancesByVipAddress.size());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;setUp();                                                             "http://localhost:" + eurekaPort +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                "http://localhost:" + eurekaPort +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;setUp();        ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;Service(EurekaClient,Supplier<Boolean>,Supplier<Boolean>,EurekaUpStatusResolver);                @UpStatus   Supplier<Boolean> upStatusSupplier,;;                @UpStatus Supplier<Boolean> upStatusSupplier,
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;Service(EurekaClient,Supplier<Boolean>,Supplier<Boolean>,EurekaUpStatusResolver);                ) {;;        ) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;Service(EurekaClient,Supplier<Boolean>,Supplier<Boolean>,EurekaUpStatusResolver);            ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;assertState(boolean);            Assert.assertEquals(state, (boolean)upStatusSupplier.get());;;            Assert.assertEquals(state, (boolean) upStatusSupplier.get());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;testStatus();                    new AbstractModule() {
                        @Override
                        protected void configure() {
                            bind(EventBus.class).toInstance(eventBus);
                            bind(Service.class);
                            bind(InstanceInfo.class).toInstance(instanceInfo);
                        }
                    });;                        new AbstractModule() {
                            @Override
                            protected void configure() {
                                bind(EventBus.class).toInstance(eventBus);
                                bind(Service.class);
                                bind(InstanceInfo.class).toInstance(instanceInfo);
                            }
                        })
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;testStatus();        ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;testStatus();        ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest;testStatus();        ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest;setUp(boolean);                                                             "http://localhost:" + NOT_AVAILABLE_EUREKA_PORT /*Should always be unavailable*/
                                                             +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                "http://localhost:" + NOT_AVAILABLE_EUREKA_PORT /*Should always be unavailable*/
                        +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest;setUp(boolean);                                     new Provider<BackupRegistry>() {
                                         @Override
                                         public BackupRegistry get() {
                                             return backupRegistry;
                                         }
                                     });;;                new Provider<BackupRegistry>() {
                    @Override
                    public BackupRegistry get() {
                        return backupRegistry;
                    }
                });
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest;testRemoteEnabledButLocalOnlyQuried();            } else if(registeredApplication.getName().equals(REMOTE_REGION_APP_NAME)) {;;            } else if (registeredApplication.getName().equals(REMOTE_REGION_APP_NAME)) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;stop();        ;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;waitForDeltaToBeRetrieved(int);            Thread.sleep( 3 * refreshRate * 1000);;;            Thread.sleep(3 * refreshRate * 1000);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);                        System.out.println("Eureka port: " +  port + ". " + System.currentTimeMillis() +". Not including delta as it has already been sent.");;;                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() + ". Not including delta as it has already been sent.");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);                } else if(pathInfo.equals("apps/")) {;;                } else if (pathInfo.equals("apps/")) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() +". Not including delta apps in /apps response, as delta has not been sent.");;;                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() + ". Not including delta apps in /apps response, as delta has not been sent.");
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer;handle(String,HttpServletRequest,HttpServletResponse,int);            if(!handled) {;;            if (!handled) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest;shuffleVirtualHostNameMapLastInstanceTest();        DataCenterInfo myDCI = new DataCenterInfo(){
            public DataCenterInfo.Name getName(){return DataCenterInfo.Name.MyOwn;};;        DataCenterInfo myDCI = new DataCenterInfo() {
            public DataCenterInfo.Name getName() {
                return DataCenterInfo.Name.MyOwn;
            }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest;shuffleVirtualHostNameMapLastInstanceTest();                                                        .setAppName("test")
                                                        .setVIPAddress("test.testname:1")
                                                        .setDataCenterInfo(myDCI)
                                                        .setHostName("test.hostname").build();;;                .setAppName("test")
                .setVIPAddress("test.testname:1")
                .setDataCenterInfo(myDCI)
                .setHostName("test.hostname").build();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533;/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest;shuffleVirtualHostNameMapLastInstanceTest();                     application.getByInstanceId("test.hostname"));;;                application.getByInstanceId("test.hostname"));
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_9b180dc_1c2989d/rev_9b180dc-1c2989d;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;setEventBus(EventBus);;;public void setEventBus(EventBus eventBus) {
            this.eventBus = eventBus;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_9b180dc_1c2989d/rev_9b180dc-1c2989d;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;setHealthCheckCallbackProvider(Provider<HealthCheckCallback>);;;public void setHealthCheckCallbackProvider(Provider<HealthCheckCallback> healthCheckCallbackProvider) {
            this.healthCheckCallbackProvider = healthCheckCallbackProvider;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_9b180dc_1c2989d/rev_9b180dc-1c2989d;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;setHealthCheckHandlerProvider(Provider<HealthCheckHandler>);;;public void setHealthCheckHandlerProvider(Provider<HealthCheckHandler> healthCheckHandlerProvider) {
            this.healthCheckHandlerProvider = healthCheckHandlerProvider;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_b694d77_fcffccb/rev_b694d77-fcffccb;/eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry;RemoteRegionRegistry(String,URL);        this.fetchRegistryTimer = Monitors.newTimer(this.remoteRegionURL
                .toString() + "_" + "FetchRegistry");

        String jerseyClientName;;        this.fetchRegistryTimer = Monitors.newTimer(this.remoteRegionURL
                .toString() + "_" + "FetchRegistry");
        String jerseyClientName;;        this.fetchRegistryTimer = Monitors.newTimer(this.remoteRegionURL.toString() + "_FetchRegistry");

        EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                .withUserAgent("Java EurekaClient (remote region)")
                .withConnectionTimeout(EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs())
                .withReadTimeout(EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs())
                .withMaxConnectionsPerHost(EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost())
                .withMaxTotalConnections(EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections())
                .withConnectionIdleTimeout(EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_a995b04_c1c4cbe/rev_a995b04-c1c4cbe;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClientImpl;MyDefaultApacheHttpClient4Config();;MyDefaultApacheHttpClient4Config() {
                MonitoredConnectionManager cm;

                if (systemSSL) {
                    cm = createSystemSslCM();
                } else if (trustStoreFileName != null) {
                    cm = createCustomSslCM();
                } else {
                    cm = new MonitoredConnectionManager(clientName);
                }

                if (proxyHost != null) {
                    addProxyConfiguration(cm);
                }

                DiscoveryJerseyProvider discoveryJerseyProvider = new DiscoveryJerseyProvider(encoderWrapper, decoderWrapper);
                getSingletons().add(discoveryJerseyProvider);

                // Common properties to all clients
                cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
                cm.setMaxTotal(maxTotalConnections);
                getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);

                String fullUserAgentName = (userAgent == null ? clientName : userAgent) + "/v" + buildVersion();
                getProperties().put(CoreProtocolPNames.USER_AGENT, fullUserAgentName);

                // To pin a client to specific server in case redirect happens, we handle redirects directly
                // (see DiscoveryClient.makeRemoteCall methods).
                getProperties().put(PROPERTY_FOLLOW_REDIRECTS, Boolean.FALSE);
                getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);

            };MyDefaultApacheHttpClient4Config() {
                MonitoredConnectionManager cm;

                if (systemSSL) {
                    cm = createSystemSslCM();
                } else if (trustStoreFileName != null) {
                    cm = createCustomSslCM();
                } else {
                    cm = new MonitoredConnectionManager(clientName);
                }

                if (proxyHost != null) {
                    addProxyConfiguration(cm);
                }

                DiscoveryJerseyProvider discoveryJerseyProvider = new DiscoveryJerseyProvider(encoderWrapper, decoderWrapper);
                getSingletons().add(discoveryJerseyProvider);

                // Common properties to all clients
                cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
                cm.setMaxTotal(maxTotalConnections);
                getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);

                String fullUserAgentName = (userAgent == null ? clientName : userAgent) + "/v" + buildVersion();
                getProperties().put(CoreProtocolPNames.USER_AGENT, fullUserAgentName);

                // To pin a client to specific server in case redirect happens, we handle redirects directly
                // (see DiscoveryClient.makeRemoteCall methods).
                getProperties().put(PROPERTY_FOLLOW_REDIRECTS, Boolean.FALSE);
                getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
            }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter;ServerRequestAuthFilter(EurekaServerContext);;;@Inject
    public ServerRequestAuthFilter(EurekaServerContext server) {
        this.serverConfig = server.getServerConfig();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter;ServerRequestAuthFilter();;;public ServerRequestAuthFilter() {
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;contextInitialized(ServletContextEvent);;;            initEurekaServerContext();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaEnvironment();        String dataCenter = ConfigurationManager.getConfigInstance()
                .getString(EUREKA_DATACENTER);;;        String dataCenter = ConfigurationManager.getConfigInstance().getString(EUREKA_DATACENTER);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaEnvironment();            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_DATACENTER, DEFAULT);;;            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, DEFAULT);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaEnvironment();            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_DATACENTER, dataCenter);;;            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, dataCenter);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaEnvironment();            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_ENVIRONMENT, TEST);;;            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT, TEST);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;initEurekaServerContext();;;protected void initEurekaServerContext() throws Exception {
        EurekaServerConfig eurekaServerConfig = new DefaultEurekaServerConfig();

        // For backward compatibility
        JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);
        XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);

        EurekaInstanceConfig instanceConfig = isCloud(ConfigurationManager.getDeploymentContext())
                ? new CloudInstanceConfig()
                : new MyDataCenterInstanceConfig();

        logger.info("Initializing the eureka client...");
        ServerCodecs serverCodecs = new DefaultServerCodecs(eurekaServerConfig);

        ApplicationInfoManager applicationInfoManager = new ApplicationInfoManager(
                instanceConfig, new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get());

        EurekaClientConfig eurekaClientConfig = new DefaultEurekaClientConfig();
        EurekaClient eurekaClient = new DiscoveryClient(applicationInfoManager, eurekaClientConfig);

        PeerAwareInstanceRegistry registry;
        if (isAws(applicationInfoManager.getInfo())) {
            registry = new AwsInstanceRegistry(
                    eurekaServerConfig,
                    eurekaClientConfig,
                    serverCodecs,
                    eurekaClient
            );
            eipManager = new EIPManager(eurekaServerConfig, eurekaClientConfig, registry, applicationInfoManager);
            eipManager.start();
        } else {
            registry = new PeerAwareInstanceRegistryImpl(
                    eurekaServerConfig,
                    eurekaClientConfig,
                    serverCodecs,
                    eurekaClient
            );
        }

        PeerEurekaNodes peerEurekaNodes = new PeerEurekaNodes(
                registry,
                eurekaServerConfig,
                eurekaClientConfig,
                serverCodecs,
                applicationInfoManager
        );

        serverContext = new DefaultEurekaServerContext(
                eurekaServerConfig,
                serverCodecs,
                registry,
                peerEurekaNodes,
                applicationInfoManager
        );

        EurekaServerContextHolder.initialize(serverContext);

        serverContext.initialize();
        logger.info("Initialized server context");

        // Copy registry from neighboring eureka node
        int registryCount = registry.syncUp();
        registry.openForTraffic(applicationInfoManager, registryCount);

        // Register all monitoring statistics.
        EurekaMonitors.registerAllStats();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;destroyEurekaServerContext();;;protected void destroyEurekaServerContext() throws Exception {
        EurekaMonitors.shutdown();
        if (eipManager != null) {
            eipManager.shutdown();
        }
        if (serverContext != null) {
            serverContext.shutdown();
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;isAws(InstanceInfo);;;protected boolean isAws(InstanceInfo selfInstanceInfo) {
        boolean result = DataCenterInfo.Name.Amazon == selfInstanceInfo.getDataCenterInfo().getName();
        logger.info("isAws returned {}", result);
        return result;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap;isCloud(DeploymentContext);;;protected boolean isCloud(DeploymentContext deploymentContext) {
        logger.info("Deployment datacenter is {}", deploymentContext.getDeploymentDatacenter());
        return CLOUD.equals(deploymentContext.getDeploymentDatacenter());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;DefaultEurekaServerContext(EurekaServerConfig,ServerCodecs,PeerAwareInstanceRegistry,PeerEurekaNodes,ApplicationInfoManager);;;@Inject
    public DefaultEurekaServerContext(EurekaServerConfig serverConfig,
                               ServerCodecs serverCodecs,
                               PeerAwareInstanceRegistry registry,
                               PeerEurekaNodes peerEurekaNodes,
                               ApplicationInfoManager applicationInfoManager) {
        this.serverConfig = serverConfig;
        this.serverCodecs = serverCodecs;
        this.registry = registry;
        this.peerEurekaNodes = peerEurekaNodes;
        this.applicationInfoManager = applicationInfoManager;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;initialize();;;@PostConstruct
    @Override
    public void initialize() throws Exception {
        logger.info("Initializing ...");
        peerEurekaNodes.start();
        registry.init(peerEurekaNodes);
        logger.info("Initialized");
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;shutdown();;;@PreDestroy
    @Override
    public void shutdown() throws Exception {
        logger.info("Shutting down ...");
        registry.shutdown();
        peerEurekaNodes.shutdown();
        logger.info("Shut down");
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;getServerConfig();;;@Override
    public EurekaServerConfig getServerConfig() {
        return serverConfig;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;getPeerEurekaNodes();;;@Override
    public PeerEurekaNodes getPeerEurekaNodes() {
        return peerEurekaNodes;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;getServerCodecs();;;@Override
    public ServerCodecs getServerCodecs() {
        return serverCodecs;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;getRegistry();;;@Override
    public PeerAwareInstanceRegistry getRegistry() {
        return registry;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext;getApplicationInfoManager();;;@Override
    public ApplicationInfoManager getApplicationInfoManager() {
        return applicationInfoManager;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter;RateLimitingFilter(EurekaServerContext);;;@Inject
    public RateLimitingFilter(EurekaServerContext server) {
        this.serverConfig = server.getServerConfig();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter;RateLimitingFilter();;;public RateLimitingFilter() {
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter;init(FilterConfig);;;        if (serverConfig == null) {
            EurekaServerContext serverContext = (EurekaServerContext) filterConfig.getServletContext()
                    .getAttribute(EurekaServerContext.class.getName());
            serverConfig = serverContext.getServerConfig();
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;initialize();;;void initialize() throws Exception;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;shutdown();;;void shutdown() throws Exception;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;getServerConfig();;;EurekaServerConfig getServerConfig();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;getPeerEurekaNodes();;;PeerEurekaNodes getPeerEurekaNodes();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;getServerCodecs();;;ServerCodecs getServerCodecs();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;getRegistry();;;PeerAwareInstanceRegistry getRegistry();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContext;getApplicationInfoManager();;;ApplicationInfoManager getApplicationInfoManager();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig;getRegistrySyncRetryWaitMs();;;long getRegistrySyncRetryWaitMs();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContextHolder;EurekaServerContextHolder(EurekaServerContext);;;private EurekaServerContextHolder(EurekaServerContext serverContext) {
        this.serverContext = serverContext;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContextHolder;getServerContext();;;public EurekaServerContext getServerContext() {
        return this.serverContext;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContextHolder;initialize(EurekaServerContext);;;public static synchronized void initialize(EurekaServerContext serverContext) {
        holder = new EurekaServerContextHolder(serverContext);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerContextHolder;getInstance();;;public static EurekaServerContextHolder getInstance() {
        return holder;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/StatusFilter;doFilter(ServletRequest,ServletResponse,FilterChain);        if (status != InstanceStatus.UP
                && response instanceof HttpServletResponse) {;;        if (status != InstanceStatus.UP && response instanceof HttpServletResponse) {
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getRegistrySyncRetryWaitMs();;;@Override
    public long getRegistrySyncRetryWaitMs() {
        return configInstance.getIntProperty(
                namespace + "registrySyncRetryWaitMs", 30 * 1000).get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;RemoteRegionRegistry(EurekaServerConfig,ServerCodecs,String,URL);;;@Inject
    public RemoteRegionRegistry(EurekaServerConfig serverConfig, ServerCodecs serverCodecs, String regionName, URL remoteRegionURL) {
        this.serverConfig = serverConfig;
        this.remoteRegionURL = remoteRegionURL;
        this.fetchRegistryTimer = Monitors.newTimer(this.remoteRegionURL.toString() + "_FetchRegistry");

        EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                .withUserAgent("Java-EurekaClient-RemoteRegion")
                .withEncoderWrapper(serverCodecs.getFullJsonCodec())
                .withDecoderWrapper(serverCodecs.getFullJsonCodec())
                .withConnectionTimeout(serverConfig.getRemoteRegionConnectTimeoutMs())
                .withReadTimeout(serverConfig.getRemoteRegionReadTimeoutMs())
                .withMaxConnectionsPerHost(serverConfig.getRemoteRegionTotalConnectionsPerHost())
                .withMaxTotalConnections(serverConfig.getRemoteRegionTotalConnections())
                .withConnectionIdleTimeout(serverConfig.getRemoteRegionConnectionIdleTimeoutSeconds());

        if (remoteRegionURL.getProtocol().equals("http")) {
            clientBuilder.withClientName("Discovery-RemoteRegionClient-" + regionName);
        } else if ("true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
            clientBuilder.withClientName("Discovery-RemoteRegionSystemSecureClient-" + regionName)
                    .withSystemSSLConfiguration();
        } else {
            clientBuilder.withClientName("Discovery-RemoteRegionSecureClient-" + regionName)
                    .withTrustStoreFile(
                            serverConfig.getRemoteRegionTrustStore(),
                            serverConfig.getRemoteRegionTrustStorePassword()
                    );
        }
        discoveryJerseyClient = clientBuilder.build();
        discoveryApacheClient = discoveryJerseyClient.getClient();

        // should we enable GZip decoding of responses based on Response Headers?
        if (serverConfig.shouldGZipContentFromRemoteRegion()) {
            // compressed only if there exists a 'Content-Encoding' header whose value is "gzip"
            discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false));
        }

        String ip = null;
        try {
            ip = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            logger.warn("Cannot find localhost ip", e);
        }
        EurekaServerIdentity identity = new EurekaServerIdentity(ip);
        discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));

        applications.set(new Applications());
        try {
            if (fetchRegistry()) {
                this.readyForServingData = true;
            } else {
                logger.warn("Failed to fetch remote registry. This means this eureka server is not ready for serving "
                        + "traffic.");
            }
        } catch (Throwable e) {
            logger.error("Problem fetching registry information :", e);
        }

        // remote region fetch
        Runnable remoteRegionFetchTask = new Runnable() {
            @Override
            public void run() {
                try {
                    if (fetchRegistry()) {
                        readyForServingData = true;
                    } else {
                        logger.warn("Failed to fetch remote registry. This means this eureka server is not "
                                + "ready for serving traffic.");
                    }
                } catch (Throwable e) {
                    logger.error(
                            "Error getting from remote registry :", e);
                }
            }
        };

        ThreadPoolExecutor remoteRegionFetchExecutor = new ThreadPoolExecutor(
                1, serverConfig.getRemoteRegionFetchThreadPoolSize(), 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>());  // use direct handoff

        scheduler = Executors.newScheduledThreadPool(1,
                new ThreadFactoryBuilder()
                        .setNameFormat("Eureka-RemoteRegionCacheRefresher_" + regionName + "-%d")
                        .setDaemon(true)
                        .build());

        scheduler.schedule(
                new TimedSupervisorTask(
                        "RemoteRegionFetch_" + regionName,
                        scheduler,
                        remoteRegionFetchExecutor,
                        serverConfig.getRemoteRegionRegistryFetchInterval(),
                        TimeUnit.SECONDS,
                        5,  // exponential backoff bound
                        remoteRegionFetchTask
                ),
                serverConfig.getRemoteRegionRegistryFetchInterval(), TimeUnit.SECONDS);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;isReadyForServingData();;;public boolean isReadyForServingData() {
        return readyForServingData;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;fetchRegistry();;;private boolean fetchRegistry() {
        ClientResponse response = null;
        Stopwatch tracer = fetchRegistryTimer.start();

        try {
            // If the delta is disabled or if it is the first time, get all
            // applications
            if (serverConfig.shouldDisableDeltaForRemoteRegions()
                    || (getApplications() == null)
                    || (getApplications().getRegisteredApplications().size() == 0)) {
                logger.info("Disable delta property : {}", serverConfig
                        .shouldDisableDeltaForRemoteRegions());
                logger.info("Application is null : {}",
                        (getApplications() == null));
                logger.info(
                        "Registered Applications size is zero : {}",
                        (getApplications().getRegisteredApplications().size() == 0));
                response = storeFullRegistry();
            } else {
                long currDeltaGeneration = deltaGeneration.get();
                Applications delta = null;
                response = fetchRemoteRegistry(true);
                if (null != response) {
                    if (response.getStatus() == Status.OK.getStatusCode()) {
                        delta = response.getEntity(Applications.class);
                        if (delta == null) {
                            logger.error("The delta is null for some reason. Not storing this information");
                        } else if (deltaGeneration.compareAndSet(currDeltaGeneration, currDeltaGeneration + 1)) {
                            this.applicationsDelta.set(delta);
                        } else {
                            delta = null;  // set the delta to null so we don't use it
                            logger.warn("Not updating delta as another thread is updating it already");
                        }
                    }
                    if (delta == null) {
                        logger.warn("The server does not allow the delta revision to be applied because it is not "
                                + "safe. Hence got the full registry.");
                        this.closeResponse(response);
                        response = fetchRemoteRegistry(true);
                    } else {
                        updateDelta(delta);
                        String reconcileHashCode = getApplications()
                                .getReconcileHashCode();
                        // There is a diff in number of instances for some reason
                        if ((!reconcileHashCode.equals(delta.getAppsHashCode()))) {
                            response = reconcileAndLogDifference(response, delta, reconcileHashCode);

                        }
                    }
                }
            }
            logTotalInstances();

            logger.debug("Remote Registry Fetch Status : {}", null == response ? null : response.getStatus());
        } catch (Throwable e) {
            logger.error(
                    "Unable to fetch registry information from the remote registry "
                            + this.remoteRegionURL.toString(), e);
            return false;

        } finally {
            if (tracer != null) {
                tracer.stop();
            }
            closeResponse(response);
        }
        return null != response;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;updateDelta(Applications);;;private void updateDelta(Applications delta) {
        int deltaCount = 0;
        for (Application app : delta.getRegisteredApplications()) {
            for (InstanceInfo instance : app.getInstances()) {
                ++deltaCount;
                if (ActionType.ADDED.equals(instance.getActionType())) {
                    Application existingApp = getApplications()
                            .getRegisteredApplications(instance.getAppName());
                    if (existingApp == null) {
                        getApplications().addApplication(app);
                    }
                    logger.debug("Added instance {} to the existing apps ",
                            instance.getId());
                    getApplications().getRegisteredApplications(
                            instance.getAppName()).addInstance(instance);
                } else if (ActionType.MODIFIED.equals(instance.getActionType())) {
                    Application existingApp = getApplications()
                            .getRegisteredApplications(instance.getAppName());
                    if (existingApp == null) {
                        getApplications().addApplication(app);
                    }
                    logger.debug("Modified instance {} to the existing apps ",
                            instance.getId());

                    getApplications().getRegisteredApplications(
                            instance.getAppName()).addInstance(instance);

                } else if (ActionType.DELETED.equals(instance.getActionType())) {
                    Application existingApp = getApplications()
                            .getRegisteredApplications(instance.getAppName());
                    if (existingApp == null) {
                        getApplications().addApplication(app);
                    }
                    logger.debug("Deleted instance {} to the existing apps ",
                            instance.getId());
                    getApplications().getRegisteredApplications(
                            instance.getAppName()).removeInstance(instance);
                }
            }
        }
        logger.debug(
                "The total number of instances fetched by the delta processor : {}",
                deltaCount);

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;closeResponse(ClientResponse);;;private void closeResponse(ClientResponse response) {
        if (response != null) {
            try {
                response.close();
            } catch (Throwable th) {
                logger.error("Cannot release response resource :", th);
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;storeFullRegistry();;;public ClientResponse storeFullRegistry() {
        long currentUpdateGeneration = fullRegistryGeneration.get();
        ClientResponse response = fetchRemoteRegistry(false);
        if (response == null) {
            logger.error("The response is null.");
            return null;
        }
        Applications apps = response.getEntity(Applications.class);
        if (apps == null) {
            logger.error("The application is null for some reason. Not storing this information");
        } else if (fullRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1)) {
            applications.set(apps);
        } else {
            logger.warn("Not updating applications as another thread is updating it already");
        }
        logger.info("The response status is {}", response.getStatus());
        return response;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;fetchRemoteRegistry(boolean);;;private ClientResponse fetchRemoteRegistry(boolean delta) {
        logger.info(
                "Getting instance registry info from the eureka server : {} , delta : {}",
                this.remoteRegionURL, delta);
        ClientResponse response = null;
        try {

            String urlPath = delta ? "apps/delta" : "apps/";

            response = discoveryApacheClient
                    .resource(this.remoteRegionURL.toString() + urlPath)
                    .accept(MediaType.APPLICATION_JSON_TYPE)
                    .get(ClientResponse.class);
            int httpStatus = response.getStatus();
            if (httpStatus >= 200 && httpStatus < 300) {
                logger.debug("Got the data successfully : {}", httpStatus);
            } else {
                logger.warn("Cannot get the data from {} : {}", this.remoteRegionURL.toString(), httpStatus);
                return null; // To short circuit entity evaluation.
            }

        } catch (Throwable t) {
            logger.error("Can't get a response from " + this.remoteRegionURL, t);

        }
        return response;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;reconcileAndLogDifference(ClientResponse,Applications,String);;;private ClientResponse reconcileAndLogDifference(ClientResponse response,
                                                     Applications delta, String reconcileHashCode) throws Throwable {
        logger.warn(
                "The Reconcile hashcodes do not match, client : {}, server : {}. Getting the full registry",
                reconcileHashCode, delta.getAppsHashCode());

        this.closeResponse(response);
        response = this.fetchRemoteRegistry(false);
        if (null == response) {
            logger.warn("Response is null while fetching remote registry during reconcile difference.");
            return null;
        }
        Applications serverApps = response.getEntity(Applications.class);
        Map<String, List<String>> reconcileDiffMap = getApplications()
                .getReconcileMapDiff(serverApps);
        String reconcileString = "";
        for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap
                .entrySet()) {
            reconcileString = reconcileString + mapEntry.getKey() + ": ";
            for (String displayString : mapEntry.getValue()) {
                reconcileString = reconcileString + displayString;
            }
            reconcileString = reconcileString + "\n";
        }
        logger.warn("The reconcile string is {}", reconcileString);
        applications.set(serverApps);
        applicationsDelta.set(serverApps);
        logger.warn(
                "The Reconcile hashcodes after complete sync up, client : {}, server : {}.",
                getApplications().getReconcileHashCode(),
                delta.getAppsHashCode());
        return response;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;logTotalInstances();;;private void logTotalInstances() {
        int totInstances = 0;
        for (Application application : getApplications().getRegisteredApplications()) {
            totInstances += application.getInstancesAsIsFromEureka().size();
        }
        logger.debug("The total number of all instances in the client now is {}", totInstances);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;getApplications();;;@Override
    public Applications getApplications() {
        return applications.get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;getNextServerFromEureka(String,boolean);;;@Override
    public InstanceInfo getNextServerFromEureka(String arg0, boolean arg1) {
        return null;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;getApplication(String);;;@Override
    public Application getApplication(String appName) {
        return this.applications.get().getRegisteredApplications(appName);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;getInstancesById(String);;;@Override
    public List<InstanceInfo> getInstancesById(String id) {
        List<InstanceInfo> list = Collections.emptyList();

        for (Application app : applications.get().getRegisteredApplications()) {
            InstanceInfo info = app.getByInstanceId(id);
            if (info != null) {
                list.add(info);
                return list;
            }
        }
        return list;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/RemoteRegionRegistry;getApplicationDeltas();;;public Applications getApplicationDeltas() {
        return this.applicationsDelta.get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;ResponseCacheImpl(EurekaServerConfig,ServerCodecs,AbstractInstanceRegistry);;;ResponseCacheImpl(EurekaServerConfig serverConfig, ServerCodecs serverCodecs, AbstractInstanceRegistry registry) {
        this.serverConfig = serverConfig;
        this.serverCodecs = serverCodecs;
        this.shouldUseReadOnlyResponseCache = serverConfig.shouldUseReadOnlyResponseCache();
        this.registry = registry;

        long responseCacheUpdateIntervalMs = serverConfig.getResponseCacheUpdateIntervalMs();
        this.readWriteCacheMap =
                CacheBuilder.newBuilder().initialCapacity(1000)
                        .expireAfterWrite(serverConfig.getResponseCacheAutoExpirationInSeconds(), TimeUnit.SECONDS)
                        .removalListener(new RemovalListener<Key, Value>() {
                            @Override
                            public void onRemoval(RemovalNotification<Key, Value> notification) {
                                Key removedKey = notification.getKey();
                                if (removedKey.hasRegions()) {
                                    Key cloneWithNoRegions = removedKey.cloneWithoutRegions();
                                    regionSpecificKeys.remove(cloneWithNoRegions, removedKey);
                                }
                            }
                        })
                        .build(new CacheLoader<Key, Value>() {
                            @Override
                            public Value load(Key key) throws Exception {
                                if (key.hasRegions()) {
                                    Key cloneWithNoRegions = key.cloneWithoutRegions();
                                    regionSpecificKeys.put(cloneWithNoRegions, key);
                                }
                                Value value = generatePayload(key);
                                return value;
                            }
                        });

        if (shouldUseReadOnlyResponseCache) {
            timer.schedule(getCacheUpdateTask(),
                    new Date(((System.currentTimeMillis() / responseCacheUpdateIntervalMs) * responseCacheUpdateIntervalMs)
                            + responseCacheUpdateIntervalMs),
                    responseCacheUpdateIntervalMs);
        }

        try {
            Monitors.registerObject(this);
        } catch (Throwable e) {
            logger.warn("Cannot register the JMX monitor for the InstanceRegistry", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getCacheUpdateTask();;;private TimerTask getCacheUpdateTask() {
        return new TimerTask() {
            @Override
            public void run() {
                logger.debug("Updating the client cache from response cache");
                for (Key key : readOnlyCacheMap.keySet()) {
                    if (logger.isDebugEnabled()) {
                        Object[] args = {key.getEntityType(), key.getName(), key.getVersion(), key.getType()};
                        logger.debug("Updating the client cache from response cache for key : {} {} {} {}", args);
                    }
                    try {
                        CurrentRequestVersion.set(key.getVersion());
                        Value cacheValue = readWriteCacheMap.get(key);
                        Value currentCacheValue = readOnlyCacheMap.get(key);
                        if (cacheValue != currentCacheValue) {
                            readOnlyCacheMap.put(key, cacheValue);
                        }
                    } catch (Throwable th) {
                        logger.error("Error while updating the client cache from response cache", th);
                    }
                }
            }
        };
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;get(Key);;;public String get(final Key key) {
        return get(key, shouldUseReadOnlyResponseCache);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;get(Key,boolean);;;@VisibleForTesting
    String get(final Key key, boolean useReadOnlyCache) {
        Value payload = getValue(key, useReadOnlyCache);
        if (payload == null || payload.getPayload().equals(EMPTY_PAYLOAD)) {
            return null;
        } else {
            return payload.getPayload();
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getGZIP(Key);;;public byte[] getGZIP(Key key) {
        Value payload = getValue(key, shouldUseReadOnlyResponseCache);
        if (payload == null) {
            return null;
        }
        return payload.getGzipped();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;invalidate(String,String,String);;;@Override
    public void invalidate(String appName, @Nullable String vipAddress, @Nullable String secureVipAddress) {
        for (Key.KeyType type : Key.KeyType.values()) {
            for (Version v : Version.values()) {
                invalidate(
                        new Key(Key.EntityType.Application, appName, type, v, EurekaAccept.full),
                        new Key(Key.EntityType.Application, appName, type, v, EurekaAccept.compact),
                        new Key(Key.EntityType.Application, ALL_APPS, type, v, EurekaAccept.full),
                        new Key(Key.EntityType.Application, ALL_APPS, type, v, EurekaAccept.compact),
                        new Key(Key.EntityType.Application, ALL_APPS_DELTA, type, v, EurekaAccept.full),
                        new Key(Key.EntityType.Application, ALL_APPS_DELTA, type, v, EurekaAccept.compact)
                );
                if (null != vipAddress) {
                    invalidate(new Key(Key.EntityType.VIP, vipAddress, type, v, EurekaAccept.full));
                }
                if (null != secureVipAddress) {
                    invalidate(new Key(Key.EntityType.SVIP, secureVipAddress, type, v, EurekaAccept.full));
                }
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;invalidate(Key);;;public void invalidate(Key... keys) {
        for (Key key : keys) {
            logger.debug("Invalidating the response cache key : {} {} {} {}, {}",
                    key.getEntityType(), key.getName(), key.getVersion(), key.getType(), key.getEurekaAccept());

            readWriteCacheMap.invalidate(key);
            Collection<Key> keysWithRegions = regionSpecificKeys.get(key);
            if (null != keysWithRegions && !keysWithRegions.isEmpty()) {
                for (Key keysWithRegion : keysWithRegions) {
                    logger.debug("Invalidating the response cache key : {} {} {} {} {}",
                            key.getEntityType(), key.getName(), key.getVersion(), key.getType(), key.getEurekaAccept());
                    readWriteCacheMap.invalidate(keysWithRegion);
                }
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getVersionDelta();;;@Override
    public AtomicLong getVersionDelta() {
        return versionDelta;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getVersionDeltaWithRegions();;;@Override
    public AtomicLong getVersionDeltaWithRegions() {
        return versionDeltaWithRegions;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getVersionDeltaStatic();;;@Deprecated
    public static AtomicLong getVersionDeltaStatic() {
        return versionDeltaLegacy;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getVersionDeltaWithRegionsLegacy();;;@Deprecated
    public static AtomicLong getVersionDeltaWithRegionsLegacy() {
        return versionDeltaWithRegionsLegacy;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getCurrentSize();;;@Monitor(name = "responseCacheSize", type = DataSourceType.GAUGE)
    public int getCurrentSize() {
        return readWriteCacheMap.asMap().size();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getValue(Key,boolean);;;@VisibleForTesting
    Value getValue(final Key key, boolean useReadOnlyCache) {
        Value payload = null;
        try {
            if (useReadOnlyCache) {
                final Value currentPayload = readOnlyCacheMap.get(key);
                if (currentPayload != null) {
                    payload = currentPayload;
                } else {
                    payload = readWriteCacheMap.get(key);
                    readOnlyCacheMap.put(key, payload);
                }
            } else {
                payload = readWriteCacheMap.get(key);
            }
        } catch (Throwable t) {
            logger.error("Cannot get value for key :" + key, t);
        }
        return payload;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getPayLoad(Key,Applications);;;private String getPayLoad(Key key, Applications apps) {
        EncoderWrapper encoderWrapper = serverCodecs.getEncoder(key.getType(), key.getEurekaAccept());
        String result;
        try {
            result = encoderWrapper.encode(apps);
        } catch (Exception e) {
            logger.error("Failed to encode the payload for all apps", e);
            return "";
        }
        if(logger.isDebugEnabled()) {
            logger.debug("New application cache entry {} with apps hashcode {}", key.toStringCompact(), apps.getAppsHashCode());
        }
        return result;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getPayLoad(Key,Application);;;private String getPayLoad(Key key, Application app) {
        if (app == null) {
            return EMPTY_PAYLOAD;
        }

        EncoderWrapper encoderWrapper = serverCodecs.getEncoder(key.getType(), key.getEurekaAccept());
        try {
            return encoderWrapper.encode(app);
        } catch (Exception e) {
            logger.error("Failed to encode the payload for application {}", app.getName(), e);
            return "";
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;generatePayload(Key);;;private Value generatePayload(Key key) {
        Stopwatch tracer = null;
        try {
            String payload;
            switch (key.getEntityType()) {
                case Application:
                    boolean isRemoteRegionRequested = key.hasRegions();

                    if (ALL_APPS.equals(key.getName())) {
                        if (isRemoteRegionRequested) {
                            tracer = serializeAllAppsWithRemoteRegionTimer.start();
                            payload = getPayLoad(key, registry.getApplicationsFromMultipleRegions(key.getRegions()));
                        } else {
                            tracer = serializeAllAppsTimer.start();
                            payload = getPayLoad(key, registry.getApplications());
                        }
                    } else if (ALL_APPS_DELTA.equals(key.getName())) {
                        if (isRemoteRegionRequested) {
                            tracer = serializeDeltaAppsWithRemoteRegionTimer.start();
                            versionDeltaWithRegions.incrementAndGet();
                            versionDeltaWithRegionsLegacy.incrementAndGet();
                            payload = getPayLoad(key,
                                    registry.getApplicationDeltasFromMultipleRegions(key.getRegions()));
                        } else {
                            tracer = serializeDeltaAppsTimer.start();
                            versionDelta.incrementAndGet();
                            versionDeltaLegacy.incrementAndGet();
                            payload = getPayLoad(key, registry.getApplicationDeltas());
                        }
                    } else {
                        tracer = serializeOneApptimer.start();
                        payload = getPayLoad(key, registry.getApplication(key.getName()));
                    }
                    break;
                case VIP:
                case SVIP:
                    tracer = serializeViptimer.start();
                    payload = getPayLoad(key, getApplicationsForVip(key, registry));
                    break;
                default:
                    logger.error("Unidentified entity type: " + key.getEntityType() + " found in the cache key.");
                    payload = "";
                    break;
            }
            return new Value(payload);
        } finally {
            if (tracer != null) {
                tracer.stop();
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getApplicationsForVip(Key,AbstractInstanceRegistry);;;private static Applications getApplicationsForVip(Key key, AbstractInstanceRegistry registry) {
        Object[] args = {key.getEntityType(), key.getName(), key.getVersion(), key.getType()};
        logger.debug(
                "Retrieving applications from registry for key : {} {} {} {}",
                args);
        Applications toReturn = new Applications();
        Applications applications = registry.getApplications();
        for (Application application : applications.getRegisteredApplications()) {
            Application appToAdd = null;
            for (InstanceInfo instanceInfo : application.getInstances()) {
                String vipAddress;
                if (Key.EntityType.VIP.equals(key.getEntityType())) {
                    vipAddress = instanceInfo.getVIPAddress();
                } else if (Key.EntityType.SVIP.equals(key.getEntityType())) {
                    vipAddress = instanceInfo.getSecureVipAddress();
                } else {
                    // should not happen, but just in case.
                    continue;
                }

                if (null != vipAddress) {
                    String[] vipAddresses = vipAddress.split(",");
                    Arrays.sort(vipAddresses);
                    if (Arrays.binarySearch(vipAddresses, key.getName()) >= 0) {
                        if (null == appToAdd) {
                            appToAdd = new Application(application.getName());
                            toReturn.addApplication(appToAdd);
                        }
                        appToAdd.addInstance(instanceInfo);
                    }
                }
            }
        }
        toReturn.setAppsHashCode(toReturn.getReconcileHashCode());
        args = new Object[]{key.getEntityType(), key.getName(), key.getVersion(), key.getType(),
                toReturn.getReconcileHashCode()};
        logger.debug(
                "Retrieved applications from registry for key : {} {} {} {}, reconcile hashcode: {}",
                args);
        return toReturn;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;Value(String);;;public Value(String payload) {
            this.payload = payload;
            if (!EMPTY_PAYLOAD.equals(payload)) {
                Stopwatch tracer = compressPayloadTimer.start();
                try {
                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    GZIPOutputStream out = new GZIPOutputStream(bos);
                    byte[] rawBytes = payload.getBytes();
                    out.write(rawBytes);
                    // Finish creation of gzip file
                    out.finish();
                    out.close();
                    bos.close();
                    gzipped = bos.toByteArray();
                } catch (IOException e) {
                    gzipped = null;
                } finally {
                    if (tracer != null) {
                        tracer.stop();
                    }
                }
            } else {
                gzipped = null;
            }
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getPayload();;;public String getPayload() {
            return payload;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl;getGzipped();;;public byte[] getGzipped() {
            return gzipped;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;Key(EntityType,String,KeyType,Version,EurekaAccept);;;public Key(EntityType entityType, String entityName, KeyType type, Version v, EurekaAccept eurekaAccept) {
        this(entityType, entityName, type, v, eurekaAccept, null);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;Key(EntityType,String,KeyType,Version,EurekaAccept,String[]);;;public Key(EntityType entityType, String entityName, KeyType type, Version v, EurekaAccept eurekaAccept, @Nullable String[] regions) {
        this.regions = regions;
        this.entityType = entityType;
        this.entityName = entityName;
        this.requestType = type;
        this.requestVersion = v;
        this.eurekaAccept = eurekaAccept;
        hashKey = this.entityType + this.entityName + (null != this.regions ? Arrays.toString(this.regions) : "")
                + requestType.name() + requestVersion.name() + this.eurekaAccept.name();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getName();;;public String getName() {
        return entityName;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getHashKey();;;public String getHashKey() {
        return hashKey;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getType();;;public KeyType getType() {
        return requestType;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getVersion();;;public Version getVersion() {
        return requestVersion;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getEurekaAccept();;;public EurekaAccept getEurekaAccept() {
        return eurekaAccept;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getEntityType();;;public EntityType getEntityType() {
        return entityType;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;hasRegions();;;public boolean hasRegions() {
        return null != regions && regions.length != 0;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;getRegions();;;public String[] getRegions() {
        return regions;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;cloneWithoutRegions();;;public Key cloneWithoutRegions() {
        return new Key(entityType, entityName, requestType, requestVersion, eurekaAccept);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;hashCode();;;@Override
    public int hashCode() {
        String hashKey = getHashKey();
        return hashKey.hashCode();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;equals(Object);;;@Override
    public boolean equals(Object other) {
        if (other instanceof Key) {
            return getHashKey().equals(((Key) other).getHashKey());
        } else {
            return false;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/Key;toStringCompact();;;public String toStringCompact() {
        StringBuilder sb = new StringBuilder();
        sb.append("{name=").append(entityName).append(", type=").append(entityType).append(", format=").append(requestType);
        if(regions != null) {
            sb.append(", regions=").append(Arrays.toString(regions));
        }
        sb.append('}');
        return sb.toString();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache;invalidate(String,String,String);;;void invalidate(String appName, @Nullable String vipAddress, @Nullable String secureVipAddress);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache;getVersionDelta();;;AtomicLong getVersionDelta();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache;getVersionDeltaWithRegions();;;AtomicLong getVersionDeltaWithRegions();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache;get(Key);;;String get(Key key);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache;getGZIP(Key);;;byte[] getGZIP(Key key);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/AwsInstanceRegistry;AwsInstanceRegistry(EurekaServerConfig,EurekaClientConfig,ServerCodecs,EurekaClient);;;@Inject
    public AwsInstanceRegistry(EurekaServerConfig serverConfig,
                               EurekaClientConfig clientConfig,
                               ServerCodecs serverCodecs,
                               EurekaClient eurekaClient) {
        super(serverConfig, clientConfig, serverCodecs, eurekaClient);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/AwsInstanceRegistry;init(PeerEurekaNodes);;;@Override
    public void init(PeerEurekaNodes peerEurekaNodes) throws Exception {
        super.init(peerEurekaNodes);
        this.awsAsgUtil = new AwsAsgUtil(serverConfig, clientConfig, this);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/AwsInstanceRegistry;getAwsAsgUtil();;;public AwsAsgUtil getAwsAsgUtil() {
        return awsAsgUtil;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/AwsInstanceRegistry;getOverriddenInstanceStatus(InstanceInfo,Lease<InstanceInfo>,boolean);;;@Override
    protected InstanceInfo.InstanceStatus getOverriddenInstanceStatus(InstanceInfo r,
                                                                      Lease<InstanceInfo> existingLease,
                                                                      boolean isReplication) {
        // ReplicationInstance is DOWN or STARTING - believe that, but when the instance says UP, question that
        // The client instance sends STARTING or DOWN (because of heartbeat failures), then we accept what
        // the client says. The same is the case with replica as well.
        // The OUT_OF_SERVICE from the client or replica needs to be confirmed as well since the service may be
        // currently in SERVICE
        if (
                (!InstanceInfo.InstanceStatus.UP.equals(r.getStatus()))
                        && (!InstanceInfo.InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {
            logger.debug("Trusting the instance status {} from replica or instance for instance {}",
                    r.getStatus(), r.getId());
            return r.getStatus();
        }
        // Overrides are the status like OUT_OF_SERVICE and UP set by NAC
        InstanceInfo.InstanceStatus overridden = overriddenInstanceStatusMap.get(r.getId());
        // If there are instance specific overrides, then they win - otherwise the ASG status
        if (overridden != null) {
            logger.debug("The instance specific override for instance {} and the value is {}",
                    r.getId(), overridden.name());
            return overridden;
        }
        // If the ASGName is present- check for its status
        boolean isASGDisabled = false;
        if (r.getASGName() != null) {
            isASGDisabled = !awsAsgUtil.isASGEnabled(r);
            logger.debug("The ASG name is specified {} and the value is {}", r.getASGName(), isASGDisabled);
            if (isASGDisabled) {
                return InstanceInfo.InstanceStatus.OUT_OF_SERVICE;
            } else {
                return InstanceInfo.InstanceStatus.UP;
            }
        }
        // This is for backward compatibility until all applications have ASG names, otherwise while starting up
        // the client status may override status replicated from other servers
        if (!isReplication) {
            InstanceInfo.InstanceStatus existingStatus = null;
            if (existingLease != null) {
                existingStatus = existingLease.getHolder().getStatus();
            }
            // Allow server to have its way when the status is UP or OUT_OF_SERVICE
            if (
                    (existingStatus != null)
                            && (InstanceInfo.InstanceStatus.OUT_OF_SERVICE.equals(existingStatus)
                            || InstanceInfo.InstanceStatus.UP.equals(existingStatus))) {
                logger.debug("There is already an existing lease with status {}  for instance {}",
                        existingLease.getHolder().getStatus().name(),
                        existingLease.getHolder().getId());
                return existingLease.getHolder().getStatus();
            }
        }
        logger.debug("Returning the default instance status {} for instance {}",
                r.getStatus(), r.getId());
        return r.getStatus();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;openForTraffic(ApplicationInfoManager,int);;;void openForTraffic(ApplicationInfoManager applicationInfoManager, int count);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;shutdown();;;void shutdown();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;storeOverriddenStatusIfRequired(String,InstanceStatus);;;@Deprecated
    void storeOverriddenStatusIfRequired(String id, InstanceStatus overriddenStatus);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;storeOverriddenStatusIfRequired(String,String,InstanceStatus);;;void storeOverriddenStatusIfRequired(String appName, String id, InstanceStatus overriddenStatus);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;statusUpdate(String,String,InstanceStatus,String,boolean);;;boolean statusUpdate(String appName, String id, InstanceStatus newStatus,
                         String lastDirtyTimestamp, boolean isReplication);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;deleteStatusOverride(String,String,InstanceStatus,String,boolean);;;boolean deleteStatusOverride(String appName, String id, InstanceStatus newStatus,
                                 String lastDirtyTimestamp, boolean isReplication);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;overriddenInstanceStatusesSnapshot();;;Map<String, InstanceStatus> overriddenInstanceStatusesSnapshot();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getApplicationsFromLocalRegionOnly();;;Applications getApplicationsFromLocalRegionOnly();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getSortedApplications();;;List<Application> getSortedApplications();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getApplication(String,boolean);;;Application getApplication(String appName, boolean includeRemoteRegion);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getInstanceByAppAndId(String,String);;;InstanceInfo getInstanceByAppAndId(String appName, String id);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getInstanceByAppAndId(String,String,boolean);;;InstanceInfo getInstanceByAppAndId(String appName, String id, boolean includeRemoteRegions);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;clearRegistry();;;void clearRegistry();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;initializedResponseCache();;;void initializedResponseCache();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getResponseCache();;;ResponseCache getResponseCache();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getNumOfRenewsInLastMin();;;long getNumOfRenewsInLastMin();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getNumOfRenewsPerMinThreshold();;;int getNumOfRenewsPerMinThreshold();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;isBelowRenewThresold();;;int isBelowRenewThresold();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getLastNRegisteredInstances();;;List<Pair<Long, String>> getLastNRegisteredInstances();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;getLastNCanceledInstances();;;List<Pair<Long, String>> getLastNCanceledInstances();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;isLeaseExpirationEnabled();;;boolean isLeaseExpirationEnabled();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/InstanceRegistry;isSelfPreservationModeEnabled();;;boolean isSelfPreservationModeEnabled();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistry;init(PeerEurekaNodes);;;void init(PeerEurekaNodes peerEurekaNodes) throws Exception;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistry;syncUp();;;int syncUp();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistry;shouldAllowAccess(boolean);;;boolean shouldAllowAccess(boolean remoteRegionRequired);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistry;register(InstanceInfo,boolean);;;void register(InstanceInfo info, boolean isReplication);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistry;statusUpdate(String,ASGResource.ASGStatus,boolean);;;void statusUpdate(final String asgName, final ASGResource.ASGStatus newStatus, final boolean isReplication);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getTimer();;;public com.netflix.servo.monitor.Timer getTimer() {
            return this.timer;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;PeerAwareInstanceRegistryImpl(EurekaServerConfig,EurekaClientConfig,ServerCodecs,EurekaClient);;;@Inject
    public PeerAwareInstanceRegistryImpl(
            EurekaServerConfig serverConfig,
            EurekaClientConfig clientConfig,
            ServerCodecs serverCodecs,
            EurekaClient eurekaClient
    ) {
        super(serverConfig, serverCodecs);
        this.clientConfig = clientConfig;
        this.serverCodecs = serverCodecs;
        this.eurekaClient = eurekaClient;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;init(PeerEurekaNodes);;;@Override
    public void init(PeerEurekaNodes peerEurekaNodes) throws Exception {
        this.peerEurekaNodes = peerEurekaNodes;
        initializedResponseCache();
        scheduleRenewalThresholdUpdateTask();
        initRemoteRegionRegistry();

        try {
            Monitors.registerObject(this);
        } catch (Throwable e) {
            logger.warn("Cannot register the JMX monitor for the InstanceRegistry :", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;shutdown();;;@Override
    public void shutdown() {
        try {
            DefaultMonitorRegistry.getInstance().unregister(Monitors.newObjectMonitor(this));
        } catch (Throwable t) {
            logger.error("Cannot shutdown monitor registry", t);
        }
        try {
        peerEurekaNodes.shutdown();
        } catch (Throwable t) {
            logger.error("Cannot shutdown ReplicaAwareInstanceRegistry", t);
        }
        super.shutdown();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;scheduleRenewalThresholdUpdateTask();;;private void scheduleRenewalThresholdUpdateTask() {
        timer.schedule(new TimerTask() {
                           @Override
                           public void run() {
                               updateRenewalThreshold();
                           }
                       }, serverConfig.getRenewalThresholdUpdateIntervalMs(),
                serverConfig.getRenewalThresholdUpdateIntervalMs());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;syncUp();;;@Override
    public int syncUp() {
        // Copy entire entry from neighboring DS node
        int count = 0;

        for (int i = 0; ((i < serverConfig.getRegistrySyncRetries()) && (count == 0)); i++) {
            Applications apps = eurekaClient.getApplications();
            for (Application app : apps.getRegisteredApplications()) {
                for (InstanceInfo instance : app.getInstances()) {
                    try {
                        if (isRegisterable(instance)) {
                            register(instance, instance.getLeaseInfo().getDurationInSecs(), true);
                            count++;
                        }
                    } catch (Throwable t) {
                        logger.error("During DS init copy", t);
                    }
                }
            }
            if (count == 0) {
                try {
                    Thread.sleep(serverConfig.getRegistrySyncRetryWaitMs());
                } catch (InterruptedException e) {
                    logger.warn("Interrupted during registry transfer..");
                    break;
                }
            }
        }
        return count;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;openForTraffic(ApplicationInfoManager,int);;;@Override
    public void openForTraffic(ApplicationInfoManager applicationInfoManager, int count) {
        // Renewals happen every 30 seconds and for a minute it should be a factor of 2.
        this.expectedNumberOfRenewsPerMin = count * 2;
        this.numberOfRenewsPerMinThreshold =
                (int) (this.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());
        logger.info("Got " + count + " instances from neighboring DS node");
        logger.info("Renew threshold is: " + numberOfRenewsPerMinThreshold);
        this.startupTime = System.currentTimeMillis();
        if (count > 0) {
            this.peerInstancesTransferEmptyOnStartup = false;
        }
        DataCenterInfo.Name selfName = applicationInfoManager.getInfo().getDataCenterInfo().getName();
        boolean isAws = Name.Amazon == selfName;
        if (isAws && serverConfig.shouldPrimeAwsReplicaConnections()) {
            logger.info("Priming AWS connections for all replicas..");
            primeAwsReplicas(applicationInfoManager);
        }
        logger.info("Changing status to UP");
        applicationInfoManager.setInstanceStatus(InstanceStatus.UP);
        super.postInit();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;primeAwsReplicas(ApplicationInfoManager);;;private void primeAwsReplicas(ApplicationInfoManager applicationInfoManager) {
        boolean areAllPeerNodesPrimed = false;
        while (!areAllPeerNodesPrimed) {
            String peerHostName = null;
            try {
                Application eurekaApps = this.getApplication(applicationInfoManager.getInfo().getAppName(), false);
                if (eurekaApps == null) {
                    areAllPeerNodesPrimed = true;
                    logger.info("No peers needed to prime.");
                    return;
                }
                for (PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
                    for (InstanceInfo peerInstanceInfo : eurekaApps.getInstances()) {
                        LeaseInfo leaseInfo = peerInstanceInfo.getLeaseInfo();
                        // If the lease is expired - do not worry about priming
                        if (System.currentTimeMillis() > (leaseInfo
                                .getRenewalTimestamp() + (leaseInfo
                                .getDurationInSecs() * 1000))
                                + (2 * 60 * 1000)) {
                            continue;
                        }
                        peerHostName = peerInstanceInfo.getHostName();
                        logger.info("Trying to send heartbeat for the eureka server at {} to make sure the " +
                                "network channels are open", peerHostName);
                        // Only try to contact the eureka nodes that are in this instance's registry - because
                        // the other instances may be legitimately down
                        if (peerHostName.equalsIgnoreCase(new URI(node.getServiceUrl()).getHost())) {
                            node.heartbeat(
                                    peerInstanceInfo.getAppName(),
                                    peerInstanceInfo.getId(),
                                    peerInstanceInfo,
                                    null,
                                    true);
                        }
                    }
                }
                areAllPeerNodesPrimed = true;
            } catch (Throwable e) {
                logger.error("Could not contact " + peerHostName, e);
                try {
                    Thread.sleep(PRIME_PEER_NODES_RETRY_MS);
                } catch (InterruptedException e1) {
                    logger.warn("Interrupted while priming : ", e1);
                    areAllPeerNodesPrimed = true;
                }
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;shouldAllowAccess(boolean);;;@Override
    public boolean shouldAllowAccess(boolean remoteRegionRequired) {
        if (this.peerInstancesTransferEmptyOnStartup) {
            if (!(System.currentTimeMillis() > this.startupTime + serverConfig.getWaitTimeInMsWhenSyncEmpty())) {
                return false;
            }
        }
        if (remoteRegionRequired) {
            for (RemoteRegionRegistry remoteRegionRegistry : this.regionNameVSRemoteRegistry.values()) {
                if (!remoteRegionRegistry.isReadyForServingData()) {
                    return false;
                }
            }
        }
        return true;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;shouldAllowAccess();;;public boolean shouldAllowAccess() {
        return shouldAllowAccess(true);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getReplicaNodes();;;@Deprecated
    public List<PeerEurekaNode> getReplicaNodes() {
        return Collections.unmodifiableList(peerEurekaNodes.getPeerEurekaNodes());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;cancel(String,String,boolean);;;@Override
    public boolean cancel(final String appName, final String id,
                          final boolean isReplication) {
        if (super.cancel(appName, id, isReplication)) {
            replicateToPeers(Action.Cancel, appName, id, null, null, isReplication);
            synchronized (lock) {
                if (this.expectedNumberOfRenewsPerMin > 0) {
                    // Since the client wants to cancel it, reduce the threshold (1 for 30 seconds, 2 for a minute)
                    this.expectedNumberOfRenewsPerMin = this.expectedNumberOfRenewsPerMin - 2;
                    this.numberOfRenewsPerMinThreshold =
                            (int) (this.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());
                }
            }
            return true;
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;register(InstanceInfo,boolean);;;@Override
    public void register(final InstanceInfo info, final boolean isReplication) {
        int leaseDuration = Lease.DEFAULT_DURATION_IN_SECS;
        if (info.getLeaseInfo() != null && info.getLeaseInfo().getDurationInSecs() > 0) {
            leaseDuration = info.getLeaseInfo().getDurationInSecs();
        }
        super.register(info, leaseDuration, isReplication);
        replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, null, isReplication);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;renew(String,String,boolean);;;public boolean renew(final String appName, final String id, final boolean isReplication) {
        if (super.renew(appName, id, isReplication)) {
            replicateToPeers(Action.Heartbeat, appName, id, null, null, isReplication);
            return true;
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;statusUpdate(String,String,InstanceStatus,String,boolean);;;@Override
    public boolean statusUpdate(final String appName, final String id,
                                final InstanceStatus newStatus, String lastDirtyTimestamp,
                                final boolean isReplication) {
        if (super.statusUpdate(appName, id, newStatus, lastDirtyTimestamp, isReplication)) {
            replicateToPeers(Action.StatusUpdate, appName, id, null, newStatus, isReplication);
            return true;
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;deleteStatusOverride(String,String,InstanceStatus,String,boolean);;;@Override
    public boolean deleteStatusOverride(String appName, String id,
                                        InstanceStatus newStatus,
                                        String lastDirtyTimestamp,
                                        boolean isReplication) {
        if (super.deleteStatusOverride(appName, id, newStatus, lastDirtyTimestamp, isReplication)) {
            replicateToPeers(Action.DeleteStatusOverride, appName, id, null, null, isReplication);
            return true;
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;statusUpdate(String,ASGStatus,boolean);;;@Override
    public void statusUpdate(final String asgName, final ASGStatus newStatus, final boolean isReplication) {
        // If this is replicated from an other node, do not try to replicate again.
        if (isReplication) {
            return;
        }
        for (final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
            replicateASGInfoToReplicaNodes(asgName, newStatus, node);

        }

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;isLeaseExpirationEnabled();;;@Override
    public boolean isLeaseExpirationEnabled() {
        boolean leaseExpirationEnabled = (numberOfRenewsPerMinThreshold > 0)
                && (getNumOfRenewsInLastMin() > numberOfRenewsPerMinThreshold);
        boolean isSelfPreservationModeEnabled = isSelfPreservationModeEnabled();
        if ((!leaseExpirationEnabled)) {
            if (!isSelfPreservationModeEnabled) {
                logger.warn("The self preservation mode is disabled!. Hence allowing the instances to expire.");
                leaseExpirationEnabled = true;
            }
        }
        return leaseExpirationEnabled;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;isSelfPreservationModeEnabled();;;@Override
    public boolean isSelfPreservationModeEnabled() {
        return serverConfig.shouldEnableSelfPreservation();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getNextServerFromEureka(String,boolean);;;@Override
    public InstanceInfo getNextServerFromEureka(String virtualHostname, boolean secure) {
        // TODO Auto-generated method stub
        return null;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;updateRenewalThreshold();;;private void updateRenewalThreshold() {
        try {
            Applications apps = eurekaClient.getApplications();
            int count = 0;
            for (Application app : apps.getRegisteredApplications()) {
                for (InstanceInfo instance : app.getInstances()) {
                    if (this.isRegisterable(instance)) {
                        ++count;
                    }
                }
            }
            synchronized (lock) {
                // Update threshold only if the threshold is greater than the
                // current expected threshold of if the self preservation is disabled.
                if ((count * 2) > (serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold)
                        || (!this.isSelfPreservationModeEnabled())) {
                    this.expectedNumberOfRenewsPerMin = count * 2;
                    this.numberOfRenewsPerMinThreshold = (int) ((count * 2) * serverConfig.getRenewalPercentThreshold());
                }
            }
            logger.info("Current renewal threshold is : {}", numberOfRenewsPerMinThreshold);
        } catch (Throwable e) {
            logger.error("Cannot update renewal threshold", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getSortedApplications();;;@Override
    public List<Application> getSortedApplications() {
        List<Application> apps = new ArrayList<Application>(getApplications().getRegisteredApplications());
        Collections.sort(apps, APP_COMPARATOR);
        return apps;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getNumOfReplicationsInLastMin();;;@com.netflix.servo.annotations.Monitor(name = "numOfReplicationsInLastMin",
            description = "Number of total replications received in the last minute",
            type = com.netflix.servo.annotations.DataSourceType.GAUGE)
    public long getNumOfReplicationsInLastMin() {
        return numberOfReplicationsLastMin.getCount();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;isBelowRenewThresold();;;@com.netflix.servo.annotations.Monitor(name = "isBelowRenewThreshold", description = "0 = false, 1 = true",
            type = com.netflix.servo.annotations.DataSourceType.GAUGE)
    @Override
    public int isBelowRenewThresold() {
        if ((getNumOfRenewsInLastMin() <= numberOfRenewsPerMinThreshold)
                &&
                ((this.startupTime > 0) && (System.currentTimeMillis() > this.startupTime + (serverConfig.getWaitTimeInMsWhenSyncEmpty())))) {
            return 1;
        } else {
            return 0;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;isRegisterable(InstanceInfo);;;public boolean isRegisterable(InstanceInfo instanceInfo) {
        DataCenterInfo datacenterInfo = instanceInfo.getDataCenterInfo();
        String serverRegion = clientConfig.getRegion();
        if (AmazonInfo.class.isInstance(datacenterInfo)) {
            AmazonInfo info = AmazonInfo.class.cast(instanceInfo.getDataCenterInfo());
            String availabilityZone = info.get(MetaDataKey.availabilityZone);
            // Can be null for dev environments in non-AWS data center
            if (availabilityZone == null && US_EAST_1.equalsIgnoreCase(serverRegion)) {
                return true;
            } else if ((availabilityZone != null) && (availabilityZone.contains(serverRegion))) {
                // If in the same region as server, then consider it registerable
                return true;
            }
        }
        return true; // Everything non-amazon is registrable.
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;replicateToPeers(Action,String,String,InstanceInfo,InstanceStatus,boolean);;;private void replicateToPeers(Action action, String appName, String id,
                                  InstanceInfo info /* optional */,
                                  InstanceStatus newStatus /* optional */, boolean isReplication) {
        Stopwatch tracer = action.getTimer().start();
        try {
            if (isReplication) {
                numberOfReplicationsLastMin.increment();
            }
            // If it is a replication already, do not replicate again as this will create a poison replication
            if (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) {
                return;
            }

            for (final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
                // If the url represents this host, do not replicate to yourself.
                if (peerEurekaNodes.isThisMe(node.getServiceUrl())) {
                    continue;
                }
                replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);
            }
        } finally {
            tracer.stop();
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;replicateInstanceActionsToPeers(Action,String,String,InstanceInfo,InstanceStatus,PeerEurekaNode);;;private void replicateInstanceActionsToPeers(Action action, String appName,
                                                 String id, InstanceInfo info, InstanceStatus newStatus,
                                                 PeerEurekaNode node) {
        try {
            InstanceInfo infoFromRegistry = null;
            CurrentRequestVersion.set(Version.V2);
            switch (action) {
                case Cancel:
                    node.cancel(appName, id);
                    break;
                case Heartbeat:
                    InstanceStatus overriddenStatus = overriddenInstanceStatusMap.get(id);
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.heartbeat(appName, id, infoFromRegistry, overriddenStatus, false);
                    break;
                case Register:
                    node.register(info);
                    break;
                case StatusUpdate:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.statusUpdate(appName, id, newStatus, infoFromRegistry);
                    break;
                case DeleteStatusOverride:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.deleteStatusOverride(appName, id, infoFromRegistry);
                    break;
            }
        } catch (Throwable t) {
            logger.error("Cannot replicate information to {} for action {}", node.getServiceUrl(), action.name(), t);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;replicateASGInfoToReplicaNodes(String,ASGStatus,PeerEurekaNode);;;private void replicateASGInfoToReplicaNodes(final String asgName,
                                                final ASGStatus newStatus, final PeerEurekaNode node) {
        CurrentRequestVersion.set(Version.V2);
        try {
            node.statusUpdate(asgName, newStatus);
        } catch (Throwable e) {
            logger.error("Cannot replicate ASG status information to {}", node.getServiceUrl(), e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getLocalRegistrySize();;;@Override
    @com.netflix.servo.annotations.Monitor(name = "localRegistrySize",
            description = "Current registry size", type = DataSourceType.GAUGE)
    public long getLocalRegistrySize() {
        return super.getLocalRegistrySize();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl;getOverriddenInstanceStatus(InstanceInfo,Lease<InstanceInfo>,boolean);;;@Override
    protected InstanceInfo.InstanceStatus getOverriddenInstanceStatus(InstanceInfo r,
                                                                      Lease<InstanceInfo> existingLease,
                                                                      boolean isReplication) {
        // ReplicationInstance is DOWN or STARTING - believe that, but when the instance says UP, question that
        // The client instance sends STARTING or DOWN (because of heartbeat failures), then we accept what
        // the client says. The same is the case with replica as well.
        // The OUT_OF_SERVICE from the client or replica needs to be confirmed as well since the service may be
        // currently in SERVICE
        if (
                (!InstanceInfo.InstanceStatus.UP.equals(r.getStatus()))
                        && (!InstanceInfo.InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {
            logger.debug("Trusting the instance status {} from replica or instance for instance {}",
                    r.getStatus(), r.getId());
            return r.getStatus();
        }
        // Overrides are the status like OUT_OF_SERVICE and UP set by NAC
        InstanceInfo.InstanceStatus overridden = overriddenInstanceStatusMap.get(r.getId());
        // If there are instance specific overrides, then they win - otherwise the ASG status
        if (overridden != null) {
            logger.debug("The instance specific override for instance {} and the value is {}",
                    r.getId(), overridden.name());
            return overridden;
        }

        // This is for backward compatibility until all applications have ASG
        // names, otherwise while starting up
        // the client status may override status replicated from other servers
        if (!isReplication) {
            InstanceInfo.InstanceStatus existingStatus = null;
            if (existingLease != null) {
                existingStatus = existingLease.getHolder().getStatus();
            }
            // Allow server to have its way when the status is UP or OUT_OF_SERVICE
            if (
                    (existingStatus != null)
                            && (InstanceInfo.InstanceStatus.OUT_OF_SERVICE.equals(existingStatus)
                            || InstanceInfo.InstanceStatus.UP.equals(existingStatus))) {
                logger.debug("There is already an existing lease with status {}  for instance {}",
                        existingLease.getHolder().getStatus().name(),
                        existingLease.getHolder().getId());
                return existingLease.getHolder().getStatus();
            }
        }
        logger.debug("Returning the default instance status {} for instance {}",
                r.getStatus(), r.getId());
        return r.getStatus();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/cluster/JerseyReplicationClient;JerseyReplicationClient(EurekaServerConfig,ServerCodecs,String);;;public JerseyReplicationClient(EurekaServerConfig config, ServerCodecs serverCodecs, String serviceUrl) {
        super(serviceUrl);
        String name = getClass().getSimpleName() + ": " + serviceUrl + "apps/: ";

        try {
            String hostname;
            try {
                hostname = new URL(serviceUrl).getHost();
            } catch (MalformedURLException e) {
                hostname = serviceUrl;
            }

            String jerseyClientName = "Discovery-PeerNodeClient-" + hostname;
            EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                    .withClientName(jerseyClientName)
                    .withUserAgent("Java-EurekaClient-Replication")
                    .withEncoderWrapper(serverCodecs.getFullJsonCodec())
                    .withDecoderWrapper(serverCodecs.getFullJsonCodec())
                    .withConnectionTimeout(config.getPeerNodeConnectTimeoutMs())
                    .withReadTimeout(config.getPeerNodeReadTimeoutMs())
                    .withMaxConnectionsPerHost(config.getPeerNodeTotalConnectionsPerHost())
                    .withMaxTotalConnections(config.getPeerNodeTotalConnections())
                    .withConnectionIdleTimeout(config.getPeerNodeConnectionIdleTimeoutSeconds());

            if (serviceUrl.startsWith("https://") &&
                    "true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
                clientBuilder.withSystemSSLConfiguration();
            }
            jerseyClient = clientBuilder.build();
            jerseyApacheClient = jerseyClient.getClient();
            jerseyApacheClient.addFilter(new DynamicGZIPContentEncodingFilter(config));
        } catch (Throwable e) {
            throw new RuntimeException("Cannot Create new Replica Node :" + name, e);
        }

        String ip = null;
        try {
            ip = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            logger.warn("Cannot find localhost ip", e);
        }
        EurekaServerIdentity identity = new EurekaServerIdentity(ip);
        jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;EIPManager(EurekaServerConfig,EurekaClientConfig,PeerAwareInstanceRegistry,ApplicationInfoManager);;;@Inject
    public EIPManager(EurekaServerConfig serverConfig,
                      EurekaClientConfig clientConfig,
                      PeerAwareInstanceRegistry registry,
                      ApplicationInfoManager applicationInfoManager) {
        this.serverConfig = serverConfig;
        this.clientConfig = clientConfig;
        this.registry = registry;
        this.applicationInfoManager = applicationInfoManager;
        try {
            Monitors.registerObject(this);
        } catch (Throwable e) {
            logger.warn("Cannot register the JMX monitor for the InstanceRegistry", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;start();;;@PostConstruct
    public void start() throws Exception {
        handleEIPBinding();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;shutdown();;;@PreDestroy
    public void shutdown() throws Exception {
        timer.cancel();
        for (int i = 0; i < serverConfig.getEIPBindRebindRetries(); i++) {
            try {
                unbindEIP();
                break;
            } catch (Exception e) {
                logger.warn("Cannot unbind the EIP from the instance");
                Thread.sleep(1000);
            }
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;handleEIPBinding();;;private void handleEIPBinding() throws InterruptedException {
        int retries = serverConfig.getEIPBindRebindRetries();
        // Bind to EIP if needed
        for (int i = 0; i < retries; i++) {
            try {
                if (isEIPBound()) {
                    break;
                } else {
                    bindEIP();
                }
            } catch (Throwable e) {
                logger.error("Cannot bind to EIP", e);
                Thread.sleep(EIP_BIND_SLEEP_TIME_MS);
            }
        }
        // Schedule a timer which periodically checks for EIP binding.
        scheduleEIPBindTask();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;scheduleEIPBindTask();;;private void scheduleEIPBindTask() {
        timer.schedule(new TimerTask() {
                           @Override
                           public void run() {
                               try {
                                   // If the EIP is not bound, the registry could  be stale
                                   // First sync up the registry from the neighboring node before
                                   // trying to bind the EIP
                                   if (!isEIPBound()) {
                                       registry.clearRegistry();
                                       int count = registry.syncUp();
                                       registry.openForTraffic(applicationInfoManager, count);
                                   } else {
                                       // An EIP is already bound
                                       return;
                                   }
                                   bindEIP();
                               } catch (Throwable e) {
                                   logger.error("Could not bind to EIP", e);
                               }
                           }
                       }, serverConfig.getEIPBindingRetryIntervalMs(),
                serverConfig.getEIPBindingRetryIntervalMs());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;isEIPBound();;;public boolean isEIPBound() {
        InstanceInfo myInfo = applicationInfoManager.getInfo();
        String myInstanceId = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.instanceId);
        String myZone = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.availabilityZone);
        String myPublicIP = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.publicIpv4);

        Collection<String> candidateEIPs = getCandidateEIPs(myInstanceId, myZone);
        for (String eipEntry : candidateEIPs) {
            if (eipEntry.equals(myPublicIP)) {
                logger.info("My instance {} seems to be already associated with the public ip {}",
                        myInstanceId, myPublicIP);
                return true;
            }
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;bindEIP();;;public void bindEIP() {
        InstanceInfo myInfo = ApplicationInfoManager.getInstance().getInfo();
        String myInstanceId = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.instanceId);
        String myZone = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.availabilityZone);

        Collection<String> candidateEIPs = getCandidateEIPs(myInstanceId, myZone);

        AmazonEC2 ec2Service = getEC2Service();
        boolean isMyinstanceAssociatedWithEIP = false;
        Address selectedEIP = null;

        for (String eipEntry : candidateEIPs) {
            try {
                String associatedInstanceId;

                // Check with AWS, if this EIP is already been used by another instance
                DescribeAddressesRequest describeAddressRequest = new DescribeAddressesRequest().withPublicIps(eipEntry);
                DescribeAddressesResult result = ec2Service.describeAddresses(describeAddressRequest);
                if ((result.getAddresses() != null) && (!result.getAddresses().isEmpty())) {
                    Address eipAddress = result.getAddresses().get(0);
                    associatedInstanceId = eipAddress.getInstanceId();
                    // This EIP is not used by any other instance, hence mark it for selection if it is not
                    // already marked.
                    if (((associatedInstanceId == null) || (associatedInstanceId.isEmpty()))) {
                        if (selectedEIP == null) {
                            selectedEIP = eipAddress;
                        }
                    } else if (isMyinstanceAssociatedWithEIP = (associatedInstanceId.equals(myInstanceId))) {
                        // This EIP is associated with an instance, check if this is the same as the current instance.
                        // If it is the same, stop searching for an EIP as this instance is already associated with an
                        // EIP
                        selectedEIP = eipAddress;
                        break;
                    } else {
                        // The EIP is used by some other instance, hence skip it
                        logger.warn("The selected EIP {} is associated with another instance {} according to AWS," +
                                " hence skipping this", eipEntry, associatedInstanceId);
                    }
                }
            } catch (Throwable t) {
                logger.error("Failed to bind elastic IP: {} to {}", eipEntry, myInstanceId, t);
            }
        }
        if (null != selectedEIP) {
            String publicIp = selectedEIP.getPublicIp();
            // Only bind if the EIP is not already associated
            if (!isMyinstanceAssociatedWithEIP) {

                AssociateAddressRequest associateAddressRequest = new AssociateAddressRequest()
                        .withInstanceId(myInstanceId);

                String domain = selectedEIP.getDomain();
                if ("vpc".equals(domain)) {
                    associateAddressRequest.setAllocationId(selectedEIP.getAllocationId());
                } else {
                    associateAddressRequest.setPublicIp(publicIp);
                }

                ec2Service.associateAddress(associateAddressRequest);
                logger.info("\n\n\nAssociated {} running in zone: {} to elastic IP: {}", myInstanceId, myZone, publicIp);
            }
            logger.info("My instance {} seems to be already associated with the EIP {}", myInstanceId, publicIp);
        } else {
            logger.info("No EIP is free to be associated with this instance. Candidate EIPs are: {}", candidateEIPs);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;unbindEIP();;;public void unbindEIP() throws Exception {
        InstanceInfo myInfo = applicationInfoManager.getInfo();
        String myPublicIP = null;
        if (myInfo != null
                && myInfo.getDataCenterInfo().getName() == Name.Amazon) {
            myPublicIP = ((AmazonInfo) myInfo.getDataCenterInfo())
                    .get(MetaDataKey.publicIpv4);
            try {
                AmazonEC2 ec2Service = getEC2Service();
                DescribeAddressesRequest describeAddressRequest = new DescribeAddressesRequest()
                        .withPublicIps(myPublicIP);
                DescribeAddressesResult result = ec2Service.describeAddresses(describeAddressRequest);
                if ((result.getAddresses() != null) && (!result.getAddresses().isEmpty())) {
                    Address eipAddress = result.getAddresses().get(0);
                    DisassociateAddressRequest dissociateRequest = new DisassociateAddressRequest();
                    String domain = eipAddress.getDomain();
                    if ("vpc".equals(domain)) {
                        dissociateRequest.setAssociationId(eipAddress.getAssociationId());
                    } else {
                        dissociateRequest.setPublicIp(eipAddress.getPublicIp());
                    }

                    ec2Service.disassociateAddress(dissociateRequest);
                    logger.info("Dissociated the EIP {} from this instance", myPublicIP);
                }
            } catch (Throwable e) {
                throw new RuntimeException("Cannot dissociate address from this instance", e);
            }
        }

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;getCandidateEIPs(String,String);;;public Collection<String> getCandidateEIPs(String myInstanceId, String myZone) {

        if (myZone == null) {
            myZone = "us-east-1d";
        }

        Collection<String> eipCandidates = clientConfig.shouldUseDnsForFetchingServiceUrls()
                        ? getEIPsForZoneFromDNS(myZone)
                        : getEIPsForZoneFromConfig(myZone);

        if (eipCandidates == null || eipCandidates.size() == 0) {
            throw new RuntimeException("Could not get any elastic ips from the EIP pool for zone :" + myZone);
        }

        return eipCandidates;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;getEIPsForZoneFromConfig(String);;;private Collection<String> getEIPsForZoneFromConfig(String myZone) {
        List<String> ec2Urls = clientConfig.getEurekaServerServiceUrls(myZone);
        return getEIPsFromServiceUrls(ec2Urls);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;getEIPsFromServiceUrls(List<String>);;;private Collection<String> getEIPsFromServiceUrls(List<String> ec2Urls) {
        List<String> returnedUrls = new ArrayList<String>();
        String region = clientConfig.getRegion();
        String regionPhrase = "";
        if (!US_EAST_1.equals(region)) {
            regionPhrase = "." + region;
        }
        for (String cname : ec2Urls) {
            int beginIndex = cname.indexOf("ec2-") + 4;
            int endIndex = cname.indexOf(regionPhrase + ".compute");
            String eipStr = cname.substring(beginIndex, endIndex);
            String eip = eipStr.replaceAll("\\-", ".");
            returnedUrls.add(eip);
        }
        return returnedUrls;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;getEIPsForZoneFromDNS(String);;;private Collection<String> getEIPsForZoneFromDNS(String myZone) {
        List<String> ec2Urls = EndpointUtils.getServiceUrlsFromDNS(
                clientConfig,
                myZone,
                true,
                new EndpointUtils.InstanceInfoBasedUrlRandomizer(applicationInfoManager.getInfo())
        );
        return getEIPsFromServiceUrls(ec2Urls);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager;getEC2Service();;;private AmazonEC2 getEC2Service() {
        String aWSAccessId = serverConfig.getAWSAccessId();
        String aWSSecretKey = serverConfig.getAWSSecretKey();

        AmazonEC2 ec2Service;
        if (null != aWSAccessId && !"".equals(aWSAccessId)
                && null != aWSSecretKey && !"".equals(aWSSecretKey)) {
            ec2Service = new AmazonEC2Client(new BasicAWSCredentials(aWSAccessId, aWSSecretKey));
        } else {
            ec2Service = new AmazonEC2Client(new InstanceProfileCredentialsProvider());
        }

        String region = clientConfig.getRegion();
        region = region.trim().toLowerCase();
        ec2Service.setEndpoint("ec2." + region + ".amazonaws.com");
        return ec2Service;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;AwsAsgUtil(EurekaServerConfig,EurekaClientConfig,InstanceRegistry);;;@Inject
    public AwsAsgUtil(EurekaServerConfig serverConfig,
                      EurekaClientConfig clientConfig,
                      InstanceRegistry registry) {
        this.serverConfig = serverConfig;
        this.clientConfig = clientConfig;
        this.registry = registry;
        this.asgCache = CacheBuilder
                .newBuilder().initialCapacity(500)
                .expireAfterAccess(serverConfig.getASGCacheExpiryTimeoutMs(), TimeUnit.MILLISECONDS)
                .build(new CacheLoader<CacheKey, Boolean>() {
                    @Override
                    public Boolean load(CacheKey key) throws Exception {
                        return isASGEnabledinAWS(key.asgAccountId, key.asgName);
                    }
                    @Override
                    public ListenableFuture<Boolean> reload(final CacheKey key, Boolean oldValue) throws Exception {
                        return listeningCacheReloadExecutor.submit(new Callable<Boolean>() {
                            @Override
                            public Boolean call() throws Exception {
                                return load(key);
                            }
                        });
                    }
                });

        this.awsClient = getAmazonAutoScalingClient();
        this.awsClient.setEndpoint("autoscaling." + clientConfig.getRegion() + ".amazonaws.com");
        this.timer.schedule(getASGUpdateTask(),
                serverConfig.getASGUpdateIntervalMs(),
                serverConfig.getASGUpdateIntervalMs());

        try {
            Monitors.registerObject(this);
        } catch (Throwable e) {
            logger.warn("Cannot register the JMX monitor :", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;isASGEnabled(InstanceInfo);;;public boolean isASGEnabled(InstanceInfo instanceInfo) {
        CacheKey cacheKey = new CacheKey(getAccountId(instanceInfo, accountId), instanceInfo.getASGName());
        Boolean result = asgCache.getIfPresent(cacheKey);
        if (result != null) {
            return result;
        } else {
            logger.info("Cache value for asg {} does not exist yet, async refreshing.", cacheKey.asgName);
            // Only do an async refresh if it does not yet exist. Do this to refrain from calling aws api too much
            asgCache.refresh(cacheKey);
            return true;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;setStatus(String,boolean);;;public void setStatus(String asgName, boolean enabled) {
        String asgAccountId = getASGAccount(asgName);
        asgCache.put(new CacheKey(asgAccountId, asgName), enabled);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;isAddToLoadBalancerSuspended(String,String);;;private boolean isAddToLoadBalancerSuspended(String asgAccountId, String asgName) {
        AutoScalingGroup asg;
        if(asgAccountId == null || asgAccountId.equals(accountId)) {
            asg = retrieveAutoScalingGroup(asgName);
        } else {
            asg = retrieveAutoScalingGroupCrossAccount(asgAccountId, asgName);
        }
        if (asg == null) {
            logger.warn("The ASG information for {} could not be found. So returning false.", asgName);
            return false;
        }
        return isAddToLoadBalancerSuspended(asg);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;isAddToLoadBalancerSuspended(AutoScalingGroup);;;private boolean isAddToLoadBalancerSuspended(AutoScalingGroup asg) {
        List<SuspendedProcess> suspendedProcesses = asg.getSuspendedProcesses();
        for (SuspendedProcess process : suspendedProcesses) {
            if (PROP_ADD_TO_LOAD_BALANCER.equals(process.getProcessName())) {
                return true;
            }
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;retrieveAutoScalingGroup(String);;;private AutoScalingGroup retrieveAutoScalingGroup(String asgName) {
        if (Strings.isNullOrEmpty(asgName)) {
            logger.warn("null asgName specified, not attempting to retrieve AutoScalingGroup from AWS");
            return null;
        }
        // You can pass one name or a list of names in the request
        DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest()
                .withAutoScalingGroupNames(asgName);
        DescribeAutoScalingGroupsResult result = awsClient
                .describeAutoScalingGroups(request);
        List<AutoScalingGroup> asgs = result.getAutoScalingGroups();
        if (asgs.isEmpty()) {
            return null;
        } else {
            return asgs.get(0);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;initializeStsSession(String);;;private Credentials initializeStsSession(String asgAccount) {
        AWSSecurityTokenService sts = new AWSSecurityTokenServiceClient(new InstanceProfileCredentialsProvider());
        String region = clientConfig.getRegion();
        if (!region.equals("us-east-1")) {
            sts.setEndpoint("sts." + region + ".amazonaws.com");
        }

        String roleName = serverConfig.getListAutoScalingGroupsRoleName();
        String roleArn = "arn:aws:iam::" + asgAccount + ":role/" + roleName;

        AssumeRoleResult assumeRoleResult = sts.assumeRole(new AssumeRoleRequest()
                        .withRoleArn(roleArn)
                        .withRoleSessionName("sts-session-" + asgAccount)
        );

        return assumeRoleResult.getCredentials();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;retrieveAutoScalingGroupCrossAccount(String,String);;;private AutoScalingGroup retrieveAutoScalingGroupCrossAccount(String asgAccount, String asgName) {
        logger.debug("Getting cross account ASG for asgName: " + asgName + ", asgAccount: " + asgAccount);

        Credentials credentials = stsCredentials.get(asgAccount);

        if (credentials == null || credentials.getExpiration().getTime() < System.currentTimeMillis() + 1000) {
            stsCredentials.put(asgAccount, initializeStsSession(asgAccount));
            credentials = stsCredentials.get(asgAccount);
        }

        ClientConfiguration clientConfiguration = new ClientConfiguration()
                .withConnectionTimeout(serverConfig.getASGQueryTimeoutMs());

        AmazonAutoScaling autoScalingClient = new AmazonAutoScalingClient(
                new BasicSessionCredentials(
                        credentials.getAccessKeyId(),
                        credentials.getSecretAccessKey(),
                        credentials.getSessionToken()
                ),
                clientConfiguration
        );

        String region = clientConfig.getRegion();
        if (!region.equals("us-east-1")) {
            autoScalingClient.setEndpoint("autoscaling." + region + ".amazonaws.com");
        }

        DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest()
                .withAutoScalingGroupNames(asgName);
        DescribeAutoScalingGroupsResult result = autoScalingClient.describeAutoScalingGroups(request);
        List<AutoScalingGroup> asgs = result.getAutoScalingGroups();
        if (asgs.isEmpty()) {
            return null;
        } else {
            return asgs.get(0);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;isASGEnabledinAWS(String,String);;;private Boolean isASGEnabledinAWS(String asgAccountid, String asgName) {
        try {
            Stopwatch t = this.loadASGInfoTimer.start();
            boolean returnValue = !isAddToLoadBalancerSuspended(asgAccountid, asgName);
            t.stop();
            return returnValue;
        } catch (Throwable e) {
            logger.error("Could not get ASG information from AWS: ", e);
        }
        return Boolean.TRUE;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getNumberofElementsinASGCache();;;@com.netflix.servo.annotations.Monitor(name = "numOfElementsinASGCache",
            description = "Number of elements in the ASG Cache", type = DataSourceType.GAUGE)
    public long getNumberofElementsinASGCache() {
        return asgCache.size();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getNumberofASGQueries();;;@com.netflix.servo.annotations.Monitor(name = "numOfASGQueries",
            description = "Number of queries made to AWS to retrieve ASG information", type = DataSourceType.COUNTER)
    public long getNumberofASGQueries() {
        return asgCache.stats().loadCount();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getNumberofASGQueryFailures();;;@com.netflix.servo.annotations.Monitor(name = "numOfASGQueryFailures",
            description = "Number of queries made to AWS to retrieve ASG information and that failed",
            type = DataSourceType.COUNTER)
    public long getNumberofASGQueryFailures() {
        return asgCache.stats().loadExceptionCount();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getASGUpdateTask();;;private TimerTask getASGUpdateTask() {
        return new TimerTask() {

            @Override
            public void run() {
                try {
                    // First get the active ASG names
                    Set<CacheKey> cacheKeys = getCacheKeys();
                    logger.debug("Trying to  refresh the keys for {}", Arrays.toString(cacheKeys.toArray()));
                    for (CacheKey key : cacheKeys) {
                        try {
                            asgCache.refresh(key);
                        } catch (Throwable e) {
                            logger.error("Error updating the ASG cache for {}", key, e);
                        }

                    }

                } catch (Throwable e) {
                    logger.error("Error updating the ASG cache", e);
                }

            }

        };
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getCacheKeys();;;private Set<CacheKey> getCacheKeys() {
        Set<CacheKey> cacheKeys = new HashSet<CacheKey>();
        Applications apps = registry.getApplicationsFromLocalRegionOnly();
        for (Application app : apps.getRegisteredApplications()) {
            for (InstanceInfo instanceInfo : app.getInstances()) {
                String localAccountId = getAccountId(instanceInfo, accountId);
                String asgName = instanceInfo.getASGName();
                if (asgName != null) {
                    CacheKey key = new CacheKey(localAccountId, asgName);
                    cacheKeys.add(key);
                }
            }
        }

        return cacheKeys;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getASGAccount(String);;;private String getASGAccount(String asgName) {
        Applications apps = registry.getApplicationsFromLocalRegionOnly();

        for (Application app : apps.getRegisteredApplications()) {
            for (InstanceInfo instanceInfo : app.getInstances()) {
                String thisAsgName = instanceInfo.getASGName();
                if (thisAsgName != null && thisAsgName.equals(asgName)) {
                    String localAccountId = getAccountId(instanceInfo, null);
                    if (localAccountId != null) {
                        return localAccountId;
                    }
                }
            }
        }

        logger.info("Couldn't get the ASG account for {}, using the default accountId instead", asgName);
        return accountId;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getAccountId(InstanceInfo,String);;;private String getAccountId(InstanceInfo instanceInfo, String fallbackId) {
        String localAccountId = null;

        DataCenterInfo dataCenterInfo = instanceInfo.getDataCenterInfo();
        if (dataCenterInfo instanceof AmazonInfo) {
            localAccountId = ((AmazonInfo) dataCenterInfo).get(MetaDataKey.accountId);
        }

        return localAccountId == null ? fallbackId : localAccountId;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getAmazonAutoScalingClient();;;private AmazonAutoScaling getAmazonAutoScalingClient() {
        String aWSAccessId = serverConfig.getAWSAccessId();
        String aWSSecretKey = serverConfig.getAWSSecretKey();
        ClientConfiguration clientConfiguration = new ClientConfiguration()
                .withConnectionTimeout(serverConfig.getASGQueryTimeoutMs());

        if (null != aWSAccessId && !"".equals(aWSAccessId) && null != aWSSecretKey && !"".equals(aWSSecretKey)) {
            return new AmazonAutoScalingClient(
                    new BasicAWSCredentials(aWSAccessId, aWSSecretKey),
                    clientConfiguration);
        } else {
            return new AmazonAutoScalingClient(
                    new InstanceProfileCredentialsProvider(),
                    clientConfiguration);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;getAccountId();;;private static String getAccountId() {
        InstanceInfo myInfo = ApplicationInfoManager.getInstance().getInfo();
        return ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.accountId);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;CacheKey(String,String);;;CacheKey(String asgAccountId, String asgName) {
            this.asgAccountId = asgAccountId;
            this.asgName = asgName;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;toString();;;@Override
        public String toString() {
            return "CacheKey{" +
                    "asgName='" + asgName + '\'' +
                    ", asgAccountId='" + asgAccountId + '\'' +
                    '}';
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;equals(Object);;;@Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof CacheKey)) return false;

            CacheKey cacheKey = (CacheKey) o;

            if (asgAccountId != null ? !asgAccountId.equals(cacheKey.asgAccountId) : cacheKey.asgAccountId != null)
                return false;
            if (asgName != null ? !asgName.equals(cacheKey.asgName) : cacheKey.asgName != null) return false;

            return true;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil;hashCode();;;@Override
        public int hashCode() {
            int result = asgName != null ? asgName.hashCode() : 0;
            result = 31 * result + (asgAccountId != null ? asgAccountId.hashCode() : 0);
            return result;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil;StatusUtil(EurekaServerContext);;;public StatusUtil(EurekaServerContext server) {
        this.myAppName = server.getApplicationInfoManager().getInfo().getAppName();
        this.registry = server.getRegistry();
        this.peerEurekaNodes = server.getPeerEurekaNodes();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil;getStatusInfo();;;public StatusInfo getStatusInfo() {
        StatusInfo.Builder builder = StatusInfo.Builder.newBuilder();
        // Add application level status
        StringBuilder upReplicas = new StringBuilder();
        StringBuilder downReplicas = new StringBuilder();

        StringBuilder replicaHostNames = new StringBuilder();

        for (PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
            if (replicaHostNames.length() > 0) {
                replicaHostNames.append(", ");
            }
            replicaHostNames.append(node.getServiceUrl());
            if (isReplicaAvailable(myAppName, node.getServiceUrl())) {
                upReplicas.append(node.getServiceUrl()).append(',');
            } else {
                downReplicas.append(node.getServiceUrl()).append(',');
            }
        }

        builder.add("registered-replicas", replicaHostNames.toString());
        builder.add("available-replicas", upReplicas.toString());
        builder.add("unavailable-replicas", downReplicas.toString());

        return builder.build();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil;isReplicaAvailable(String,String);;;private boolean isReplicaAvailable(String myAppName, String url) {

        try {
            String givenHostName = new URI(url).getHost();
            Application app = registry.getApplication(myAppName, false);
            for (InstanceInfo info : app.getInstances()) {
                if (info.getHostName().equals(givenHostName)) {
                    return true;
                }
            }
            givenHostName = new URI(url).getHost();
        } catch (Throwable e) {
            logger.error("Could not determine if the replica is available ", e);
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getFullJsonCodec();;;CodecWrapper getFullJsonCodec();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getCompactJsonCodec();;;CodecWrapper getCompactJsonCodec();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getFullXmlCodec();;;CodecWrapper getFullXmlCodec();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getCompactXmlCodecr();;;CodecWrapper getCompactXmlCodecr();
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getEncoder(Key.KeyType,boolean);;;EncoderWrapper getEncoder(Key.KeyType keyType, boolean compact);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerCodecs;getEncoder(Key.KeyType,EurekaAccept);;;EncoderWrapper getEncoder(Key.KeyType keyType, EurekaAccept eurekaAccept);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource;AbstractVIPResource(EurekaServerContext);;;AbstractVIPResource(EurekaServerContext server) {
        this.registry = server.getRegistry();
        this.responseCache = registry.getResponseCache();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource;getVipResponse(String,String,String,EurekaAccept,Key.EntityType);;;protected Response getVipResponse(String version, String entityName, String acceptHeader,
                                      EurekaAccept eurekaAccept, Key.EntityType entityType) {
        if (!registry.shouldAllowAccess(false)) {
            return Response.status(Response.Status.FORBIDDEN).build();
        }
        CurrentRequestVersion.set(Version.toEnum(version));
        Key.KeyType keyType = Key.KeyType.JSON;
        if (acceptHeader == null || !acceptHeader.contains("json")) {
            keyType = Key.KeyType.XML;
        }

        Key cacheKey = new Key(
                entityType,
                entityName,
                keyType,
                CurrentRequestVersion.get(),
                eurekaAccept
        );

        String payLoad = responseCache.get(cacheKey);

        if (payLoad != null) {
            logger.debug("Found: {}", entityName);
            return Response.ok(payLoad).build();
        } else {
            logger.debug("Not Found: {}", entityName);
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource;StatusResource(EurekaServerContext);;;@Inject
    StatusResource(EurekaServerContext server) {
        this.statusUtil = new StatusUtil(server);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource;StatusResource();;;public StatusResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource;InstanceResource(ApplicationResource,String,EurekaServerConfig,PeerAwareInstanceRegistry);;;InstanceResource(ApplicationResource app, String id, EurekaServerConfig serverConfig, PeerAwareInstanceRegistry registry) {
        this.app = app;
        this.id = id;
        this.serverConfig = serverConfig;
        this.registry = registry;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;toEnum(String);            throw new RuntimeException(
                    "Cannot find ASG enum for the given string " + s);;;            throw new RuntimeException("Cannot find ASG enum for the given string " + s);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;ASGResource(EurekaServerContext);;;@Inject
    ASGResource(EurekaServerContext eurekaServer) {
        this.registry = eurekaServer.getRegistry();
        if (registry instanceof AwsInstanceRegistry) {
            this.awsAsgUtil = ((AwsInstanceRegistry) registry).getAwsAsgUtil();
        } else {
            this.awsAsgUtil = null;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;ASGResource();;;public ASGResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;statusUpdate(String,String,String);;;        if (awsAsgUtil == null) {
            return Response.status(400).build();
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource;statusUpdate(String,String,String);            logger.info("Trying to update ASG Status for ASG {} to {}",
                    asgName, newStatus);;;            logger.info("Trying to update ASG Status for ASG {} to {}", asgName, newStatus);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/CurrentRequestVersion;CurrentRequestVersion();;;private CurrentRequestVersion() {
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/CurrentRequestVersion;get();;;public static Version get() {
        return CURRENT_REQ_VERSION.get();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/CurrentRequestVersion;set(Version);;;public static void set(Version version) {
        CURRENT_REQ_VERSION.set(version);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/InstancesResource;InstancesResource(EurekaServerContext);;;@Inject
    InstancesResource(EurekaServerContext server) {
        this.registry = server.getRegistry();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/InstancesResource;InstancesResource();;;public InstancesResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getFullJson(EurekaServerConfig);;;private static CodecWrapper getFullJson(EurekaServerConfig serverConfig) {
        CodecWrapper codec = CodecWrappers.getCodec(serverConfig.getJsonCodecName());
        return codec == null ? CodecWrappers.getCodec(CodecWrappers.LegacyJacksonJson.class) : codec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getFullXml(EurekaServerConfig);;;private static CodecWrapper getFullXml(EurekaServerConfig serverConfig) {
        CodecWrapper codec = CodecWrappers.getCodec(serverConfig.getXmlCodecName());
        return codec == null ? CodecWrappers.getCodec(CodecWrappers.XStreamXml.class) : codec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;DefaultServerCodecs(EurekaServerConfig);;;@Inject
    public DefaultServerCodecs(EurekaServerConfig serverConfig) {
        this (
                getFullJson(serverConfig),
                CodecWrappers.getCodec(CodecWrappers.JacksonJsonMini.class),
                getFullXml(serverConfig),
                CodecWrappers.getCodec(CodecWrappers.JacksonXmlMini.class)
        );
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;DefaultServerCodecs(CodecWrapper,CodecWrapper,CodecWrapper,CodecWrapper);;;protected DefaultServerCodecs(CodecWrapper fullJsonCodec,
                                  CodecWrapper compactJsonCodec,
                                  CodecWrapper fullXmlCodec,
                                  CodecWrapper compactXmlCodec) {
        this.fullJsonCodec = fullJsonCodec;
        this.compactJsonCodec = compactJsonCodec;
        this.fullXmlCodec = fullXmlCodec;
        this.compactXmlCodec = compactXmlCodec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getFullJsonCodec();;;@Override
    public CodecWrapper getFullJsonCodec() {
        return fullJsonCodec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getCompactJsonCodec();;;@Override
    public CodecWrapper getCompactJsonCodec() {
        return compactJsonCodec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getFullXmlCodec();;;@Override
    public CodecWrapper getFullXmlCodec() {
        return fullXmlCodec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getCompactXmlCodecr();;;@Override
    public CodecWrapper getCompactXmlCodecr() {
        return compactXmlCodec;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getEncoder(Key.KeyType,boolean);;;@Override
    public EncoderWrapper getEncoder(Key.KeyType keyType, boolean compact) {
        switch (keyType) {
            case JSON:
                return compact ? compactJsonCodec : fullJsonCodec;
            case XML:
            default:
                return compact ? compactXmlCodec : fullXmlCodec;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;getEncoder(Key.KeyType,EurekaAccept);;;@Override
    public EncoderWrapper getEncoder(Key.KeyType keyType, EurekaAccept eurekaAccept) {
        switch (eurekaAccept) {
            case compact:
                return getEncoder(keyType, true);
            case full:
            default:
                return getEncoder(keyType, false);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;builder();;;public static Builder builder() {
        return new Builder();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;Builder();;;protected Builder() {}
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;withFullJsonCodec(CodecWrapper);;;public Builder withFullJsonCodec(CodecWrapper fullJsonCodec) {
            this.fullJsonCodec = fullJsonCodec;
            return this;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;withCompactJsonCodec(CodecWrapper);;;public Builder withCompactJsonCodec(CodecWrapper compactJsonCodec) {
            this.compactJsonCodec = compactJsonCodec;
            return this;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;withFullXmlCodec(CodecWrapper);;;public Builder withFullXmlCodec(CodecWrapper fullXmlCodec) {
            this.fullXmlCodec = fullXmlCodec;
            return this;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;withCompactXmlCodec(CodecWrapper);;;public Builder withCompactXmlCodec(CodecWrapper compactXmlEncoder) {
            this.compactXmlCodec = compactXmlEncoder;
            return this;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;withEurekaServerConfig(EurekaServerConfig);;;public Builder withEurekaServerConfig(EurekaServerConfig config) {
            fullJsonCodec = CodecWrappers.getCodec(config.getJsonCodecName());
            fullXmlCodec = CodecWrappers.getCodec(config.getXmlCodecName());
            return this;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/DefaultServerCodecs;build();;;public ServerCodecs build() {
            if (fullJsonCodec == null) {
                fullJsonCodec = CodecWrappers.getCodec(CodecWrappers.LegacyJacksonJson.class);
            }

            if (compactJsonCodec == null) {
                compactJsonCodec = CodecWrappers.getCodec(CodecWrappers.JacksonJsonMini.class);
            }

            if (fullXmlCodec == null) {
                fullXmlCodec = CodecWrappers.getCodec(CodecWrappers.XStreamXml.class);
            }

            if (compactXmlCodec == null) {
                compactXmlCodec = CodecWrappers.getCodec(CodecWrappers.JacksonXmlMini.class);
            }

            return new DefaultServerCodecs(
                    fullJsonCodec,
                    compactJsonCodec,
                    fullXmlCodec,
                    compactXmlCodec
            );
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource;ApplicationResource(String,EurekaServerConfig,PeerAwareInstanceRegistry);;;ApplicationResource(String appName,
                        EurekaServerConfig serverConfig,
                        PeerAwareInstanceRegistry registry) {
        this.appName = appName.toUpperCase();
        this.serverConfig = serverConfig;
        this.registry = registry;
        this.responseCache = registry.getResponseCache();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerInfoResource;ServerInfoResource(EurekaServerContext);;;@Inject
    ServerInfoResource(EurekaServerContext server) {
        this.registry = server.getRegistry();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/ServerInfoResource;ServerInfoResource();;;public ServerInfoResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/VIPResource;VIPResource(EurekaServerContext);;;@Inject
    VIPResource(EurekaServerContext server) {
        super(server);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/VIPResource;VIPResource();;;public VIPResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;PeerReplicationResource(EurekaServerContext);;;@Inject
    PeerReplicationResource(EurekaServerContext server) {
        this.serverConfig = server.getServerConfig();
        this.registry = server.getRegistry();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource;PeerReplicationResource();;;public PeerReplicationResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/SecureVIPResource;SecureVIPResource(EurekaServerContext);;;@Inject
    SecureVIPResource(EurekaServerContext server) {
        super(server);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/main/java/com/netflix/eureka/resources/SecureVIPResource;SecureVIPResource();;;public SecureVIPResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/AbstractTester;setUp();                "http://localhost:" + mockRemoteEurekaServer.getPort() +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);;;                "http://localhost:" + mockRemoteEurekaServer.getPort() + MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/AbstractTester;TestPeerAwareInstanceRegistry(EurekaServerConfig,EurekaClientConfig,ServerCodecs,EurekaClient);;;public TestPeerAwareInstanceRegistry(EurekaServerConfig serverConfig,
                                             EurekaClientConfig clientConfig,
                                             ServerCodecs serverCodecs,
                                             EurekaClient eurekaClient) {
            super(serverConfig, clientConfig, serverCodecs, eurekaClient);
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/RemoteRegionSoftDependencyTest;setUp();;;@Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        doReturn(10).when(serverConfig).getWaitTimeInMsWhenSyncEmpty();
        doReturn(1).when(serverConfig).getRegistrySyncRetries();
        doReturn(1l).when(serverConfig).getRegistrySyncRetryWaitMs();
        registry.syncUp();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/ResponseCacheTest;setUp();;;@Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        // create a new registry that is sync'ed up with the default registry in the AbstractTester,
        // but disable transparent fetch to the remote for gets
        EurekaServerConfig serverConfig = spy(new DefaultEurekaServerConfig());
        doReturn(true).when(serverConfig).disableTransparentFallbackToOtherRegion();

        testRegistry = new PeerAwareInstanceRegistryImpl(
                serverConfig,
                new DefaultEurekaClientConfig(),
                new DefaultServerCodecs(serverConfig),
                client
        );
        testRegistry.init(serverContext.getPeerEurekaNodes());
        testRegistry.syncUp();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/ResponseCacheTest;testInvalidate();;;@Test
    public void testInvalidate() throws Exception {
        ResponseCacheImpl cache = (ResponseCacheImpl) testRegistry.getResponseCache();
        Key key = new Key(Key.EntityType.Application, REMOTE_REGION_APP_NAME,
                Key.KeyType.JSON, Version.V1, EurekaAccept.full);
        String response = cache.get(key, false);
        Assert.assertNotNull("Cache get returned null.", response);

        testRegistry.cancel(REMOTE_REGION_APP_NAME, REMOTE_REGION_INSTANCE_1_HOSTNAME, true);
        Assert.assertNull("Cache after invalidate did not return null for write view.", cache.get(key, true));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/ResponseCacheTest;testInvalidateWithRemoteRegion();;;@Test
    public void testInvalidateWithRemoteRegion() throws Exception {
        ResponseCacheImpl cache = (ResponseCacheImpl) testRegistry.getResponseCache();
        Key key = new Key(
                Key.EntityType.Application,
                REMOTE_REGION_APP_NAME,
                Key.KeyType.JSON, Version.V1, EurekaAccept.full, new String[]{REMOTE_REGION}
        );

        Assert.assertNotNull("Cache get returned null.", cache.get(key, false));

        testRegistry.cancel(REMOTE_REGION_APP_NAME, REMOTE_REGION_INSTANCE_1_HOSTNAME, true);
        Assert.assertNull("Cache after invalidate did not return null.", cache.get(key));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/ResponseCacheTest;testInvalidateWithMultipleRemoteRegions();;;@Test
    public void testInvalidateWithMultipleRemoteRegions() throws Exception {
        ResponseCacheImpl cache = (ResponseCacheImpl) testRegistry.getResponseCache();
        Key key1 = new Key(
                Key.EntityType.Application,
                REMOTE_REGION_APP_NAME,
                Key.KeyType.JSON, Version.V1, EurekaAccept.full, new String[]{REMOTE_REGION, "myregion2"}
        );
        Key key2 = new Key(
                Key.EntityType.Application,
                REMOTE_REGION_APP_NAME,
                Key.KeyType.JSON, Version.V1, EurekaAccept.full, new String[]{REMOTE_REGION}
        );

        Assert.assertNotNull("Cache get returned null.", cache.get(key1, false));
        Assert.assertNotNull("Cache get returned null.", cache.get(key2, false));

        testRegistry.cancel(REMOTE_REGION_APP_NAME, REMOTE_REGION_INSTANCE_1_HOSTNAME, true);

        Assert.assertNull("Cache after invalidate did not return null.", cache.get(key1, true));
        Assert.assertNull("Cache after invalidate did not return null.", cache.get(key2, true));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testSoftDepRemoteUp();;;@Test
    public void testSoftDepRemoteUp() throws Exception {
        Assert.assertTrue("Registry access disallowed when remote region is UP.", registry.shouldAllowAccess(false));
        Assert.assertTrue("Registry access disallowed when remote region is UP.", registry.shouldAllowAccess(true));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testGetAppsFromAllRemoteRegions();;;@Test
    public void testGetAppsFromAllRemoteRegions() throws Exception {
        Applications apps = registry.getApplicationsFromAllRemoteRegions();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from remote regions do not match", 1, registeredApplications.size());
        Application app = registeredApplications.iterator().next();
        Assert.assertEquals("Added app did not return from remote registry", REMOTE_REGION_APP_NAME, app.getName());
        Assert.assertEquals("Returned app did not have the instance", 1, app.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testGetAppsDeltaFromAllRemoteRegions();;;@Test
    public void testGetAppsDeltaFromAllRemoteRegions() throws Exception {
        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME)); /// local delta
        waitForDeltaToBeRetrieved();
        Applications appDelta = registry.getApplicationDeltasFromMultipleRegions(null);
        List<Application> registeredApplications = appDelta.getRegisteredApplications();
        Assert.assertEquals("Apps size from remote regions do not match", 2, registeredApplications.size());
        Application localApplication = null;
        Application remApplication = null;
        for (Application registeredApplication : registeredApplications) {
            if (registeredApplication.getName().equalsIgnoreCase(LOCAL_REGION_APP_NAME)) {
                localApplication = registeredApplication;
            }
            if (registeredApplication.getName().equalsIgnoreCase(REMOTE_REGION_APP_NAME)) {
                remApplication = registeredApplication;
            }
        }
        Assert.assertNotNull("Did not find local registry app in delta.", localApplication);
        Assert.assertEquals("Local registry app instance count in delta not as expected.", 1,
                localApplication.getInstances().size());
        Assert.assertNotNull("Did not find remote registry app in delta", remApplication);
        Assert.assertEquals("Remote registry app instance count  in delta not as expected.", 1,
                remApplication.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testAppsHashCodeAfterRefresh();;;@Test
    public void testAppsHashCodeAfterRefresh() throws InterruptedException {
        Assert.assertEquals("UP_1_", registry.getApplicationsFromAllRemoteRegions().getAppsHashCode());

        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME));
        waitForDeltaToBeRetrieved();

        Assert.assertEquals("UP_2_", registry.getApplicationsFromAllRemoteRegions().getAppsHashCode());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;waitForDeltaToBeRetrieved();;;private void waitForDeltaToBeRetrieved() throws InterruptedException {
        int count = 0;
        System.out.println("Sleeping up to 35 seconds to let the remote registry fetch delta.");
        while (count++ < 35 && !mockRemoteEurekaServer.isSentDelta()) {
            Thread.sleep(1000);
        }
        if (!mockRemoteEurekaServer.isSentDelta()) {
            System.out.println("Waited for 35 seconds but remote server did not send delta");
        }
        // Wait 2 seconds more to be sure the delta was processed
        Thread.sleep(2000);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testGetAppsFromLocalRegionOnly();;;@Test
    public void testGetAppsFromLocalRegionOnly() throws Exception {
        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME));

        Applications apps = registry.getApplicationsFromLocalRegionOnly();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from local region do not match", 1, registeredApplications.size());
        Application app = registeredApplications.iterator().next();
        Assert.assertEquals("Added app did not return from local registry", LOCAL_REGION_APP_NAME, app.getName());
        Assert.assertEquals("Returned app did not have the instance", 1, app.getInstances().size());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testGetAppsFromBothRegions();;;@Test
    public void testGetAppsFromBothRegions() throws Exception {
        registerInstanceLocally(createRemoteInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME));
        registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME));

        Applications apps = registry.getApplicationsFromAllRemoteRegions();
        List<Application> registeredApplications = apps.getRegisteredApplications();
        Assert.assertEquals("Apps size from both regions do not match", 2, registeredApplications.size());
        Application locaApplication = null;
        Application remApplication = null;
        for (Application registeredApplication : registeredApplications) {
            if (registeredApplication.getName().equalsIgnoreCase(LOCAL_REGION_APP_NAME)) {
                locaApplication = registeredApplication;
            }
            if (registeredApplication.getName().equalsIgnoreCase(REMOTE_REGION_APP_NAME)) {
                remApplication = registeredApplication;
            }
        }
        Assert.assertNotNull("Did not find local registry app", locaApplication);
        Assert.assertEquals("Local registry app instance count not as expected.", 1,
                locaApplication.getInstances().size());
        Assert.assertNotNull("Did not find remote registry app", remApplication);
        Assert.assertEquals("Remote registry app instance count not as expected.", 2,
                remApplication.getInstances().size());

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;testStatusOverrideSetAndRemoval();;;@Test
    public void testStatusOverrideSetAndRemoval() throws Exception {
        // Regular registration first
        InstanceInfo myInstance = createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME);
        registerInstanceLocally(myInstance);
        verifyLocalInstanceStatus(myInstance.getId(), InstanceStatus.UP);

        // Override status
        boolean statusResult = registry.statusUpdate(LOCAL_REGION_APP_NAME, myInstance.getId(), InstanceStatus.OUT_OF_SERVICE, "0", false);
        assertThat("Couldn't override instance status", statusResult, is(true));
        verifyLocalInstanceStatus(myInstance.getId(), InstanceStatus.OUT_OF_SERVICE);

        // Register again with status UP (this is what health check is doing)
        registry.register(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME), 10000000, false);
        verifyLocalInstanceStatus(myInstance.getId(), InstanceStatus.OUT_OF_SERVICE);

        // Now remove override
        statusResult = registry.deleteStatusOverride(LOCAL_REGION_APP_NAME, myInstance.getId(), InstanceStatus.DOWN, "0", false);
        assertThat("Couldn't remove status override", statusResult, is(true));
        verifyLocalInstanceStatus(myInstance.getId(), InstanceStatus.DOWN);

        // Register again with status UP (this is what health check is doing)
        registry.register(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME), 10000000, false);
        verifyLocalInstanceStatus(myInstance.getId(), InstanceStatus.UP);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;verifyLocalInstanceStatus(String,InstanceStatus);;;private void verifyLocalInstanceStatus(String id, InstanceStatus status) {
        InstanceInfo instanceInfo = registry.getApplication(LOCAL_REGION_APP_NAME).getByInstanceId(id);
        assertThat("InstanceInfo with id " + id + " not found", instanceInfo, is(notNullValue()));
        assertThat("Invalid InstanceInfo state", instanceInfo.getStatus(), is(equalTo(status)));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/registry/InstanceRegistryTest;registerInstanceLocally(InstanceInfo);;;private void registerInstanceLocally(InstanceInfo remoteInstance) {
        registry.register(remoteInstance, 10000000, false);
        registeredApps.add(new Pair<String, String>(LOCAL_REGION_APP_NAME, LOCAL_REGION_APP_NAME));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/util/AwsAsgUtilTest;setUp();;;@Before
    public void setUp() throws Exception {
        ConfigurationManager.getConfigInstance().setProperty("eureka.awsAccessId", "fakeId");
        ConfigurationManager.getConfigInstance().setProperty("eureka.awsSecretKey", "fakeKey");

        AmazonInfo dataCenterInfo = mock(AmazonInfo.class);

        EurekaServerConfig serverConfig = new DefaultEurekaServerConfig();
        InstanceInfo.Builder builder = InstanceInfo.Builder.newBuilder();
        builder.setIPAddr("10.10.101.00");
        builder.setHostName("fakeHost");
        builder.setAppName("fake-" + UUID.randomUUID());
        builder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build());
        builder.setDataCenterInfo(dataCenterInfo);

        applicationInfoManager = new ApplicationInfoManager(new MyDataCenterInstanceConfig(), builder.build());
        DefaultEurekaClientConfig clientConfig = new DefaultEurekaClientConfig();
        // setup config in advance, used in initialize converter
        client = mock(DiscoveryClient.class);
        registry = mock(PeerAwareInstanceRegistry.class);

        awsAsgUtil = spy(new AwsAsgUtil(serverConfig, clientConfig, registry));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/util/AwsAsgUtilTest;tearDown();;;@After
    public void tearDown() throws Exception {
        ConfigurationManager.getConfigInstance().clear();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-core/src/test/java/com/netflix/eureka/util/AwsAsgUtilTest;testAsyncLoadingFromCache();;;@Test
    public void testAsyncLoadingFromCache() {

    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/EurekaInjectorCreator;createInjector(boolean);;;public static LifecycleInjector createInjector(boolean embedded) {
        try {
            return Karyon.createInjector(
                    createInjectorBuilder(embedded).build()
            );
        } catch (Exception e) {
            logger.error("Failed to create the injector", e);
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/EurekaInjectorCreator;createInjectorBuilder(boolean);;;private static DefaultKaryonConfiguration.Builder<?> createInjectorBuilder(boolean embedded) {
        return  ArchaiusKaryonConfiguration.builder()
                .withConfigName(CONFIG_NAME)
                .disable(GovernatorFeatures.SHUTDOWN_ON_ERROR)
                .addModules(
                        new LocalEurekaServerModule(),  // server
                        new ArchaiusModule(),
                        new ProvisionDebugModule(),
                        new JerseyServletModule() {
                            @Override
                            protected void configureServlets() {
                                filter("/*").through(StatusFilter.class);
                                filter("/*").through(ServerRequestAuthFilter.class);
                                filter("/v2/apps", "/v2/apps/*").through(GzipEncodingEnforcingFilter.class);
                                //filter("/*").through(RateLimitingFilter.class);  // enable if needed

                                // REST
                                Map<String, String> params = new HashMap<String, String>();
                                params.put(PackagesResourceConfig.PROPERTY_PACKAGES, "com.sun.jersey");
                                params.put(PackagesResourceConfig.PROPERTY_PACKAGES, "com.netflix");
                                params.put("com.sun.jersey.config.property.WebPageContentRegex", "/(flex|images|js|css|jsp)/.*");
                                params.put("com.sun.jersey.spi.container.ContainerRequestFilters", "com.sun.jersey.api.container.filter.GZIPContentEncodingFilter");
                                params.put("com.sun.jersey.spi.container.ContainerResponseFilters", "com.sun.jersey.api.container.filter.GZIPContentEncodingFilter");
                                filter("/*").through(GuiceContainer.class, params);
                                bind(GuiceContainer.class).asEagerSingleton();
                            }
                        },
                        embedded ? new JettyModule() : new Bootstrap.NullModule()
                );
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/EurekaContextListener;contextInitialized(ServletContextEvent);;;@Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {
        super.contextInitialized(servletContextEvent);
        ServletContext sc = servletContextEvent.getServletContext();
        sc.setAttribute(EurekaServerContext.class.getName(), serverContext);

        // Copy registry from neighboring eureka node
        int registryCount = serverContext.getRegistry().syncUp();
        serverContext.getRegistry().openForTraffic(serverContext.getApplicationInfoManager(), registryCount);

        // Register all monitoring statistics.
        EurekaMonitors.registerAllStats();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/EurekaContextListener;contextDestroyed(ServletContextEvent);;;public void contextDestroyed(ServletContextEvent servletContextEvent) {
        EurekaMonitors.shutdown();

        ServletContext sc = servletContextEvent.getServletContext();
        sc.removeAttribute(EurekaServerContext.class.getName());
        super.contextDestroyed(servletContextEvent);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/EurekaContextListener;createInjector();;;@Override
    protected LifecycleInjector createInjector() {
        // For backward compatibility
        JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);
        XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);

        LifecycleInjector injector = EurekaInjectorCreator.createInjector(false);
        serverContext = injector.getInstance(EurekaServerContext.class);
        return injector;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/guice/EurekaServerModule;configure();;;@Override
    protected void configure() {
        install(new EurekaModule());

        bind(EurekaServerConfig.class).to(DefaultEurekaServerConfig.class).in(Scopes.SINGLETON);
        bind(PeerEurekaNodes.class).in(Scopes.SINGLETON);

        bind(EIPManager.class).asEagerSingleton();

        // registry and interfaces
        bind(AwsInstanceRegistry.class).asEagerSingleton();
        bind(InstanceRegistry.class).to(AwsInstanceRegistry.class);
        bind(AbstractInstanceRegistry.class).to(AwsInstanceRegistry.class);
        bind(PeerAwareInstanceRegistry.class).to(AwsInstanceRegistry.class);

        bind(ServerCodecs.class).to(DefaultServerCodecs.class).in(Scopes.SINGLETON);

        bind(EurekaServerContext.class).to(DefaultEurekaServerContext.class).in(Scopes.SINGLETON);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-server-karyon3/src/main/java/com/netflix/eureka/guice/LocalEurekaServerModule;configure();;;@Override
    protected void configure() {
        // don't install the client module, bind the specific components for local use
        bind(ApplicationInfoManager.class).asEagerSingleton();

        bind(EurekaInstanceConfig.class).toProvider(MyDataCenterInstanceConfigProvider.class).in(Scopes.SINGLETON);
        bind(EurekaClientConfig.class).toProvider(DefaultEurekaClientConfigProvider.class).in(Scopes.SINGLETON);

        bind(InstanceInfo.class).toProvider(EurekaConfigBasedInstanceInfoProvider.class).in(Scopes.SINGLETON);
        bind(EurekaClient.class).to(DiscoveryClient.class).in(Scopes.SINGLETON);

        // server bindings
        bind(EurekaServerConfig.class).to(DefaultEurekaServerConfig.class).in(Scopes.SINGLETON);
        bind(PeerEurekaNodes.class).in(Scopes.SINGLETON);

        // registry and interfaces
        bind(PeerAwareInstanceRegistryImpl.class).asEagerSingleton();
        bind(InstanceRegistry.class).to(PeerAwareInstanceRegistryImpl.class);
        bind(AbstractInstanceRegistry.class).to(PeerAwareInstanceRegistryImpl.class);
        bind(PeerAwareInstanceRegistry.class).to(PeerAwareInstanceRegistryImpl.class);

        bind(ServerCodecs.class).to(DefaultServerCodecs.class).in(Scopes.SINGLETON);

        bind(EurekaServerContext.class).to(DefaultEurekaServerContext.class).in(Scopes.SINGLETON);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager;ApplicationInfoManager(EurekaInstanceConfig);;;public ApplicationInfoManager(EurekaInstanceConfig config) {
        this(config, new EurekaConfigBasedInstanceInfoProvider(config).get());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager;initComponent(EurekaInstanceConfig);            throw new RuntimeException(
                    "Failed to initialize ApplicationInfoManager", e);;;            throw new RuntimeException("Failed to initialize ApplicationInfoManager", e);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/AbstractAzToRegionMapper;AbstractAzToRegionMapper(EurekaClientConfig);;;protected AbstractAzToRegionMapper(EurekaClientConfig clientConfig) {
        this.clientConfig = clientConfig;
        populateDefaultAZToRegionMap();
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/DNSBasedAzToRegionMapper;DNSBasedAzToRegionMapper(EurekaClientConfig);;;public DNSBasedAzToRegionMapper(EurekaClientConfig clientConfig) {
        super(clientConfig);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;timedGetDiscoveryServiceUrls(String);;;private List<String> timedGetDiscoveryServiceUrls(String zone) {
        boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();
        if (shouldUseDns) {
            Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();
            List<String> result = EndpointUtils.getServiceUrlsFromDNS(
                    clientConfig, zone, clientConfig.shouldPreferSameZoneEureka(), urlRandomizer);
            t.stop();
            return result;
        }
        return EndpointUtils.getServiceUrlsFromConfig(clientConfig, zone, clientConfig.shouldPreferSameZoneEureka());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient;getEC2DiscoveryUrlsFromZone(String,EndpointUtils.DiscoveryUrlType);;;@Deprecated
    public static Set<String> getEC2DiscoveryUrlsFromZone(String dnsName,
                                                          EndpointUtils.DiscoveryUrlType type) {
        return EndpointUtils.getEC2DiscoveryUrlsFromZone(dnsName, type);
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClientImpl;MyDefaultApacheHttpClient4Config();;;
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver;DnsResolver();;;private DnsResolver() {
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver;getDirContext();;;public static DirContext getDirContext() {
        Hashtable<String, String> env = new Hashtable<String, String>();
        env.put(JAVA_NAMING_FACTORY_INITIAL, DNS_NAMING_FACTORY);
        env.put(JAVA_NAMING_PROVIDER_URL, DNS_PROVIDER_URL);

        try {
            return new InitialDirContext(env);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot get dir context for some reason", e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver;resolve(String);;;public static String resolve(String originalHost) {
        String currentHost = originalHost;
        if (isLocalOrIp(currentHost)) {
            return originalHost;
        }
        try {
            String targetHost = null;
            do {
                Attributes attrs = dirContext.getAttributes(currentHost, new String[]{A_RECORD_TYPE, CNAME_RECORD_TYPE});
                Attribute attr = attrs.get(A_RECORD_TYPE);
                if (attr != null) {
                    targetHost = attr.get().toString();
                }
                attr = attrs.get(CNAME_RECORD_TYPE);
                if (attr != null) {
                    currentHost = attr.get().toString();
                } else {
                    targetHost = currentHost;
                }

            } while (targetHost == null);
            return targetHost;
        } catch (NamingException e) {
            logger.warn("Cannot resolve discovery server address " + currentHost + "; returning original value " + originalHost, e);
            return originalHost;
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver;isLocalOrIp(String);;;private static boolean isLocalOrIp(String currentHost) {
        if ("localhost".equals(currentHost)) {
            return true;
        }
        if ("127.0.0.1".equals(currentHost)) {
            return true;
        }
        return false;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver;getCNamesFromTxtRecord(String);;;public static Set<String> getCNamesFromTxtRecord(String discoveryDnsName) throws NamingException {
        Attributes attrs = dirContext.getAttributes(discoveryDnsName, new String[]{TXT_RECORD_TYPE});
        Attribute attr = attrs.get(TXT_RECORD_TYPE);
        String txtRecord = null;
        if (attr != null) {
            txtRecord = attr.get().toString();
        }

        Set<String> cnamesSet = new TreeSet<String>();
        if (txtRecord == null || txtRecord.trim().isEmpty()) {
            return cnamesSet;
        }
        String[] cnames = txtRecord.split(" ");
        Collections.addAll(cnamesSet, cnames);
        return cnamesSet;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;randomize(List<String>);;;void randomize(List<String> urlList);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;InstanceInfoBasedUrlRandomizer(InstanceInfo);;;public InstanceInfoBasedUrlRandomizer(InstanceInfo instanceInfo) {
            this.instanceInfo = instanceInfo;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;randomize(List<String>);;;@Override
        public void randomize(List<String> urlList) {
            int listSize = 0;
            if (urlList != null) {
                listSize = urlList.size();
            }
            if ((instanceInfo == null) || (listSize == 0)) {
                return;
            }
            // Find the hashcode of the instance hostname and use it to find an entry
            // and then arrange the rest of the entries after this entry.
            int instanceHashcode = instanceInfo.getHostName().hashCode();
            if (instanceHashcode < 0) {
                instanceHashcode = instanceHashcode * -1;
            }
            int backupInstance = instanceHashcode % listSize;
            for (int i = 0; i < backupInstance; i++) {
                String zone = urlList.remove(0);
                urlList.add(zone);
            }
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getDiscoveryServiceUrls(EurekaClientConfig,String,ServiceUrlRandomizer);;;public static List<String> getDiscoveryServiceUrls(EurekaClientConfig clientConfig, String zone, ServiceUrlRandomizer randomizer) {
        boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();
        if (shouldUseDns) {
            return getServiceUrlsFromDNS(clientConfig, zone, clientConfig.shouldPreferSameZoneEureka(), randomizer);
        }
        return getServiceUrlsFromConfig(clientConfig, zone, clientConfig.shouldPreferSameZoneEureka());
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getServiceUrlsFromDNS(EurekaClientConfig,String,boolean,ServiceUrlRandomizer);;;public static List<String> getServiceUrlsFromDNS(EurekaClientConfig clientConfig, String instanceZone, boolean preferSameZone, ServiceUrlRandomizer randomizer) {
        String region = getRegion(clientConfig);
        // Get zone-specific DNS names for the given region so that we can get a
        // list of available zones
        Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(clientConfig, region);
        Set<String> availableZones = zoneDnsNamesMap.keySet();
        List<String> zones = new ArrayList<String>(availableZones);
        if (zones.isEmpty()) {
            throw new RuntimeException("No available zones configured for the instanceZone " + instanceZone);
        }
        int zoneIndex = 0;
        boolean zoneFound = false;
        for (String zone : zones) {
            logger.debug("Checking if the instance zone {} is the same as the zone from DNS {}", instanceZone, zone);
            if (preferSameZone) {
                if (instanceZone.equalsIgnoreCase(zone)) {
                    zoneFound = true;
                }
            } else {
                if (!instanceZone.equalsIgnoreCase(zone)) {
                    zoneFound = true;
                }
            }
            if (zoneFound) {
                Object[] args = {zones, instanceZone, zoneIndex};
                logger.debug("The zone index from the list {} that matches the instance zone {} is {}", args);
                break;
            }
            zoneIndex++;
        }
        if (zoneIndex >= zones.size()) {
            logger.warn("No match for the zone {} in the list of available zones {}",
                    instanceZone, Arrays.toString(zones.toArray()));
        } else {
            // Rearrange the zones with the instance zone first
            for (int i = 0; i < zoneIndex; i++) {
                String zone = zones.remove(0);
                zones.add(zone);
            }
        }

        // Now get the eureka urls for all the zones in the order and return it
        List<String> serviceUrls = new ArrayList<String>();
        for (String zone : zones) {
            for (String zoneCname : zoneDnsNamesMap.get(zone)) {
                List<String> ec2Urls = new ArrayList<String>(getEC2DiscoveryUrlsFromZone(zoneCname, DiscoveryUrlType.CNAME));
                // Rearrange the list to distribute the load in case of
                // multiple servers
                if (ec2Urls.size() > 1) {
                    randomizer.randomize(ec2Urls);
                }
                for (String ec2Url : ec2Urls) {
                    String serviceUrl = "http://" + ec2Url + ":"
                            + clientConfig.getEurekaServerPort()
                            + "/" + clientConfig.getEurekaServerURLContext()
                            + "/";
                    logger.debug("The EC2 url is {}", serviceUrl);
                    serviceUrls.add(serviceUrl);
                }
            }
        }
        // Rearrange the fail over server list to distribute the load
        String primaryServiceUrl = serviceUrls.remove(0);
        randomizer.randomize(serviceUrls);
        serviceUrls.add(0, primaryServiceUrl);

        logger.debug("This client will talk to the following serviceUrls in order : {} ",
                Arrays.toString(serviceUrls.toArray()));
        return serviceUrls;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getServiceUrlsFromConfig(EurekaClientConfig,String,boolean);;;public static List<String> getServiceUrlsFromConfig(EurekaClientConfig clientConfig, String instanceZone, boolean preferSameZone) {
        List<String> orderedUrls = new ArrayList<String>();
        String region = getRegion(clientConfig);
        String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
        if (availZones == null || availZones.length == 0) {
            availZones = new String[1];
            availZones[0] = DEFAULT_ZONE;
        }
        logger.debug("The availability zone for the given region {} are {}", region, Arrays.toString(availZones));
        int myZoneOffset = getZoneOffset(instanceZone, preferSameZone, availZones);

        List<String> serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[myZoneOffset]);
        if (serviceUrls != null) {
            orderedUrls.addAll(serviceUrls);
        }
        int currentOffset = myZoneOffset == (availZones.length - 1) ? 0 : (myZoneOffset + 1);
        while (currentOffset != myZoneOffset) {
            serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[currentOffset]);
            if (serviceUrls != null) {
                orderedUrls.addAll(serviceUrls);
            }
            if (currentOffset == (availZones.length - 1)) {
                currentOffset = 0;
            } else {
                currentOffset++;
            }
        }

        if (orderedUrls.size() < 1) {
            throw new IllegalArgumentException("DiscoveryClient: invalid serviceUrl specified!");
        }
        return orderedUrls;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getEC2DiscoveryUrlsFromZone(String,DiscoveryUrlType);;;public static Set<String> getEC2DiscoveryUrlsFromZone(String dnsName, DiscoveryUrlType type) {
        Set<String> eipsForZone = null;
        try {
            dnsName = "txt." + dnsName;
            logger.debug("The zone url to be looked up is {} :", dnsName);
            Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);
            for (String ec2Url : ec2UrlsForZone) {
                logger.debug("The eureka url for the dns name {} is {}", dnsName, ec2Url);
                ec2UrlsForZone.add(ec2Url);
            }
            if (DiscoveryUrlType.CNAME.equals(type)) {
                return ec2UrlsForZone;
            }
            eipsForZone = new TreeSet<String>();
            for (String cname : ec2UrlsForZone) {
                String[] tokens = cname.split("\\.");
                String ec2HostName = tokens[0];
                String[] ips = ec2HostName.split("-");
                StringBuilder eipBuffer = new StringBuilder();
                for (int ipCtr = 1; ipCtr < 5; ipCtr++) {
                    eipBuffer.append(ips[ipCtr]);
                    if (ipCtr < 4) {
                        eipBuffer.append(".");
                    }
                }
                eipsForZone.add(eipBuffer.toString());
            }
            logger.debug("The EIPS for {} is {} :", dnsName, eipsForZone);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot get cnames bound to the region:" + dnsName, e);
        }
        return eipsForZone;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getZoneBasedDiscoveryUrlsFromRegion(EurekaClientConfig,String);;;public static Map<String, List<String>> getZoneBasedDiscoveryUrlsFromRegion(EurekaClientConfig clientConfig, String region) {
        String discoveryDnsName = null;
        try {
            discoveryDnsName = "txt." + region + "." + clientConfig.getEurekaServerDNSName();

            logger.debug("The region url to be looked up is {} :", discoveryDnsName);
            Set<String> zoneCnamesForRegion = new TreeSet<String>(DnsResolver.getCNamesFromTxtRecord(discoveryDnsName));
            Map<String, List<String>> zoneCnameMapForRegion = new TreeMap<String, List<String>>();
            for (String zoneCname : zoneCnamesForRegion) {
                String zone = null;
                if (isEC2Url(zoneCname)) {
                    throw new RuntimeException(
                            "Cannot find the right DNS entry for "
                                    + discoveryDnsName
                                    + ". "
                                    + "Expected mapping of the format <aws_zone>.<domain_name>");
                } else {
                    String[] cnameTokens = zoneCname.split("\\.");
                    zone = cnameTokens[0];
                    logger.debug("The zoneName mapped to region {} is {}", region, zone);
                }
                List<String> zoneCnamesSet = zoneCnameMapForRegion.get(zone);
                if (zoneCnamesSet == null) {
                    zoneCnamesSet = new ArrayList<String>();
                    zoneCnameMapForRegion.put(zone, zoneCnamesSet);
                }
                zoneCnamesSet.add(zoneCname);
            }
            return zoneCnameMapForRegion;
        } catch (Throwable e) {
            throw new RuntimeException("Cannot get cnames bound to the region:" + discoveryDnsName, e);
        }
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getRegion(EurekaClientConfig);;;public static String getRegion(EurekaClientConfig clientConfig) {
        String region = clientConfig.getRegion();
        if (region == null) {
            region = DEFAULT_REGION;
        }
        region = region.trim().toLowerCase();
        return region;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;isEC2Url(String);;;private static boolean isEC2Url(String zoneCname) {
        return zoneCname.startsWith("ec2");
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils;getZoneOffset(String,boolean,String[]);;;private static int getZoneOffset(String myZone, boolean preferSameZone, String[] availZones) {
        for (int i = 0; i < availZones.length; i++) {
            if (myZone != null && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone)) {
                return i;
            }
        }
        logger.warn("DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}," +
                " preferSameZone- {}. Defaulting to " + availZones[0], myZone, preferSameZone);

        return 0;
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;testRegisterNewWrapper();;;@Test
    public void testRegisterNewWrapper() {
        Assert.assertNull(CodecWrappers.getEncoder(testWrapperName));
        Assert.assertNull(CodecWrappers.getDecoder(testWrapperName));

        CodecWrappers.registerWrapper(new TestWrapper());

        Assert.assertNotNull(CodecWrappers.getEncoder(testWrapperName));
        Assert.assertNotNull(CodecWrappers.getDecoder(testWrapperName));
    }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;decode(String,Class<T>);;;@Override
        public <T> T decode(String textValue, Class<T> type) throws IOException {
            return null;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;decode(InputStream,Class<T>);;;@Override
        public <T> T decode(InputStream inputStream, Class<T> type) throws IOException {
            return null;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;encode(T);;;@Override
        public <T> String encode(T object) throws IOException {
            return null;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;encode(T,OutputStream);;;@Override
        public <T> void encode(T object, OutputStream outputStream) throws IOException {

        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;codecName();;;@Override
        public String codecName() {
            return testWrapperName;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d;/eureka-client/src/test/java/com/netflix/discovery/converters/wrappers/CodecWrappersTest;support(MediaType);;;@Override
        public boolean support(MediaType mediaType) {
            return false;
        }
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e;/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig;getExperimental(String);;;String getExperimental(String name);
/home/paper219/Desktop/analysis/fullsample//projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e;/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig;getExperimental(String);;;@Override
    public String getExperimental(String name) {
        return configInstance.getStringProperty(namespace + "experimental." + name, null).get();
    }
