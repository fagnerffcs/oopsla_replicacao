/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_0dadaea_ddcda44/rev_0dadaea-ddcda44/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java;<<<<<<< MINE
    .getInstance().getConfiguration();
    private static final AmazonAutoScaling client = getAmazonAutoScalingClient();
=======
            .getInstance().getConfiguration();
    private static final AmazonAutoScaling client = new AmazonAutoScalingClient(
            new BasicAWSCredentials(eurekaConfig.getAWSAccessId(),
                    eurekaConfig.getAWSSecretKey()),
            new ClientConfiguration().withConnectionTimeout(eurekaConfig
                    .getASGQueryTimeoutMs()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java;<<<<<<< MINE
        discoveryJerseyClient = EurekaJerseyClient.createSSLJerseyClient(
                EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),
                EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),
                EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),
                EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),
                EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),
                EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),
                EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());
=======
        if (remoteRegionURL.getProtocol().equals("http")) {
            discoveryJerseyClient = EurekaJerseyClient.createJerseyClient(
                    EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds());
        } else {
            discoveryJerseyClient = EurekaJerseyClient.createSSLJerseyClient(
                    EUREKA_SERVER_CONFIG.getRemoteRegionConnectTimeoutMs(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionReadTimeoutMs(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnectionsPerHost(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTotalConnections(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionConnectionIdleTimeoutSeconds(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTrustStore(),
                    EUREKA_SERVER_CONFIG.getRemoteRegionTrustStorePassword());
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
    public Application getApplication(String appName,
                                      boolean includeRemoteRegion) {
=======
    public Application getApplication(String appName, boolean includeRemoteRegion) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            for (RemoteRegionRegistry remoteRegistry : this.remoteRegionRegistryList) {
                Application application = remoteRegistry
                        .getApplication(appName);
=======
            for (RemoteRegionRegistry remoteRegistry : this.regionNameVSRemoteRegistry.values()) {
                Application application = remoteRegistry.getApplication(appName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
        return this.getApplications(true);
=======
        return this.getApplications(true); // keeping the current behavior of not mixing two regions in the same app.
    }

    /**
     * Returns applications including instances from all remote regions. <br/>
     * Same as calling {@link #getApplicationsFromMultipleRegions(String[])} with a <code>null</code> argument.
     */
    public Applications getApplicationsFromAllRemoteRegions() {
        return getApplicationsFromMultipleRegions(null);
    }

    /**
     * Returns applications including instances from local region only. <br/>
     * Same as calling {@link #getApplicationsFromMultipleRegions(String[])} with an empty array.
     */
    public Applications getApplicationsFromLocalRegionOnly() {
        return getApplicationsFromMultipleRegions(new String[0]);
    }

    /**
     * This method will return applications with instances from all passed remote regions as well as the current region.
     * Thus, this gives a union view of instances from multiple regions. <br/>
     * The application instances for which this union will be done can be restricted to the names returned by
     * {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} for every region. In case, there is no whitelist
     * defined for a region, this method will also look for a global whitelist by passing <code>null</code> to the
     * method {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} <br/>
     * If you are not selectively requesting for a remote region, use {@link #getApplicationsFromAllRemoteRegions()}
     * or {@link #getApplicationsFromLocalRegionOnly()}
     *
     * @param remoteRegions The remote regions for which the instances are to be queried. The instances may be limited
     *                      by a whitelist as explained above. If <code>null</code> all remote regions are included.
     *                      If empty list then no remote region is included.
     *
     * @return The applications with instances from the passed remote regions as well as local region. The instances
     * from remote regions can be only for certain whitelisted apps as explained above.
     */
    public Applications getApplicationsFromMultipleRegions(@Nullable String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        if (includeRemoteRegion) {
            GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS.increment();
        } else {
            GET_ALL_CACHE_MISS.increment();
        }
        Applications apps = new Applications();
        apps.setVersion(1L);
        for (Entry<String, Map<String, Lease<InstanceInfo>>> entry : _registry.entrySet()) {
            Application app = null;

            if (entry.getValue() != null) {
                for (Entry<String, Lease<InstanceInfo>> stringLeaseEntry : entry.getValue().entrySet()) {
                    Lease<InstanceInfo> lease = stringLeaseEntry.getValue();
                    if (app == null) {
                        app = new Application(lease.getHolder().getAppName());
                    }
                    app.addInstance(decorateInstanceInfo(lease));
                }
            }
            if (app != null) {
                apps.addApplication(app);
            }
        }
        if (includeRemoteRegion) {
            for (String remoteRegion : remoteRegions) {
                RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                if (null != remoteRegistry) {
                    Applications remoteApps = remoteRegistry.getApplications();
                    for (Application application : remoteApps.getRegisteredApplications()) {
                        if (shouldFetchFromRemoteRegistry(application.getName(), remoteRegion)) {
                            Application appInstanceTillNow = apps.getRegisteredApplications(application.getName());
                            if (appInstanceTillNow == null) {
                                appInstanceTillNow = new Application(application.getName());
                                apps.addApplication(appInstanceTillNow);
                            }
                            for (InstanceInfo instanceInfo : application.getInstances()) {
                                appInstanceTillNow.addInstance(instanceInfo);
                            }
                        }
                    }
                }
            }
        }
        apps.setAppsHashCode(apps.getReconcileHashCode());
        return apps;
    }

    /**
     * This method will return an application with instances from all passed remote regions as well as the current region.
     * Thus, this gives a union view of instances from multiple regions. <br/>
     *
     * The remote regions from where the instances will be chosen can further be restricted if this application does not
     * appear in the whitelist specified for the region as returned by
     * {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} for a region. In case, there is no whitelist
     * defined for a region, this method will also look for a global whitelist by passing <code>null</code> to the
     * method {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} <br/>
     *
     * @param remoteRegions The remote regions for which the instances are to be queried. The instances may be limited
     *                      by a whitelist as explained above. If <code>null</code> all remote regions are included.
     *                      If empty list then no remote region is included.
     *
     * @return The instances from the passed remote regions as well as local region. The instances
     * from remote regions can be further be restricted as explained above. <code>null</code> if the application does
     * not exist locally or in remote regions.
     */
    @Nullable
    public Application getApplicationFromMultipleRegions(String appName, @Nullable String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        Application app = null;

        Map<String, Lease<InstanceInfo>> leaseMap = _registry.get(appName);

        if (leaseMap != null && leaseMap.size() > 0) {
            for (Entry<String, Lease<InstanceInfo>> entry : leaseMap.entrySet()) {
                if (app == null) {
                    app = new Application(appName);
                }
                app.addInstance(decorateInstanceInfo(entry.getValue()));
            }
        }

        if (includeRemoteRegion) {
            for (String remoteRegion : remoteRegions) {
                if (shouldFetchFromRemoteRegistry(appName, remoteRegion)) {
                    RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                    if (null != remoteRegistry) {
                        Application remoteApp = remoteRegistry.getApplication(appName);
                        if (null != remoteApp) {
                            if (null == app) {
                                app = new Application(appName);
                            }
                            for (InstanceInfo instanceInfo : remoteApp.getInstances()) {
                                app.addInstance(instanceInfo);
                            }
                        }
                    }
                }
            }
        }
        return app;
    }

    private boolean shouldFetchFromRemoteRegistry(String appName, String remoteRegion) {
        Set<String> whiteList = eurekaConfig.getRemoteRegionAppWhitelist(remoteRegion);
        if (null == whiteList) {
            whiteList = eurekaConfig.getRemoteRegionAppWhitelist(null); // see global whitelist.
        }
        return null == whiteList || whiteList.contains(appName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            for (RemoteRegionRegistry remoteRegistry : this.remoteRegionRegistryList) {
=======
            for (RemoteRegionRegistry remoteRegistry : this.regionNameVSRemoteRegistry.values()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            for (RemoteRegionRegistry remoteRegistry : this.remoteRegionRegistryList) {
                Applications applications = remoteRegistry
                        .getApplicationDeltas();
                for (Application application : applications
                        .getRegisteredApplications()) {
                    Application appInLocalRegistry = allAppsInLocalRegion
                            .getRegisteredApplications(application.getName());
=======
            for (RemoteRegionRegistry remoteRegistry : this.regionNameVSRemoteRegistry.values()) {
                Applications applications = remoteRegistry.getApplicationDeltas();
                for (Application application : applications.getRegisteredApplications()) {
                    Application appInLocalRegistry = allAppsInLocalRegion.getRegisteredApplications(application.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
     * Gets the application delta also including instances from the passed remote regions, with the instances from the
     * local region. <br/>
     *
     * The remote regions from where the instances will be chosen can further be restricted if this application does not
     * appear in the whitelist specified for the region as returned by
     * {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} for a region. In case, there is no whitelist
     * defined for a region, this method will also look for a global whitelist by passing <code>null</code> to the
     * method {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} <br/>
     *
     * @param remoteRegions The remote regions for which the instances are to be queried. The instances may be limited
     *                      by a whitelist as explained above. If <code>null</code> all remote regions are included.
     *                      If empty list then no remote region is included.
     *
     * @return The delta with instances from the passed remote regions as well as local region. The instances
     * from remote regions can be further be restricted as explained above. <code>null</code> if the application does
     * not exist locally or in remote regions.
     */
    public Applications getApplicationDeltasFromMultipleRegions(String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        if (includeRemoteRegion) {
            GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS_DELTA.increment();
        } else {
            GET_ALL_CACHE_MISS_DELTA.increment();
        }

        Applications apps = new Applications();
        apps.setVersion(ResponseCache.getVersionDeltaWithRegions().get());
        Map<String, Application> applicationInstancesMap = new HashMap<String, Application>();
        try {
            write.lock();
            Iterator<RecentlyChangedItem> iter = this.recentlyChangedQueue.iterator();
            logger.debug("The number of elements in the delta queue is :" + this.recentlyChangedQueue.size());
            while (iter.hasNext()) {
                Lease<InstanceInfo> lease = iter.next().getLeaseInfo();
                InstanceInfo instanceInfo = lease.getHolder();
                Object[] args = { instanceInfo.getId(),
                                  instanceInfo.getStatus().name(),
                                  instanceInfo.getActionType().name() };
                logger.debug(
                        "The instance id %s is found with status %s and actiontype %s",
                        args);
                Application app = applicationInstancesMap.get(instanceInfo
                        .getAppName());
                if (app == null) {
                    app = new Application(instanceInfo.getAppName());
                    applicationInstancesMap.put(instanceInfo.getAppName(), app);
                    apps.addApplication(app);
                }
                app.addInstance(decorateInstanceInfo(lease));
            }

            if (includeRemoteRegion) {
                for (String remoteRegion : remoteRegions) {
                    RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                    if (null != remoteRegistry) {
                        Applications remoteAppsDelta = remoteRegistry.getApplicationDeltas();
                        if (null != remoteAppsDelta) {
                            for (Application application : remoteAppsDelta.getRegisteredApplications()) {
                                if (shouldFetchFromRemoteRegistry(application.getName(), remoteRegion)) {
                                    Application appInstanceTillNow = apps.getRegisteredApplications(application.getName());
                                    if (appInstanceTillNow == null) {
                                        appInstanceTillNow = new Application(application.getName());
                                        apps.addApplication(appInstanceTillNow);
                                    }
                                    for (InstanceInfo instanceInfo : application.getInstances()) {
                                        appInstanceTillNow.addInstance(instanceInfo);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Applications allApps = getApplicationsFromMultipleRegions(remoteRegions);
            apps.setAppsHashCode(allApps.getReconcileHashCode());
            return apps;
        } finally {
            write.unlock();
        }
    }

    /**
=======
     * Gets the application delta also including instances from the passed remote regions, with the instances from the
     * local region. <br/>
     *
     * The remote regions from where the instances will be chosen can further be restricted if this application does not
     * appear in the whitelist specified for the region as returned by
     * {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} for a region. In case, there is no whitelist
     * defined for a region, this method will also look for a global whitelist by passing <code>null</code> to the
     * method {@link EurekaServerConfig#getRemoteRegionAppWhitelist(String)} <br/>
     *
     * @param remoteRegions The remote regions for which the instances are to be queried. The instances may be limited
     *                      by a whitelist as explained above. If <code>null</code> all remote regions are included.
     *                      If empty list then no remote region is included.
     *
     * @return The delta with instances from the passed remote regions as well as local region. The instances
     * from remote regions can be further be restricted as explained above. <code>null</code> if the application does
     * not exist locally or in remote regions.
     */
    public Applications getApplicationDeltasFromMultipleRegions(String[] remoteRegions) {
        if (null == remoteRegions) {
            remoteRegions = allKnownRemoteRegions; // null means all remote regions.
        }

        boolean includeRemoteRegion = remoteRegions.length != 0;

        if (includeRemoteRegion) {
            GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS_DELTA.increment();
        } else {
            GET_ALL_CACHE_MISS_DELTA.increment();
        }

        Applications apps = new Applications();
        apps.setVersion(ResponseCache.getVersionDelta().get());
        Map<String, Application> applicationInstancesMap = new HashMap<String, Application>();
        try {
            write.lock();
            Iterator<RecentlyChangedItem> iter = this.recentlyChangedQueue.iterator();
            logger.debug("The number of elements in the delta queue is :" + this.recentlyChangedQueue.size());
            while (iter.hasNext()) {
                Lease<InstanceInfo> lease = iter.next().getLeaseInfo();
                InstanceInfo instanceInfo = lease.getHolder();
                Object[] args = { instanceInfo.getId(),
                                  instanceInfo.getStatus().name(),
                                  instanceInfo.getActionType().name() };
                logger.debug(
                        "The instance id %s is found with status %s and actiontype %s",
                        args);
                Application app = applicationInstancesMap.get(instanceInfo
                        .getAppName());
                if (app == null) {
                    app = new Application(instanceInfo.getAppName());
                    applicationInstancesMap.put(instanceInfo.getAppName(), app);
                    apps.addApplication(app);
                }
                app.addInstance(decorateInstanceInfo(lease));
            }

            if (includeRemoteRegion) {
                for (String remoteRegion : remoteRegions) {
                    RemoteRegionRegistry remoteRegistry = regionNameVSRemoteRegistry.get(remoteRegion);
                    if (null != remoteRegistry) {
                        Applications remoteAppsDelta = remoteRegistry.getApplicationDeltas();
                        if (null != remoteAppsDelta) {
                            for (Application application : remoteAppsDelta.getRegisteredApplications()) {
                                if (shouldFetchFromRemoteRegistry(application.getName(), remoteRegion)) {
                                    Application appInstanceTillNow = apps.getRegisteredApplications(application.getName());
                                    if (appInstanceTillNow == null) {
                                        appInstanceTillNow = new Application(application.getName());
                                        apps.addApplication(appInstanceTillNow);
                                    }
                                    for (InstanceInfo instanceInfo : application.getInstances()) {
                                        appInstanceTillNow.addInstance(instanceInfo);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Applications allApps = getApplicationsFromMultipleRegions(remoteRegions);
            apps.setAppsHashCode(allApps.getReconcileHashCode());
            return apps;
        } finally {
            write.unlock();
        }
    }

    /**
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
     * @param includeRemoteRegion
=======
     * @param includeRemoteRegions
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            for (RemoteRegionRegistry remoteRegistry : this.remoteRegionRegistryList) {
=======
            for (RemoteRegionRegistry remoteRegistry : this.regionNameVSRemoteRegistry.values()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
     * @param includeRemoteRegion
=======
     * @param includeRemoteRegions
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            for (RemoteRegionRegistry remoteRegistry : this.remoteRegionRegistryList) {
=======
            for (RemoteRegionRegistry remoteRegistry : this.regionNameVSRemoteRegistry.values()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            String[] remoteRegionUrls = eurekaConfig.getRemoteRegionUrls();
            if (remoteRegionUrls != null) {
                for (String remoteRegionUrl : remoteRegionUrls) {
                    RemoteRegionRegistry remoteRegionRegistry = new RemoteRegionRegistry(
                            new URL(remoteRegionUrl));
                    remoteRegionRegistryList.add(remoteRegionRegistry);
=======
            Map<String, String> remoteRegionUrlsWithName = eurekaConfig.getRemoteRegionUrlsWithName();
            if (remoteRegionUrlsWithName != null) {
                allKnownRemoteRegions = new String[remoteRegionUrlsWithName.size()];
                int remoteRegionArrayIndex = 0;
                for (Entry<String, String> remoteRegionUrlWithName : remoteRegionUrlsWithName.entrySet()) {
                    RemoteRegionRegistry remoteRegionRegistry = new RemoteRegionRegistry(new URL(remoteRegionUrlWithName.getValue()));
                    regionNameVSRemoteRegistry.put(remoteRegionUrlWithName.getKey(), remoteRegionRegistry);
                    allKnownRemoteRegions[remoteRegionArrayIndex++] = remoteRegionUrlWithName.getKey();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig.java;<<<<<<< MINE
     * Get the time interval for which the registryinformation need to be fetched from the remote region.
=======
     * Returns a list of applications that must be retrieved from the passed remote region. <br/>
     * This list can be <code>null</code> which means that no filtering should be applied on the applications
     * for this region i.e. all applications must be returned. <br/>
     * A global whitelist can also be configured which can be used when no setting is available for a region, such a
     * whitelist can be obtained by passing <code>null</code> to this method.
     *
     * @param regionName Name of the region for which the application whitelist is to be retrieved. If null a global
     *                   setting is returned.
     *
     * @return A set of application names which must be retrieved from the passed region. If <code>null</code> all
     * applications must be retrieved.
     */
    @Nullable
    Set<String> getRemoteRegionAppWhitelist(@Nullable String regionName);

    /**
     * Get the time interval for which the registry information need to be fetched from the remote region.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/util/EurekaMonitors.java;<<<<<<< MINE
    RENEW("renewCounter", "Number of total renews seen since startup"), CANCEL(
            "cancelCounter", "Number of total cancels seen since startup"), GET_ALL_CACHE_MISS(
            "getAllCacheMissCounter",
            "Number of total registery queries seen since startup"), GET_ALL_CACHE_MISS_DELTA(
            "getAllCacheMissDeltaCounter",
            "Number of total registery queries for delta seen since startup"), GET_ALL_DELTA(
            "getAllDeltaCounter", "Number of total deltas since startup"), GET_ALL(
            "getAllCounter",
            "Number of total registry queries seen since startup"), REGISTER(
            "registerCounter", "Number of total registers seen since startup"), EXPIRED(
            "expiredCounter", "Number of total expired leases since startup"), STATUS_UPDATE(
            "statusUpdateCounter",
            "Number of total admin status updates since startup"), CANCEL_NOT_FOUND(
            "cancelNotFoundCounter",
            "Number of total cancel requests on non-existing instance since startup"), RENEW_NOT_FOUND(
            "renewNotFoundexpiredCounter",
            "Number of total renew on non-existing instance since startup"), REJECTED_REPLICATIONS(
            "numOfRejectedReplications",
            "Number of replications rejected because of full queue"), FAILED_REPLICATIONS(
            "numOfFailedReplications",
            "Number of failed replications - likely from timeouts");
=======
    RENEW("renewCounter", "Number of total renews seen since startup"),
    CANCEL("cancelCounter", "Number of total cancels seen since startup"),
    GET_ALL_CACHE_MISS("getAllCacheMissCounter", "Number of total registery queries seen since startup"),
    GET_ALL_CACHE_MISS_DELTA("getAllCacheMissDeltaCounter", "Number of total registery queries for delta seen since startup"),
    GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS("getAllWithRemoteRegionCacheMissCounter", "Number of total registry with remote region queries seen since startup"),
    GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS_DELTA("getAllWithRemoteRegionCacheMissDeltaCounter", "Number of total registry queries for delta with remote region seen since startup"),
    GET_ALL_DELTA("getAllDeltaCounter", "Number of total deltas since startup"),
    GET_ALL_DELTA_WITH_REMOTE_REGIONS("getAllDeltaWithRemoteRegionCounter", "Number of total deltas with remote regions since startup"),
    GET_ALL("getAllCounter", "Number of total registry queries seen since startup"),
    GET_ALL_WITH_REMOTE_REGIONS("getAllWithRemoteRegionCounter", "Number of total registry queries with remote regions, seen since startup"),
    REGISTER("registerCounter", "Number of total registers seen since startup"),
    EXPIRED("expiredCounter", "Number of total expired leases since startup"),
    STATUS_UPDATE("statusUpdateCounter", "Number of total admin status updates since startup"),
    CANCEL_NOT_FOUND("cancelNotFoundCounter", "Number of total cancel requests on non-existing instance since startup"),
    RENEW_NOT_FOUND("renewNotFoundexpiredCounter", "Number of total renew on non-existing instance since startup"),
    REJECTED_REPLICATIONS("numOfRejectedReplications", "Number of replications rejected because of full queue"),
    FAILED_REPLICATIONS("numOfFailedReplications", "Number of failed replications - likely from timeouts");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
        for (RemoteRegionRegistry remoteRegionRegistry : this.remoteRegionRegistryList) {
=======
        for (RemoteRegionRegistry remoteRegionRegistry : this.regionNameVSRemoteRegistry.values()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/shared/Application.java;<<<<<<< MINE
        instancesMap.remove(i.getId());
        synchronized (instances) {
            instances.remove(i);
            isDirty = true;
        }
=======
        removeInstance(i, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/shared/Application.java;<<<<<<< MINE
        if (filterUpInstances) {
=======
        if (indexByRemoteRegions || filterUpInstances) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/shared/Application.java;<<<<<<< MINE
                if (!InstanceStatus.UP.equals(instanceInfo.getStatus())) {
=======
                if (filterUpInstances && !InstanceStatus.UP.equals(instanceInfo.getStatus())) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java;<<<<<<< MINE
            application.shuffleAndStoreInstances(filterUpInstances);
=======
            if (indexByRemoteRegions) {
                application.shuffleAndStoreInstances(remoteRegionsRegistry, clientConfig, instanceRegionChecker);
            } else {
                application.shuffleAndStoreInstances(filterUpInstances);
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java;<<<<<<< MINE
                        "defaultZone").get().split(",");
=======
                        DEFAULT_ZONE).get().split(",");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig.java;<<<<<<< MINE
     * 
=======
     *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            .newTimer(PREFIX + "Register");;
=======
            .newTimer(PREFIX + "Register");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            applications.set(new Applications());
=======
            localRegionApps.set(new Applications());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        return applications.get();
=======
        return localRegionApps.get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
    public List<InstanceInfo> getInstancesByVipAddress(String vipAddress,
            boolean secure) {
=======
    public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure) {
        return getInstancesByVipAddress(vipAddress, secure, instanceRegionChecker.getLocalRegion());
    }

    /**
     * Gets the list of instances matching the given VIP Address in the passed region.
     *
     * @param vipAddress - The VIP address to match the instances for.
     * @param secure - true if it is a secure vip address, false otherwise
     * @param region - region from which the instances are to be fetched.
     *
     * @return - The list of {@link InstanceInfo} objects matching the criteria, empty list if not instances found.
     */
    public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure, String region) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            return this.applications.get().getInstancesByVirtualHostName(
                    vipAddress);
=======
            return applications.getInstancesByVirtualHostName(vipAddress);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            return this.applications.get().getInstancesBySecureVirtualHostName(
                    vipAddress);
=======
            return applications.getInstancesBySecureVirtualHostName(vipAddress);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        InstanceInfo instanceInfo = instanceInfoList.get(index);
        return instanceInfo;
=======
        return instanceInfoList.get(index);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        if (instanceInfo != null) {
=======
        if (instanceInfo != null && shouldRegister(instanceInfo)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    || (getApplications() == null)
                    || (getApplications().getRegisteredApplications().size() == 0)
=======
                    || (applications == null)
                    || (applications.getRegisteredApplications().size() == 0)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    || (getApplications().getVersion() == -1)) {
=======
                    || (applications.getVersion() == -1)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                        (getApplications() == null));
=======
                        (applications == null));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                        (getApplications().getRegisteredApplications().size() == 0));
                logger.info("Application version is -1: {}", (getApplications()
=======
                        (applications.getRegisteredApplications().size() == 0));
                logger.info("Application version is -1: {}", (applications
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            applications.set(this.filterAndShuffle(apps));
=======
            localRegionApps.set(this.filterAndShuffle(apps));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap
                    .entrySet()) {
=======
            for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        applications.set(this.filterAndShuffle(serverApps));
=======
        localRegionApps.set(this.filterAndShuffle(serverApps));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
    private void updateDelta(Applications delta) {
=======
    private void
    updateDelta(Applications delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    Application existingApp = getApplications()
=======
                    Application existingApp = applications
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                        getApplications().addApplication(app);
=======
                        applications.addApplication(app);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    logger.debug("Added instance {} to the existing apps ",
                            instance.getId());
                    getApplications().getRegisteredApplications(
=======
                    logger.debug("Added instance {} to the existing apps in region {}",
                            instance.getId(), instanceRegion);
                    applications.getRegisteredApplications(
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    Application existingApp = getApplications()
=======
                    Application existingApp = applications
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                        getApplications().addApplication(app);
=======
                        applications.addApplication(app);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                            instance.getId());
=======
                                 instance.getId());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    getApplications().getRegisteredApplications(
=======
                    applications.getRegisteredApplications(
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    Application existingApp = getApplications()
=======
                    Application existingApp = applications
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                        getApplications().addApplication(app);
=======
                        applications.addApplication(app);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                            instance.getId());
                    getApplications().getRegisteredApplications(
=======
                                 instance.getId());
                    applications.getRegisteredApplications(
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        getApplications().shuffleInstances(
                clientConfig.shouldFilterOnlyUpInstances());
=======
        getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());

        for (Applications applications : remoteRegionVsApps.values()) {
            applications.setVersion(delta.getVersion());
            applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    applications.set(this.filterAndShuffle(apps));
=======
                    localRegionApps.set(this.filterAndShuffle(apps));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a84be6a_08e0412/rev_a84be6a-08e0412/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());
=======
            if (isFetchingRemoteRegionRegistries()) {
                Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();
                apps.shuffleAndIndexInstances(remoteRegionVsApps, clientConfig, instanceRegionChecker);
                for (Applications applications : remoteRegionVsApps.values()) {
                    applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());
                }
                this.remoteRegionVsApps = remoteRegionVsApps;
            } else {
                apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_b7e1825_f0dec22/rev_b7e1825-f0dec22/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            this.eventBus = eventBus;
=======
            scheduler = Executors.newScheduledThreadPool(4);

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_b7e1825_f0dec22/rev_b7e1825-f0dec22/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientDisableRegistryTest.java;<<<<<<< MINE
        final int eurekaPort = localRandomEurekaPort + (int)(Math.random() * 10);
        ConfigurationManager.getConfigInstance().setProperty("eureka.registration.enabled", "false");
        ConfigurationManager.getConfigInstance().setProperty("eureka.serviceUrl.default",
                                                             "http://localhost:" + eurekaPort +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);

        mockLocalEurekaServer = new MockRemoteEurekaServer(eurekaPort, Collections.<String, Application>emptyMap(),
=======
        mockLocalEurekaServer = new MockRemoteEurekaServer(Collections.<String, Application>emptyMap(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_b7e1825_f0dec22/rev_b7e1825-f0dec22/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
    public MockRemoteEurekaServer(int port, Map<String, Application> localRegionApps,
=======
    public MockRemoteEurekaServer(Map<String, Application> localRegionApps,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            if (clientConfig.shouldDisableDelta() || forceFullRegistryFetch || (applications == null)
                    || (applications.getRegisteredApplications().size() == 0)
                    // The client application does not have the latest library
                    // supporting delta
                    || (applications.getVersion() == -1)) {
=======
            if (clientConfig.shouldDisableDelta()
                || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))
                || forceFullRegistryFetch
                || (applications == null)
                || (applications.getRegisteredApplications().size() == 0)
                || (applications.getVersion() == -1)) //Client application does not have latest library supporting delta
            {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                urlPath = "apps/";
=======
                final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();
                urlPath = vipAddress == null ? "apps/" : "vips/" + vipAddress;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
        for (Application app : createRemoteApps()) {
            mockLocalEurekaServer.addRemoteRegionApps(app.getName(), app);
        }

        for (Application appDelta : createRemoteAppsDelta()) {
            mockLocalEurekaServer.addRemoteRegionAppsDelta(appDelta.getName(), appDelta);
        }
    }
=======
        for (Application app : createRemoteApps()) {
            mockLocalEurekaServer.addRemoteRegionApps(app.getName(), app);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    private static List<Application> createRemoteApps() {
        Application myapp1 = new Application(REMOTE_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createInstance(REMOTE_REGION_APP1_NAME, ALL_REGIONS_VIP1_ADDR, REMOTE_REGION_APP1_INSTANCE1_HOSTNAME, null);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(REMOTE_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createInstance(REMOTE_REGION_APP2_NAME, ALL_REGIONS_VIP2_ADDR, REMOTE_REGION_APP2_INSTANCE1_HOSTNAME, null);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
    }

    private static List<Application> createRemoteAppsDelta() {
        Application myapp1 = new Application(REMOTE_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createInstance(REMOTE_REGION_APP1_NAME, ALL_REGIONS_VIP1_ADDR, REMOTE_REGION_APP1_INSTANCE2_HOSTNAME, null);
        instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(REMOTE_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createInstance(REMOTE_REGION_APP2_NAME, ALL_REGIONS_VIP2_ADDR, REMOTE_REGION_APP2_INSTANCE2_HOSTNAME, null);
        instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
=======
        for (Application appDelta : createRemoteAppsDelta()) {
            mockLocalEurekaServer.addRemoteRegionAppsDelta(appDelta.getName(), appDelta);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    private void populateLocalRegistryAtStartup() {
        for (Application app : createLocalApps()) {
            mockLocalEurekaServer.addLocalRegionApps(app.getName(), app);
        }

        for (Application appDelta : createLocalAppsDelta()) {
            mockLocalEurekaServer.addLocalRegionAppsDelta(appDelta.getName(), appDelta);
        }
=======
    private static List<Application> createRemoteApps() {
        Application myapp1 = new Application(REMOTE_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createRemoteInstanceForApp1(REMOTE_REGION_APP1_INSTANCE1_HOSTNAME);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(REMOTE_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createRemoteInstanceForApp2(REMOTE_REGION_APP2_INSTANCE1_HOSTNAME);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    protected void addLocalAppDelta() {
        Application myappDelta = new Application(LOCAL_REGION_APP2_NAME);
        InstanceInfo instanceInfo = createInstance(LOCAL_REGION_APP2_NAME, ALL_REGIONS_VIP2_ADDR, LOCAL_REGION_APP2_INSTANCE3_HOSTNAME, null);
        instanceInfo.setActionType(InstanceInfo.ActionType.ADDED);
        myappDelta.addInstance(instanceInfo);
        mockLocalEurekaServer.addLocalRegionAppsDelta(LOCAL_REGION_APP2_NAME, myappDelta);
=======
    private static List<Application> createRemoteAppsDelta() {
        Application myapp1 = new Application(REMOTE_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createRemoteInstanceForApp1(REMOTE_REGION_APP1_INSTANCE2_HOSTNAME);
        instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(REMOTE_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createRemoteInstanceForApp2(REMOTE_REGION_APP2_INSTANCE2_HOSTNAME);
        instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    private static List<Application> createLocalApps() {
        Application myapp1 = new Application(LOCAL_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createInstance(LOCAL_REGION_APP1_NAME, ALL_REGIONS_VIP1_ADDR, LOCAL_REGION_APP1_INSTANCE1_HOSTNAME, null);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(LOCAL_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createInstance(LOCAL_REGION_APP2_NAME, ALL_REGIONS_VIP2_ADDR, LOCAL_REGION_APP2_INSTANCE1_HOSTNAME, null);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
=======
    private static InstanceInfo createRemoteInstanceForApp1(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = createBaseInstance(instanceHostName);
        instanceBuilder.setAppName(REMOTE_REGION_APP1_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP1_ADDR);
        AmazonInfo amazonInfo = getAmazonInfo(REMOTE_ZONE, instanceHostName);
        instanceBuilder.setDataCenterInfo(amazonInfo);
        instanceBuilder.setMetadata(amazonInfo.getMetadata());
        return instanceBuilder.build();
    }

    private static InstanceInfo createRemoteInstanceForApp2(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = createBaseInstance(instanceHostName);
        instanceBuilder.setAppName(REMOTE_REGION_APP2_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP2_ADDR);
        AmazonInfo amazonInfo = getAmazonInfo(REMOTE_ZONE, instanceHostName);
        instanceBuilder.setDataCenterInfo(amazonInfo);
        instanceBuilder.setMetadata(amazonInfo.getMetadata());
        return instanceBuilder.build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    private static List<Application> createLocalAppsDelta() {
        Application myapp1 = new Application(LOCAL_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createInstance(LOCAL_REGION_APP1_NAME, ALL_REGIONS_VIP1_ADDR, LOCAL_REGION_APP1_INSTANCE2_HOSTNAME, null);
        instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(LOCAL_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createInstance(LOCAL_REGION_APP2_NAME, ALL_REGIONS_VIP2_ADDR, LOCAL_REGION_APP2_INSTANCE2_HOSTNAME, null);
        instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
=======
    private void populateLocalRegistryAtStartup() {
        for (Application app : createLocalApps()) {
            mockLocalEurekaServer.addLocalRegionApps(app.getName(), app);
        }

        for (Application appDelta : createLocalAppsDelta()) {
            mockLocalEurekaServer.addLocalRegionAppsDelta(appDelta.getName(), appDelta);
        }
    }

    private static List<Application> createLocalApps() {
        Application myapp1 = new Application(LOCAL_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createLocalInstanceForApp1(LOCAL_REGION_APP1_INSTANCE1_HOSTNAME);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(LOCAL_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createLocalInstanceForApp2(LOCAL_REGION_APP2_INSTANCE1_HOSTNAME);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
    }

    private static List<Application> createLocalAppsDelta() {
        Application myapp1 = new Application(LOCAL_REGION_APP1_NAME);
        InstanceInfo instanceInfo1 = createLocalInstanceForApp1(LOCAL_REGION_APP1_INSTANCE2_HOSTNAME);
        instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED);
        myapp1.addInstance(instanceInfo1);

        Application myapp2 = new Application(LOCAL_REGION_APP2_NAME);
        InstanceInfo instanceInfo2 = createLocalInstanceForApp2(LOCAL_REGION_APP2_INSTANCE2_HOSTNAME);
        instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED);
        myapp2.addInstance(instanceInfo2);

        return Arrays.asList(myapp1, myapp2);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
    private static InstanceInfo createInstance(String appName, String vipAddress, String instanceHostName, String zone) {
=======
    private static InstanceInfo.Builder createBaseInstance(String instanceHostName) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java;<<<<<<< MINE
        instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build());
        AmazonInfo amazonInfo = getAmazonInfo(zone, instanceHostName);
=======
        instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build());
        return instanceBuilder;
    }

    private static InstanceInfo createLocalInstanceForApp1(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = createBaseInstance(instanceHostName);
        instanceBuilder.setAppName(LOCAL_REGION_APP1_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP1_ADDR);
        AmazonInfo amazonInfo = getAmazonInfo(null, instanceHostName);
        instanceBuilder.setDataCenterInfo(amazonInfo);
        instanceBuilder.setMetadata(amazonInfo.getMetadata());
        return instanceBuilder.build();
    }

    private static InstanceInfo createLocalInstanceForApp2(String instanceHostName) {
        InstanceInfo.Builder instanceBuilder = createBaseInstance(instanceHostName);
        instanceBuilder.setAppName(LOCAL_REGION_APP2_NAME);
        instanceBuilder.setVIPAddress(ALL_REGIONS_VIP2_ADDR);
        AmazonInfo amazonInfo = getAmazonInfo(null, instanceHostName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
                            LOCAL_REGION_INSTANCE_1_HOSTNAME, instance.getHostName());
=======
                LOCAL_REGION_APP1_INSTANCE1_HOSTNAME, instance.getHostName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
        Assert.assertEquals("Remote instance not returned for remote region vip address", REMOTE_REGION_INSTANCE_1_HOSTNAME, instance.getHostName());
=======
        Assert.assertEquals("Remote instance not returned for remote region vip address", REMOTE_REGION_APP1_INSTANCE1_HOSTNAME, instance.getHostName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
        checkInstancesFromARegion("local", LOCAL_REGION_APP1_INSTANCE1_HOSTNAME,
                LOCAL_REGION_APP1_INSTANCE2_HOSTNAME);
        checkInstancesFromARegion(REMOTE_REGION, REMOTE_REGION_APP1_INSTANCE1_HOSTNAME,
                REMOTE_REGION_APP1_INSTANCE2_HOSTNAME);
    }

    @Test
    public void testAppsHashCodeAfterRefresh() throws Exception {
        Assert.assertEquals("UP_2_", client.getApplications().getAppsHashCode());

        addLocalAppDelta();
        mockLocalEurekaServer.waitForDeltaToBeRetrieved(CLIENT_REFRESH_RATE);

        Assert.assertEquals("UP_3_", client.getApplications().getAppsHashCode());
=======
        checkInstancesFromARegion("local", LOCAL_REGION_APP1_INSTANCE1_HOSTNAME,
                LOCAL_REGION_APP1_INSTANCE2_HOSTNAME);
        checkInstancesFromARegion(REMOTE_REGION, REMOTE_REGION_APP1_INSTANCE1_HOSTNAME,
                REMOTE_REGION_APP1_INSTANCE2_HOSTNAME);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false);
=======
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP1_ADDR, false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_526d3b1_6333a71/rev_526d3b1-6333a71/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP_ADDR, false, region);
=======
            instancesByVipAddress = client.getInstancesByVipAddress(ALL_REGIONS_VIP1_ADDR, false, region);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter.java;<<<<<<< MINE
        if ( EurekaServerConfigurationManager.getInstance().getConfiguration().shouldLogIdentityHeaders() ) {
=======
        if (EurekaServerConfigurationManager.getInstance().getConfiguration().shouldLogIdentityHeaders()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java;<<<<<<< MINE
            Applications delta, String reconcileHashCode) throws Throwable {
=======
                                                     Applications delta, String reconcileHashCode) throws Throwable {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
        .getString(EUREKA_DATACENTER);
=======
                .getString(EUREKA_DATACENTER);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
    throws InterruptedException {
=======
            throws InterruptedException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
         // Bind to EIP if needed
=======
        // Bind to EIP if needed
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
               try {
                    if (eipManager.isEIPBound()) {
                        break;
                    } else {
                        eipManager.bindEIP();
                    }
                } catch (Throwable e) {
                    logger.error("Cannot bind to EIP", e);
                    Thread.sleep(EIP_BIND_SLEEP_TIME_MS);
=======
            try {
                if (eipManager.isEIPBound()) {
                    break;
                } else {
                    eipManager.bindEIP();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
       // Schedule a timer which periodically checks for EIP binding.
=======
        // Schedule a timer which periodically checks for EIP binding.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            @Override
            public void run() {
                try {
                    // If the EIP is not bound, the registry could  be stale
                    // First sync up the registry from the neighboring node before
                    // trying to bind the EIP
                    EIPManager eipManager = EIPManager.getInstance();
                    if (!eipManager.isEIPBound()) {
                        registry.clearRegistry();
                        int count = registry.syncUp();
                        registry.openForTraffic(count);
                    } else {
                        // An EIP is already bound
                        return;
                    }
                    eipManager.bindEIP();
                } catch (Throwable e) {
                    logger.error("Could not bind to EIP", e);
                }
            }
        }, eurekaServerConfig.getEIPBindingRetryIntervalMs(),
        eurekaServerConfig.getEIPBindingRetryIntervalMs());
=======
                           @Override
                           public void run() {
                               try {
                                   // If the EIP is not bound, the registry could  be stale
                                   // First sync up the registry from the neighboring node before
                                   // trying to bind the EIP
                                   EIPManager eipManager = EIPManager.getInstance();
                                   if (!eipManager.isEIPBound()) {
                                       registry.clearRegistry();
                                       int count = registry.syncUp();
                                       registry.openForTraffic(count);
                                   } else {
                                       // An EIP is already bound
                                       return;
                                   }
                                   eipManager.bindEIP();
                               } catch (Throwable e) {
                                   logger.error("Could not bind to EIP", e);
                               }
                           }
                       }, eurekaServerConfig.getEIPBindingRetryIntervalMs(),
                eurekaServerConfig.getEIPBindingRetryIntervalMs());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                                               .getLastDirtyTimestamp();
=======
                        .getLastDirtyTimestamp();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                            + "the one that is being registered {}", existingLastDirtyTimestamp,
=======
                                    + "the one that is being registered {}", existingLastDirtyTimestamp,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                                              + "(" + r.getId() + ")"));
=======
                        + "(" + r.getId() + ")"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                        + "overrides", r.getOverriddenStatus(), r.getId());
=======
                                + "overrides", r.getOverriddenStatus(), r.getId());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                         + r.getId());
=======
                    + r.getId());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                            + appName + ":" + id);
=======
                        + appName + ":" + id);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                             + id);
=======
                        + id);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                if(overriddenInstanceStatus == InstanceStatus.UNKNOWN) {
=======
                if (overriddenInstanceStatus == InstanceStatus.UNKNOWN) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                     instanceInfo.getOverriddenStatus().name(),
                                     instanceInfo.getId()};
=======
                            instanceInfo.getOverriddenStatus().name(),
                            instanceInfo.getId()};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                            + "Hence setting the status to overridden status", args);
=======
                                    + "Hence setting the status to overridden status", args);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            || (!overriddenStatus.equals(instanceStatus))) {
=======
                || (!overriddenStatus.equals(instanceStatus))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                if(currentOverride != null && info != null) {
=======
                if (currentOverride != null && info != null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
     * com.netflix.discovery.shared.LookupService#getApplication(java.lang.String )
=======
     * com.netflix.discovery.shared.LookupService#getApplication(java.lang.String)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                    Arrays.toString(remoteRegions));
=======
                Arrays.toString(remoteRegions));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                    + "whitelist and this app is not in the whitelist.", application.getName(),
=======
                                            + "whitelist and this app is not in the whitelist.", application.getName(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                         + this.recentlyChangedQueue.size());
=======
                    + this.recentlyChangedQueue.size());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                 instanceInfo.getStatus().name(),
                                 instanceInfo.getActionType().name()};
=======
                        instanceInfo.getStatus().name(),
                        instanceInfo.getActionType().name()};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                 instanceInfo.getStatus().name(),
                                 instanceInfo.getActionType().name()};
=======
                        instanceInfo.getStatus().name(),
                        instanceInfo.getActionType().name()};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            && (!isLeaseExpirationEnabled() || !lease.isExpired())) {
=======
                && (!isLeaseExpirationEnabled() || !lease.isExpired())) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                if(application != null) {
=======
                if (application != null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                .entrySet().iterator(); iter.hasNext();) {
=======
                .entrySet().iterator(); iter.hasNext(); ) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                    || (isLeaseExpirationEnabled() && lease.isExpired())) {
=======
                        || (isLeaseExpirationEnabled() && lease.isExpired())) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                                             .getRegisteredApplications()) {
=======
                        .getRegisteredApplications()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                                   .setRegistrationTimestamp(lease.getRegistrationTimestamp())
                                   .setRenewalTimestamp(lease.getLastRenewalTimestamp())
                                   .setServiceUpTimestamp(lease.getServiceUpTimestamp())
                                   .setRenewalIntervalInSecs(renewalInterval)
                                   .setDurationInSecs(leaseDuration)
                                   .setEvictionTimestamp(lease.getEvictionTimestamp()).build());
=======
                .setRegistrationTimestamp(lease.getRegistrationTimestamp())
                .setRenewalTimestamp(lease.getLastRenewalTimestamp())
                .setServiceUpTimestamp(lease.getServiceUpTimestamp())
                .setRenewalIntervalInSecs(renewalInterval)
                .setDurationInSecs(leaseDuration)
                .setEvictionTimestamp(lease.getEvictionTimestamp()).build());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
            && (!InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {
=======
                && (!InstanceStatus.OUT_OF_SERVICE.equals(r.getStatus()))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                && (InstanceStatus.OUT_OF_SERVICE.equals(existingStatus)
=======
                    && (InstanceStatus.OUT_OF_SERVICE.equals(existingStatus)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/InstanceRegistry.java;<<<<<<< MINE
                    Arrays.toString(allKnownRemoteRegions));
=======
                Arrays.toString(allKnownRemoteRegions));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                    if (serviceUrl.startsWith("https://") && 
                    		"true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
	                    jerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(jerseyClientName,
	                            config.getPeerNodeConnectTimeoutMs(),
	                            config.getPeerNodeReadTimeoutMs(),
	                            config.getPeerNodeTotalConnections(),
	                            config.getPeerNodeTotalConnectionsPerHost(),
	                            config.getPeerNodeConnectionIdleTimeoutSeconds());
                    }else{
	                    jerseyClient = EurekaJerseyClient.createJerseyClient(jerseyClientName,
	                            config.getPeerNodeConnectTimeoutMs(),
	                            config.getPeerNodeReadTimeoutMs(),
	                            config.getPeerNodeTotalConnections(),
	                            config.getPeerNodeTotalConnectionsPerHost(),
	                            config.getPeerNodeConnectionIdleTimeoutSeconds());
=======
                    if (serviceUrl.startsWith("https://") &&
                            "true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
                        jerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(jerseyClientName,
                                config.getPeerNodeConnectTimeoutMs(),
                                config.getPeerNodeReadTimeoutMs(),
                                config.getPeerNodeTotalConnections(),
                                config.getPeerNodeTotalConnectionsPerHost(),
                                config.getPeerNodeConnectionIdleTimeoutSeconds());
                    } else {
                        jerseyClient = EurekaJerseyClient.createJerseyClient(jerseyClientName,
                                config.getPeerNodeConnectTimeoutMs(),
                                config.getPeerNodeReadTimeoutMs(),
                                config.getPeerNodeTotalConnections(),
                                config.getPeerNodeTotalConnectionsPerHost(),
                                config.getPeerNodeConnectionIdleTimeoutSeconds());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
               ip = InetAddress.getLocalHost().getHostAddress();
=======
                ip = InetAddress.getLocalHost().getHostAddress();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            final InstanceInfo info, final InstanceStatus overriddenStatus,
            boolean primeConnection) throws Throwable {
=======
                          final InstanceInfo info, final InstanceStatus overriddenStatus,
                          boolean primeConnection) throws Throwable {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            public void handleFailure(int statusCode) throws Throwable  {
               super.handleFailure(statusCode);
               if (statusCode == 404) {
                   logger.warn(name + appName + "/" + id
                           + " : heartbeat: missing entry.");
                   if (info != null) {
                       logger.warn(
                               "Cannot find instance id {} and hence replicating the instance with status {}",
                               info.getId(), info.getStatus().toString());
                       register(info);
                   }
               } else if (config.shouldSyncWhenTimestampDiffers() && this.getPeerInstanceInfo() != null) {
                   syncInstancesIfTimestampDiffers(id, info, this.getPeerInstanceInfo());
               }
=======
            public void handleFailure(int statusCode) throws Throwable {
                super.handleFailure(statusCode);
                if (statusCode == 404) {
                    logger.warn(name + appName + "/" + id
                            + " : heartbeat: missing entry.");
                    if (info != null) {
                        logger.warn(
                                "Cannot find instance id {} and hence replicating the instance with status {}",
                                info.getId(), info.getStatus().toString());
                        register(info);
                    }
                } else if (config.shouldSyncWhenTimestampDiffers() && this.getPeerInstanceInfo() != null) {
                    syncInstancesIfTimestampDiffers(id, info, this.getPeerInstanceInfo());
                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            final InstanceStatus newStatus, final InstanceInfo info) {
=======
                             final InstanceStatus newStatus, final InstanceInfo info) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                   return response.getStatus();
=======
                    return response.getStatus();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            final InstanceInfo info, final InstanceStatus overriddenStatus, ReplicationTask task)
=======
                              final InstanceInfo info, final InstanceStatus overriddenStatus, ReplicationTask task)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                .queryParam("lastDirtyTimestamp",
=======
                    .queryParam("lastDirtyTimestamp",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            if ((response.getStatus() == Status.OK.getStatusCode())  && response.hasEntity()) {
=======
            if ((response.getStatus() == Status.OK.getStatusCode()) && response.hasEntity()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
     /**
=======
    /**
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
     /**
=======
    /**
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
           ) {
=======
    ) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                if (infoFromPeer != null) {
                    Object[] args = {id, info.getLastDirtyTimestamp(), infoFromPeer.getLastDirtyTimestamp()};
=======
            if (infoFromPeer != null) {
                Object[] args = {id, info.getLastDirtyTimestamp(), infoFromPeer.getLastDirtyTimestamp()};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                            "Peer wants us to take the instance information from it, since the timestamp differs,"
                            + "Id : {} My Timestamp : {}, Peer's timestamp: {}", args);
                    if ((infoFromPeer.getOverriddenStatus() != null)
                            && !(InstanceStatus.UNKNOWN.equals(infoFromPeer
                                    .getOverriddenStatus()))) {
                        Object[] args1 = {id, info.getOverriddenStatus(), infoFromPeer.getOverriddenStatus()};
                        logger.warn(
                                "Overridden Status info -id {}, mine {}, peer's {}",
                                args1);
=======
                            "Overridden Status info -id {}, mine {}, peer's {}",
                            args1);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        PeerAwareInstanceRegistry.getInstance()
                                .storeOverriddenStatusIfRequired(id,
                                        infoFromPeer.getOverriddenStatus());
                    }
                    PeerAwareInstanceRegistry.getInstance().register(
                            infoFromPeer, true);
=======
                    PeerAwareInstanceRegistry.getInstance()
                            .storeOverriddenStatusIfRequired(id,
                                    infoFromPeer.getOverriddenStatus());
                }
                PeerAwareInstanceRegistry.getInstance().register(
                        infoFromPeer, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                }
=======
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                 250);
=======
                250);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            private boolean executeBatch(List<ReplicationTask> tasks) {
                boolean success = true;
                boolean done = true;
                PeerEurekaNode.ReplicationList list = new PeerEurekaNode.ReplicationList();
                for (ReplicationTask task : tasks) {
                   if (System.currentTimeMillis()
                            - config.getMaxTimeForReplication() > task
                            .getSubmitTime()) {
                       Object[] args = {task.getAppName(), task.getId(),
                               task.getAction(),
                               new Date(System.currentTimeMillis()),
                               new Date(task.getSubmitTime())};
=======
                    private boolean executeBatch(List<ReplicationTask> tasks) {
                        boolean success = true;
                        boolean done = true;
                        PeerEurekaNode.ReplicationList list = new PeerEurekaNode.ReplicationList();
                        for (ReplicationTask task : tasks) {
                            if (System.currentTimeMillis()
                                    - config.getMaxTimeForReplication() > task
                                    .getSubmitTime()) {
                                Object[] args = {task.getAppName(), task.getId(),
                                        task.getAction(),
                                        new Date(System.currentTimeMillis()),
                                        new Date(task.getSubmitTime())};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        logger.warn(
                                "Replication events older than the threshold. AppName : {}, Id: {}, Action : {}, "
                                + "Current Time : {}, Submit Time :{}", args);
=======
                                logger.warn(
                                        "Replication events older than the threshold. AppName : {}, Id: {}, Action : {}, "
                                                + "Current Time : {}, Submit Time :{}", args);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                       continue;
                    }
                    PeerEurekaNode.ReplicationInstance instance = new PeerEurekaNode.ReplicationInstance();
                    instance.setAppName(task.getAppName());
                    instance.setId(task.getId());
                    InstanceInfo instanceInfo = task.getInstanceInfo();
                    if (instanceInfo != null) {
                        String overriddenStatus = (task
                                .getOverriddenStatus() == null ? null
=======
                                continue;
                            }
                            PeerEurekaNode.ReplicationInstance instance = new PeerEurekaNode.ReplicationInstance();
                            instance.setAppName(task.getAppName());
                            instance.setId(task.getId());
                            InstanceInfo instanceInfo = task.getInstanceInfo();
                            if (instanceInfo != null) {
                                String overriddenStatus = (task
                                        .getOverriddenStatus() == null ? null
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        instance.setOverriddenStatus(overriddenStatus);
                        instance.setLastDirtyTimestamp(instanceInfo
                                .getLastDirtyTimestamp());
                        if (task.shouldReplicateInstanceInfo()) {
                            instance.setInstanceInfo(instanceInfo);
=======
                                instance.setOverriddenStatus(overriddenStatus);
                                instance.setLastDirtyTimestamp(instanceInfo
                                        .getLastDirtyTimestamp());
                                if (task.shouldReplicateInstanceInfo()) {
                                    instance.setInstanceInfo(instanceInfo);
                                }
                                String instanceStatus = instanceInfo
                                        .getStatus() == null ? null
                                        : instanceInfo.getStatus().name();
                                instance.setStatus(instanceStatus);
                            }
                            instance.setAction(task.getAction());
                            list.addReplicationInstance(instance);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        String instanceStatus = instanceInfo
                        .getStatus() == null ? null
                                : instanceInfo.getStatus().name();
                        instance.setStatus(instanceStatus);
                    }
                    instance.setAction(task.getAction());
                    list.addReplicationInstance(instance);
                }
                if (list.getList().size() == 0) {
                    return true;
                }
                Action action = list.getList().get(0).action;
                DynamicCounter.increment("Batch_"
                        + action

                        + "_tries");

                do {
                    done = true;
                    ClientResponse response = null;
                    try {
                        response = jerseyApacheClient
                        .resource(serviceUrl)
                        .path(BATCH_URL_PATH)
                        .accept(MediaType.APPLICATION_JSON_TYPE)
                        .type(MediaType.APPLICATION_JSON_TYPE)
                        .post(ClientResponse.class, list);
                        if (!isSuccess(response.getStatus())) {
                            return false;
=======
                        if (list.getList().size() == 0) {
                            return true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                                + "_success");
=======
                                + "_tries");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        PeerEurekaNode.ReplicationListResponse batchResponse = response
                        .getEntity(PeerEurekaNode.ReplicationListResponse.class);
                        int ctr = 0;
                        for (PeerEurekaNode.ReplicationInstanceResponse singleResponse : batchResponse
                                .getResponseList()) {
                            int statusCode = singleResponse
                            .getStatusCode();
                            if ((!isSuccess(statusCode))
                                    || (singleResponse
                                    .getResponseEntity() != null)) {
                                if (singleResponse.getResponseEntity() != null) {
                                    tasks.get(ctr)
                                    .setPeerInstanceInfo(
                                            singleResponse
                                            .getResponseEntity());
=======
                        do {
                            done = true;
                            ClientResponse response = null;
                            try {
                                response = jerseyApacheClient
                                        .resource(serviceUrl)
                                        .path(BATCH_URL_PATH)
                                        .accept(MediaType.APPLICATION_JSON_TYPE)
                                        .type(MediaType.APPLICATION_JSON_TYPE)
                                        .post(ClientResponse.class, list);
                                if (!isSuccess(response.getStatus())) {
                                    return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                                tasks.get(ctr)
                                .handleFailure(statusCode);
                            }
=======
                                DynamicCounter.increment("Batch_"
                                        + action
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                            ++ctr;
                        }
                        done = true;
=======
                                        + "_success");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                    } catch (Throwable e) {
=======
                                PeerEurekaNode.ReplicationListResponse batchResponse = response
                                        .getEntity(PeerEurekaNode.ReplicationListResponse.class);
                                int ctr = 0;
                                for (PeerEurekaNode.ReplicationInstanceResponse singleResponse : batchResponse
                                        .getResponseList()) {
                                    int statusCode = singleResponse
                                            .getStatusCode();
                                    if ((!isSuccess(statusCode))
                                            || (singleResponse
                                            .getResponseEntity() != null)) {
                                        if (singleResponse.getResponseEntity() != null) {
                                            tasks.get(ctr)
                                                    .setPeerInstanceInfo(
                                                            singleResponse
                                                                    .getResponseEntity());
                                        }
                                        tasks.get(ctr)
                                                .handleFailure(statusCode);
                                    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                        if ((isNetworkConnectException(e))) {
                            DynamicCounter.increment("Batch_"
                                    + action
                              + "_retries");
                            done = false;
                        } else {
                            success = false;
                            logger.info(
                                    "Not re-trying this exception because it does not seem to be a network exception",
                                    e);
                        }
                    } finally {
                        if (response != null) {
                            response.close();
                        }
                    }
                } while (!done);
                return success;
            }
=======
                                    ++ctr;
                                }
                                done = true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
            private void executeSingle(List<ReplicationTask> tasks) {
                for (ReplicationTask task : tasks) {
                    boolean done = true;
                    do {
                        done = true;
                        try {
                              if (System.currentTimeMillis()
                                    - config.getMaxTimeForReplication() > task
                                    .getSubmitTime()) {
                                  Object[] args = {
                                          task.getAppName(),
                                          task.getId(),
                                          task.getAction(),
                                          new Date(System.currentTimeMillis()),
                                          new Date(task.getSubmitTime()) };

                                logger.warn(
                                        "Replication events older than the threshold. AppName : {}, Id: {}, Action : {}, Current Time : {}, Submit Time :{}",
                                        args);

                                continue;
=======
                                if ((isNetworkConnectException(e))) {
                                    DynamicCounter.increment("Batch_"
                                            + action
                                            + "_retries");
                                    done = false;
                                } else {
                                    success = false;
                                    logger.info(
                                            "Not re-trying this exception because it does not seem to be a network exception",
                                            e);
                                }
                            } finally {
                                if (response != null) {
                                    response.close();
                                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                            DynamicCounter.increment("Single_"
                                    + task.getAction().name()
=======
                        } while (!done);
                        return success;
                    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                            int statusCode = task.execute();
                            if (!isSuccess(statusCode)) {
                                task.handleFailure(statusCode);
                            }
                            DynamicCounter.increment("Single_"
                                    + task.getAction().name()

                                    + "_success");

                        } catch (Throwable e) {
                            logger.error(
                                    name + task.getAppName() + "/"
                                    + task.getId() + ":"
                                    + task.getAction(), e);
                            try {
                                Thread.sleep(RETRY_SLEEP_TIME_MS);
                            } catch (InterruptedException e1) {

                            }
                            if ((isNetworkConnectException(e))) {
                                DynamicCounter.increment(task
                                        .getAction().name()
                                        + "_retries");
                                done = false;
                            } else {
                                logger.info(
                                        "Not re-trying this exception because it does not seem to be a network "
                                        + "exception", e);
                            }
=======
                    private void executeSingle(List<ReplicationTask> tasks) {
                        for (ReplicationTask task : tasks) {
                            boolean done = true;
                            do {
                                done = true;
                                try {
                                    if (System.currentTimeMillis()
                                            - config.getMaxTimeForReplication() > task
                                            .getSubmitTime()) {
                                        Object[] args = {
                                                task.getAppName(),
                                                task.getId(),
                                                task.getAction(),
                                                new Date(System.currentTimeMillis()),
                                                new Date(task.getSubmitTime())};

                                        logger.warn(
                                                "Replication events older than the threshold. AppName : {}, Id: {}, Action : {}, Current Time : {}, Submit Time :{}",
                                                args);

                                        continue;
                                    }
                                    DynamicCounter.increment("Single_"
                                            + task.getAction().name()

                                            + "_tries");

                                    int statusCode = task.execute();
                                    if (!isSuccess(statusCode)) {
                                        task.handleFailure(statusCode);
                                    }
                                    DynamicCounter.increment("Single_"
                                            + task.getAction().name()

                                            + "_success");

                                } catch (Throwable e) {
                                    logger.error(
                                            name + task.getAppName() + "/"
                                                    + task.getId() + ":"
                                                    + task.getAction(), e);
                                    try {
                                        Thread.sleep(RETRY_SLEEP_TIME_MS);
                                    } catch (InterruptedException e1) {

                                    }
                                    if ((isNetworkConnectException(e))) {
                                        DynamicCounter.increment(task
                                                .getAction().name()
                                                + "_retries");
                                        done = false;
                                    } else {
                                        logger.info(
                                                "Not re-trying this exception because it does not seem to be a network "
                                                        + "exception", e);
                                    }
                                }
                            } while (!done);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                    } while (!done);
                }
            }
        });
=======
                    }
                });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java;<<<<<<< MINE
                &&  statusCode < 300;
=======
                && statusCode < 300;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
    .getLogger(EIPManager.class);
=======
            .getLogger(EIPManager.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
    .getInstance().getConfiguration();
=======
            .getInstance().getConfiguration();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .get(MetaDataKey.instanceId);
=======
                .get(MetaDataKey.instanceId);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .get(MetaDataKey.availabilityZone);
=======
                .get(MetaDataKey.availabilityZone);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .get(MetaDataKey.publicIpv4);
=======
                .get(MetaDataKey.publicIpv4);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
                                + "skipping this", eipEntry, associatedInstanceId);
=======
                                        + "skipping this", eipEntry, associatedInstanceId);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
                            + publicIp);
=======
                        + publicIp);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
            .get(MetaDataKey.publicIpv4);
=======
                    .get(MetaDataKey.publicIpv4);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
                .withPublicIps(myPublicIP);
=======
                        .withPublicIps(myPublicIP);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
                .describeAddresses(describeAddressRequest);
=======
                        .describeAddresses(describeAddressRequest);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
                    + myZone);
=======
                            + myZone);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .getEurekaClientConfig().getEurekaServerServiceUrls(myZone);
=======
                .getEurekaClientConfig().getEurekaServerServiceUrls(myZone);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .getEurekaClient().getServiceUrlsFromDNS(myZone, true);
=======
                .getEurekaClient().getServiceUrlsFromDNS(myZone, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .getConfiguration();
=======
                .getConfiguration();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java;<<<<<<< MINE
        .getRegion();
=======
                .getRegion();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java;<<<<<<< MINE
        .getApplications(false);
=======
                .getApplications(false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            @Override
            public void run() {
                updateRenewalThreshold();
=======
                           @Override
                           public void run() {
                               updateRenewalThreshold();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            }
=======
                           }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
        }, EUREKA_SERVER_CONFIG.getRenewalThresholdUpdateIntervalMs(),
=======
                       }, EUREKA_SERVER_CONFIG.getRenewalThresholdUpdateIntervalMs(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
                @Override
                public void run() {
                    try {
                        updatePeerEurekaNodes();
                    } catch (Throwable e) {
                        logger.error("Cannot update the replica Nodes", e);
                    }
=======
                                           @Override
                                           public void run() {
                                               try {
                                                   updatePeerEurekaNodes();
                                               } catch (Throwable e) {
                                                   logger.error("Cannot update the replica Nodes", e);
                                               }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
                }
            }, EUREKA_SERVER_CONFIG.getPeerEurekaNodesUpdateIntervalMs(),
=======
                                           }
                                       }, EUREKA_SERVER_CONFIG.getPeerEurekaNodesUpdateIntervalMs(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
                                + "channels are open", peerHostName);
=======
                                        + "channels are open", peerHostName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
                                               + EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())) {
=======
                    + EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            final boolean isReplication) {
=======
                          final boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            final boolean isReplication) {
=======
                         final boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            final InstanceStatus newStatus, String lastDirtyTimestamp,
            final boolean isReplication) {
=======
                                final InstanceStatus newStatus, String lastDirtyTimestamp,
                                final boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            final boolean isReplication) {
=======
                             final boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            boolean secure) {
=======
                                                boolean secure) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
               if ((count * 2) > (EUREKA_SERVER_CONFIG
=======
                if ((count * 2) > (EUREKA_SERVER_CONFIG
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
                        + (EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())))) {
=======
                + (EUREKA_SERVER_CONFIG.getWaitTimeInMsWhenSyncEmpty())))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            InstanceInfo info /* optional */,
            InstanceStatus newStatus /* optional */, boolean isReplication) {
=======
                                  InstanceInfo info /* optional */,
                                  InstanceStatus newStatus /* optional */, boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            String id, InstanceInfo info, InstanceStatus newStatus,
            PeerEurekaNode node) {
=======
                                                 String id, InstanceInfo info, InstanceStatus newStatus,
                                                 PeerEurekaNode node) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            case Cancel:
                node.cancel(appName, id);
                break;
            case Heartbeat:
                InstanceStatus overriddenStatus = overriddenInstanceStatusMap
                        .get(id);
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.heartbeat(appName, id, infoFromRegistry, overriddenStatus,
                        false);
                break;
            case Register:
                node.register(info);
                break;
            case StatusUpdate:
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.statusUpdate(appName, id, newStatus, infoFromRegistry);
                break;
            case DeleteStatusOverride:
                infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                node.deleteStatusOverride(appName, id, infoFromRegistry);
                break;
=======
                case Cancel:
                    node.cancel(appName, id);
                    break;
                case Heartbeat:
                    InstanceStatus overriddenStatus = overriddenInstanceStatusMap
                            .get(id);
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.heartbeat(appName, id, infoFromRegistry, overriddenStatus,
                            false);
                    break;
                case Register:
                    node.register(info);
                    break;
                case StatusUpdate:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.statusUpdate(appName, id, newStatus, infoFromRegistry);
                    break;
                case DeleteStatusOverride:
                    infoFromRegistry = getInstanceByAppAndId(appName, id, false);
                    node.deleteStatusOverride(appName, id, infoFromRegistry);
                    break;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java;<<<<<<< MINE
            final ASGStatus newStatus, final PeerEurekaNode node) {
=======
                                                final ASGStatus newStatus, final PeerEurekaNode node) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/StatusFilter.java;<<<<<<< MINE
            FilterChain chain) throws IOException, ServletException {
=======
                         FilterChain chain) throws IOException, ServletException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/StatusFilter.java;<<<<<<< MINE
                    + status + " - try another DS node: ");
=======
                            + status + " - try another DS node: ");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
    .getLogger(StatusResource.class);
=======
            .getLogger(StatusResource.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
    .getInstance();
=======
            .getInstance();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
        .getAppName();
=======
                .getAppName();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
            .getApplication(myAppName, false);
=======
                    .getApplication(myAppName, false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
                        .getConfiguration().shouldSyncWhenTimestampDiffers()) {
=======
                .getConfiguration().shouldSyncWhenTimestampDiffers()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
            if(registry.getInstanceByAppAndId(app.getName(), id) == null) {
=======
            if (registry.getInstanceByAppAndId(app.getName(), id) == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
            if(registry.getInstanceByAppAndId(app.getName(), id) == null) {
=======
            if (registry.getInstanceByAppAndId(app.getName(), id) == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
            boolean isReplication) {
=======
                                            boolean isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
                            .getLastDirtyTimestamp()))) {
=======
                    .getLastDirtyTimestamp()))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
    .getLogger(ASGResource.class);
=======
            .getLogger(ASGResource.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
            @QueryParam("value") String newStatus,
            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
=======
                                 @QueryParam("value") String newStatus,
                                 @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstancesResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/InstancesResource.java;<<<<<<< MINE
            @PathParam("id") String id) {
=======
                            @PathParam("id") String id) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
            @HeaderParam("Accept") final String acceptHeader) {
=======
                                   @HeaderParam("Accept") final String acceptHeader) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
    @Consumes({ "application/json", "application/xml" })
=======
    @Consumes({"application/json", "application/xml"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
=======
                            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
@Produces({ "application/xml", "application/json" })
=======
@Produces({"application/xml", "application/json"})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
      * @return A batched response containing the information about the responses of individual events
=======
     * @return A batched response containing the information about the responses of individual events
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                                .getLastDirtyTimestamp().toString());
=======
                        .getLastDirtyTimestamp().toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                        .setResponseEntity((InstanceInfo) response
                                .getEntity());
=======
                                .setResponseEntity((InstanceInfo) response
                                        .getEntity());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                    .setStatusCode(Status.OK.getStatusCode());
=======
                            .setStatusCode(Status.OK.getStatusCode());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                            .toString());
=======
                                    .toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                    .setStatusCode(response.getStatus());
=======
                            .setStatusCode(response.getStatus());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                    .setStatusCode(response.getStatus());
=======
                            .setStatusCode(response.getStatus());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
                    .setStatusCode(response.getStatus());
=======
                            .setStatusCode(response.getStatus());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
    .getLogger(DefaultEurekaServerConfig.class);
=======
            .getLogger(DefaultEurekaServerConfig.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
    .getInstance();
=======
            .getInstance();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
    .getInstance().getStringProperty("eureka.server.props",
    "eureka-server");
=======
            .getInstance().getStringProperty("eureka.server.props",
                    "eureka-server");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
            .loadCascadedPropertiesFromResources(eurekaPropsFile);
=======
                    .loadCascadedPropertiesFromResources(eurekaPropsFile);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
                    + "specific properties or the configuration is installed with a different mechanism.",
=======
                            + "specific properties or the configuration is installed with a different mechanism.",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
        .getIntProperty(namespace + "peerEurekaNodesUpdateIntervalMs",
                (10 * 60 * 1000)).get();
=======
                .getIntProperty(namespace + "peerEurekaNodesUpdateIntervalMs",
                        (10 * 60 * 1000)).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
        .getLongProperty(
                namespace + "maxIdleThreadAgeInMinutesForStatusReplication",
                10).get();
=======
                .getLongProperty(
                        namespace + "maxIdleThreadAgeInMinutesForStatusReplication",
                        10).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
        eureka.remoteRegionUrlsWithName=region1;http://region1host/eureka/v2,region2;http://region2host/eureka/v2
=======
     eureka.remoteRegionUrlsWithName=region1;http://region1host/eureka/v2,region2;http://region2host/eureka/v2
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
        region1->"http://region1host/eureka/v2"
        region2->"http://region2host/eureka/v2"
=======
     region1->"http://region1host/eureka/v2"
     region2->"http://region2host/eureka/v2"
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java;<<<<<<< MINE
                             new String[]{propName, remoteRegionUrlWithNamePair, pairSplitChar});
=======
                        new String[]{propName, remoteRegionUrlWithNamePair, pairSplitChar});
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest.java;<<<<<<< MINE
                                                                                                + ';' + region1url
                                                                                                + ',' + region2
                                                                                                + ';' + region2url);
=======
                + ';' + region1url
                + ',' + region2
                + ';' + region2url);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/DefaultEurekaServerConfigTest.java;<<<<<<< MINE
                                                                                                + ';' + region1url);
=======
                + ';' + region1url);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer.java;<<<<<<< MINE
                                                 entry.getValue().getInstances().size());
=======
                    entry.getValue().getInstances().size());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer.java;<<<<<<< MINE
                                   "Request path: " + pathInfo + " not supported by eureka resource mock.");
=======
                        "Request path: " + pathInfo + " not supported by eureka resource mock.");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer.java;<<<<<<< MINE
                               " with content" + content);
=======
                    " with content" + content);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
                                                             "5");
=======
                "5");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
                                                             REMOTE_REGION_NAME + ";http://localhost:"
                                                             + REMOTE_REGION_PORT + '/' +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                REMOTE_REGION_NAME + ";http://localhost:"
                        + REMOTE_REGION_PORT + '/' +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
                                                             "http://localhost:" + mockRemoteEurekaServer.getPort() +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                "http://localhost:" + mockRemoteEurekaServer.getPort() +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
                while(line != null) {  // need to read all the buffer for a clean connection close
=======
                while (line != null) {  // need to read all the buffer for a clean connection close
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
        .getLogger(Builder.class);
=======
                .getLogger(Builder.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
                        if (uc.getResponseCode() != HttpURLConnection.HTTP_OK ) {  // need to read the error for clean connection close
=======
                        if (uc.getResponseCode() != HttpURLConnection.HTTP_OK) {  // need to read the error for clean connection close
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
                                while(br.readLine() != null) {
=======
                                while (br.readLine() != null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
            .getInstance().getBooleanProperty(
                    namespace + "logAmazonMetadataErrors", false);
=======
                        .getInstance().getBooleanProperty(
                                namespace + "logAmazonMetadataErrors", false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
            .getInstance().getIntProperty(
                    namespace + "mt.read_timeout", 8000);
=======
                        .getInstance().getIntProperty(
                                namespace + "mt.read_timeout", 8000);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
            .getInstance().getIntProperty(
                    namespace + "mt.connect_timeout", 3000);
=======
                        .getInstance().getIntProperty(
                                namespace + "mt.connect_timeout", 3000);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java;<<<<<<< MINE
            .getInstance().getIntProperty(namespace + "mt.num_retries",
                    3);
=======
                        .getInstance().getIntProperty(namespace + "mt.num_retries",
                                3);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider.java;<<<<<<< MINE
            .newBuilder()
            .setRenewalIntervalInSecs(
                    config.getLeaseRenewalIntervalInSeconds())
=======
                    .newBuilder()
                    .setRenewalIntervalInSecs(
                            config.getLeaseRenewalIntervalInSeconds())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider.java;<<<<<<< MINE
                .setAppName(config.getAppname())
                .setAppGroupName(config.getAppGroupName())
                .setDataCenterInfo(config.getDataCenterInfo())
                .setIPAddr(config.getIpAddress())
                .setHostName(config.getHostName(false))
                .setPort(config.getNonSecurePort())
                .enablePort(PortType.UNSECURE,
                        config.isNonSecurePortEnabled())
                .setSecurePort(config.getSecurePort())
                .enablePort(PortType.SECURE, config.getSecurePortEnabled())
                .setVIPAddress(config.getVirtualHostName())
                .setSecureVIPAddress(config.getSecureVirtualHostName())
                .setHomePageUrl(config.getHomePageUrlPath(),
                                config.getHomePageUrl())
                .setStatusPageUrl(config.getStatusPageUrlPath(),
                                  config.getStatusPageUrl())
                .setHealthCheckUrls(config.getHealthCheckUrlPath(),
                                    config.getHealthCheckUrl(),
                                    config.getSecureHealthCheckUrl())
                .setASGName(config.getASGName());
    
=======
                    .setAppName(config.getAppname())
                    .setAppGroupName(config.getAppGroupName())
                    .setDataCenterInfo(config.getDataCenterInfo())
                    .setIPAddr(config.getIpAddress())
                    .setHostName(config.getHostName(false))
                    .setPort(config.getNonSecurePort())
                    .enablePort(PortType.UNSECURE,
                            config.isNonSecurePortEnabled())
                    .setSecurePort(config.getSecurePort())
                    .enablePort(PortType.SECURE, config.getSecurePortEnabled())
                    .setVIPAddress(config.getVirtualHostName())
                    .setSecureVIPAddress(config.getSecureVirtualHostName())
                    .setHomePageUrl(config.getHomePageUrlPath(),
                            config.getHomePageUrl())
                    .setStatusPageUrl(config.getStatusPageUrlPath(),
                            config.getStatusPageUrl())
                    .setHealthCheckUrls(config.getHealthCheckUrlPath(),
                            config.getHealthCheckUrl(),
                            config.getSecureHealthCheckUrl())
                    .setASGName(config.getASGName());

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/AbstractInstanceConfig.java;<<<<<<< MINE
    .getLogger(AbstractInstanceConfig.class);
=======
            .getLogger(AbstractInstanceConfig.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/CloudInstanceConfig.java;<<<<<<< MINE
                        + "register. \nSet the property " + namespace + "validateInstanceId to false to ignore the"
                        + "metadata call");
=======
                                + "register. \nSet the property " + namespace + "validateInstanceId to false to ignore the"
                                + "metadata call");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/CloudInstanceConfig.java;<<<<<<< MINE
                AmazonInfo newInfo = AmazonInfo.Builder.newBuilder()
                .autoBuild(namespace);
                String newHostname = newInfo.get(MetaDataKey.publicHostname);
                String existingHostname = ((AmazonInfo) info)
                .get(MetaDataKey.publicHostname);
                if (newHostname != null
                        && !newHostname.equals(existingHostname)) {
                    // public dns has changed on us, re-sync it
                    logger.warn("The public hostname changed from : "
                            + existingHostname + " => " + newHostname);
                    this.info = newInfo;
                }
       } catch (Throwable t) {
=======
            AmazonInfo newInfo = AmazonInfo.Builder.newBuilder()
                    .autoBuild(namespace);
            String newHostname = newInfo.get(MetaDataKey.publicHostname);
            String existingHostname = ((AmazonInfo) info)
                    .get(MetaDataKey.publicHostname);
            if (newHostname != null
                    && !newHostname.equals(existingHostname)) {
                // public dns has changed on us, re-sync it
                logger.warn("The public hostname changed from : "
                        + existingHostname + " => " + newHostname);
                this.info = newInfo;
            }
        } catch (Throwable t) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
implements EurekaInstanceConfig {
=======
        implements EurekaInstanceConfig {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
    .getLogger(PropertiesInstanceConfig.class);
=======
            .getLogger(PropertiesInstanceConfig.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
    .getInstance().getStringProperty("eureka.client.props",
    "eureka-client");
=======
            .getInstance().getStringProperty("eureka.client.props",
                    "eureka-client");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
    .getInstance();
=======
            .getInstance();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
                                           super.isInstanceEnabledOnit()).get();
=======
                super.isInstanceEnabledOnit()).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
        .get();
=======
                .get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
                                           super.getSecurePortEnabled()).get();
=======
                super.getSecurePortEnabled()).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
        .get();
=======
                .get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
        .getBackingConfigurationSource();
=======
                .getBackingConfigurationSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
        iter.hasNext();) {
=======
             iter.hasNext(); ) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
                return INSTANCE.getStringProperty(namespace + "statusPageUrlPath",
                        DEFAULT_STATUSPAGE_URLPATH).get();
=======
        return INSTANCE.getStringProperty(namespace + "statusPageUrlPath",
                DEFAULT_STATUSPAGE_URLPATH).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
       return INSTANCE.getStringProperty(namespace + "statusPageUrl", null)
        .get();
=======
        return INSTANCE.getStringProperty(namespace + "statusPageUrl", null)
                .get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
            DEFAULT_HOMEPAGE_URLPATH).get();
=======
                DEFAULT_HOMEPAGE_URLPATH).get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
        .get();
     }
=======
                .get();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
     }
=======
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
                                                                               UNKNOWN_APPLICATION);
=======
                UNKNOWN_APPLICATION);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/appinfo/PropertiesInstanceConfig.java;<<<<<<< MINE
                    + "specific properties or the configuration is installed with a different mechanism.",
=======
                            + "specific properties or the configuration is installed with a different mechanism.",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/Application.java;<<<<<<< MINE
                                  instanceRegionChecker);
=======
                instanceRegionChecker);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/Application.java;<<<<<<< MINE
                           && null != remoteRegionsRegistry) {
=======
                        && null != remoteRegionsRegistry) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java;<<<<<<< MINE
            Map<String, AbstractQueue<InstanceInfo>> vipMap) {
=======
                                  Map<String, AbstractQueue<InstanceInfo>> vipMap) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/NamedConnectionPool.java;<<<<<<< MINE
    @Monitor(name="connectionCount", type=DataSourceType.GAUGE)
=======
    @Monitor(name = "connectionCount", type = DataSourceType.GAUGE)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                                                                               maxTotalConnections);
=======
                    maxTotalConnections);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                                    connectionIdleTimeout, jerseyClientConfig);
=======
                    connectionIdleTimeout, jerseyClientConfig);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
     * @param proxyHost 
=======
     * @param proxyHost
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
     * @param proxyPort 
=======
     * @param proxyPort
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
            int readTimeout, int maxConnectionsPerHost, int maxTotalConnections, int connectionIdleTimeout, 
            String proxyHost, String proxyPort, String proxyUserName, String proxyPassword) {
      Preconditions.checkNotNull(clientName, "Client name can not be null.");
      try {
          ClientConfig jerseyClientConfig = new ProxyCustomApacheHttpClientConfig(clientName, maxConnectionsPerHost,
                  maxTotalConnections, proxyHost, proxyPort, proxyUserName, proxyPassword);
          
          return new JerseyClient(connectionTimeout, readTimeout, 
                                  connectionIdleTimeout, jerseyClientConfig);
      } catch (Throwable e) {
          throw new RuntimeException("Cannot create Jersey client ", e);
      }
=======
                                                       int readTimeout, int maxConnectionsPerHost, int maxTotalConnections, int connectionIdleTimeout,
                                                       String proxyHost, String proxyPort, String proxyUserName, String proxyPassword) {
        Preconditions.checkNotNull(clientName, "Client name can not be null.");
        try {
            ClientConfig jerseyClientConfig = new ProxyCustomApacheHttpClientConfig(clientName, maxConnectionsPerHost,
                    maxTotalConnections, proxyHost, proxyPort, proxyUserName, proxyPassword);

            return new JerseyClient(connectionTimeout, readTimeout,
                    connectionIdleTimeout, jerseyClientConfig);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot create Jersey client ", e);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                                    connectionIdleTimeout, jerseyClientConfig);
=======
                    connectionIdleTimeout, jerseyClientConfig);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
    		int readTimeout, int maxConnectionsPerHost,
    		int maxTotalConnections, int connectionIdleTimeout) {
    	Preconditions.checkNotNull(clientName, "Client name can not be null.");	
     	try {
    		ClientConfig jerseyClientConfig = new SystemSSLCustomApacheHttpClientConfig(
    				clientName, maxConnectionsPerHost, maxTotalConnections);
    		
    		return new JerseyClient(connectionTimeout, readTimeout,
    				connectionIdleTimeout, jerseyClientConfig);
    	} catch (Throwable e) {
    		throw new RuntimeException("Cannot create System SSL Jersey client ", e);
    	}
=======
                                                           int readTimeout, int maxConnectionsPerHost,
                                                           int maxTotalConnections, int connectionIdleTimeout) {
        Preconditions.checkNotNull(clientName, "Client name can not be null.");
        try {
            ClientConfig jerseyClientConfig = new SystemSSLCustomApacheHttpClientConfig(
                    clientName, maxConnectionsPerHost, maxTotalConnections);

            return new JerseyClient(connectionTimeout, readTimeout,
                    connectionIdleTimeout, jerseyClientConfig);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot create System SSL Jersey client ", e);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
            .getInstance(TrustManagerFactory.getDefaultAlgorithm());
=======
                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                .setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
=======
                        .setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                                                                  .getDefaultAlgorithm());
=======
                        .getDefaultAlgorithm());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
    	private static final int HTTPS_PORT = 443;
    	private static final String PROTOCOL = "https";
    	
    	public SystemSSLCustomApacheHttpClientConfig(String clientName, int maxConnectionsPerHost,
    			int maxTotalConnections) throws Throwable {
    		
    		SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSystemSocketFactory();
    		SchemeRegistry sslSchemeRegistry = new SchemeRegistry();
    		sslSchemeRegistry.register(new Scheme(PROTOCOL, HTTPS_PORT, sslSocketFactory));
    		
    		MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName, sslSchemeRegistry);
    		cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
    		cm.setMaxTotal(maxTotalConnections);
    		getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);
=======
        private static final int HTTPS_PORT = 443;
        private static final String PROTOCOL = "https";

        public SystemSSLCustomApacheHttpClientConfig(String clientName, int maxConnectionsPerHost,
                                                     int maxTotalConnections) throws Throwable {

            SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSystemSocketFactory();
            SchemeRegistry sslSchemeRegistry = new SchemeRegistry();
            sslSchemeRegistry.register(new Scheme(PROTOCOL, HTTPS_PORT, sslSocketFactory));

            MonitoredConnectionManager cm = new MonitoredConnectionManager(clientName, sslSchemeRegistry);
            cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
            cm.setMaxTotal(maxTotalConnections);
            getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
    		getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
    	}
=======
            getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
            @Override
            public Thread newThread(Runnable r) {
                Thread thread = new Thread(r, "Eureka-JerseyClient-Conn-Cleaner" + threadNumber.incrementAndGet());
                thread.setDaemon(true);
                return thread;
            }
        });
=======
                    @Override
                    public Thread newThread(Runnable r) {
                        Thread thread = new Thread(r, "Eureka-JerseyClient-Conn-Cleaner" + threadNumber.incrementAndGet());
                        thread.setDaemon(true);
                        return thread;
                    }
                });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java;<<<<<<< MINE
                    .getClientHandler()
                    .getHttpClient()
                    .getConnectionManager()
                    .closeIdleConnections(connectionIdleTimeout, TimeUnit.SECONDS);
=======
                            .getClientHandler()
                            .getHttpClient()
                            .getConnectionManager()
                            .closeIdleConnections(connectionIdleTimeout, TimeUnit.SECONDS);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java;<<<<<<< MINE
        this.client   = client;
=======
        this.client = client;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DiscoveryManager.java;<<<<<<< MINE
            EurekaClientConfig eurekaConfig) {
=======
                              EurekaClientConfig eurekaConfig) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java;<<<<<<< MINE
                    + "specific properties or the configuration is installed with a different mechanism.",
=======
                            + "specific properties or the configuration is installed with a different mechanism.",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java;<<<<<<< MINE
    
	@Override
	public int getInitialInstanceInfoReplicationIntervalSeconds() {
=======

    @Override
    public int getInitialInstanceInfoReplicationIntervalSeconds() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java;<<<<<<< MINE
	}
=======
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/AbstractAzToRegionMapper.java;<<<<<<< MINE
                    || (availabilityZones.size() == 1 && availabilityZones.iterator().next().equals(DEFAULT_ZONE))
                    || availabilityZones.isEmpty()) {
=======
                        || (availabilityZones.size() == 1 && availabilityZones.iterator().next().equals(DEFAULT_ZONE))
                        || availabilityZones.isEmpty()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/EntityBodyConverter.java;<<<<<<< MINE
    throws IOException {
=======
            throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/EntityBodyConverter.java;<<<<<<< MINE
    throws IOException {
=======
            throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
    .newCounter(UNMARSHAL_ERROR);
=======
            .newCounter(UNMARSHAL_ERROR);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
    .getLogger(Converters.class);
=======
            .getLogger(Converters.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                    "com.netflix.appinfo.AmazonInfo");
=======
                            "com.netflix.appinfo.AmazonInfo");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                    "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo");
=======
                            "com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                    "java.util.Collections$EmptyMap");
=======
                            "java.util.Collections$EmptyMap");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                    "java.util.Collections$EmptyMap");
=======
                            "java.util.Collections$EmptyMap");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                        for(Map.Entry<String, String> entry: metadataMap.entrySet()) {
=======
                        for (Map.Entry<String, String> entry : metadataMap.entrySet()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                MarshallingContext context) {
=======
                            MarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                    .iterator(); iter.hasNext();) {
=======
                    .iterator(); iter.hasNext(); ) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
                UnmarshallingContext context) {
=======
                                UnmarshallingContext context) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
            HierarchicalStreamWriter writer) {
=======
                                            HierarchicalStreamWriter writer) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/converters/Converters.java;<<<<<<< MINE
            Object o) {
=======
                                              Object o) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        if(isQueryAction(action)) {
=======
        if (isQueryAction(action)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                    if(isQueryAction(action)) {
=======
                    if (isQueryAction(action)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
MessageBodyReader {
=======
        MessageBodyReader {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
    .getLogger(DiscoveryJerseyProvider.class);
=======
            .getLogger(DiscoveryJerseyProvider.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            Annotation[] annotations, MediaType mediaType) {
=======
                              Annotation[] annotations, MediaType mediaType) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            Annotation[] annotations, MediaType mediaType,
            MultivaluedMap headers, InputStream inputStream)
    throws IOException, WebApplicationException {
=======
                           Annotation[] annotations, MediaType mediaType,
                           MultivaluedMap headers, InputStream inputStream)
            throws IOException, WebApplicationException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
        if(mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
=======
        if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            } catch(Error e) {
=======
            } catch (Error e) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            Type type, Annotation[] annotations, MediaType mediaType) {
=======
                        Type type, Annotation[] annotations, MediaType mediaType) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            Annotation[] annotations, MediaType mediaType) {
=======
                               Annotation[] annotations, MediaType mediaType) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            Type type, Annotation[] annotations, MediaType mediaType,
            MultivaluedMap headers, OutputStream outputStream)
    throws IOException, WebApplicationException {
=======
                        Type type, Annotation[] annotations, MediaType mediaType,
                        MultivaluedMap headers, OutputStream outputStream)
            throws IOException, WebApplicationException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
        if(mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
=======
        if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
            .getAnnotation(Serializer.class);
=======
                    .getAnnotation(Serializer.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java;<<<<<<< MINE
    private static ISerializer getSerializer(@SuppressWarnings("rawtypes")Class serializableClass) {
=======
    private static ISerializer getSerializer(@SuppressWarnings("rawtypes") Class serializableClass) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java;<<<<<<< MINE
        DataCenterInfo myDCI = new DataCenterInfo(){
            public DataCenterInfo.Name getName(){return DataCenterInfo.Name.MyOwn;}
=======
        DataCenterInfo myDCI = new DataCenterInfo() {
            public DataCenterInfo.Name getName() {
                return DataCenterInfo.Name.MyOwn;
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java;<<<<<<< MINE
                                                        .setAppName("test")
                                                        .setVIPAddress("test.testname:1")
                                                        .setDataCenterInfo(myDCI)
                                                        .setHostName("test.hostname").build();
=======
                .setAppName("test")
                .setVIPAddress("test.testname:1")
                .setDataCenterInfo(myDCI)
                .setHostName("test.hostname").build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/shared/ApplicationsTest.java;<<<<<<< MINE
                     application.getByInstanceId("test.hostname"));
=======
                application.getByInstanceId("test.hostname"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientDisableRegistryTest.java;<<<<<<< MINE
                MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientDisableRegistryTest.java;<<<<<<< MINE
                           mockLocalEurekaServer.isSentRegistry());
=======
                mockLocalEurekaServer.isSentRegistry());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
            Thread.sleep(7*1000);
=======
            Thread.sleep(7 * 1000);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
            Thread.sleep(7*1000);
=======
            Thread.sleep(7 * 1000);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
                                                                                   REMOTE_REGION);
=======
                REMOTE_REGION);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
                            instancesByVipAddress.size());
=======
                instancesByVipAddress.size());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java;<<<<<<< MINE
                            instancesByVipAddress.size());
=======
                instancesByVipAddress.size());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest.java;<<<<<<< MINE
                                                             "http://localhost:" + eurekaPort +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                "http://localhost:" + eurekaPort +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest.java;<<<<<<< MINE
                @UpStatus   Supplier<Boolean> upStatusSupplier,
=======
                @UpStatus Supplier<Boolean> upStatusSupplier,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest.java;<<<<<<< MINE
                ) {
=======
        ) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest.java;<<<<<<< MINE
            Assert.assertEquals(state, (boolean)upStatusSupplier.get());
=======
            Assert.assertEquals(state, (boolean) upStatusSupplier.get());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/DiscoveryStatusCheckerTest.java;<<<<<<< MINE
                    new AbstractModule() {
                        @Override
                        protected void configure() {
                            bind(EventBus.class).toInstance(eventBus);
                            bind(Service.class);
                            bind(InstanceInfo.class).toInstance(instanceInfo);
                        }
                    })
=======
                        new AbstractModule() {
                            @Override
                            protected void configure() {
                                bind(EventBus.class).toInstance(eventBus);
                                bind(Service.class);
                                bind(InstanceInfo.class).toInstance(instanceInfo);
                            }
                        })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest.java;<<<<<<< MINE
                                                             "http://localhost:" + NOT_AVAILABLE_EUREKA_PORT /*Should always be unavailable*/
                                                             +
                                                             MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                "http://localhost:" + NOT_AVAILABLE_EUREKA_PORT /*Should always be unavailable*/
                        +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest.java;<<<<<<< MINE
                                     new Provider<BackupRegistry>() {
                                         @Override
                                         public BackupRegistry get() {
                                             return backupRegistry;
                                         }
                                     });
=======
                new Provider<BackupRegistry>() {
                    @Override
                    public BackupRegistry get() {
                        return backupRegistry;
                    }
                });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/BackUpRegistryTest.java;<<<<<<< MINE
            } else if(registeredApplication.getName().equals(REMOTE_REGION_APP_NAME)) {
=======
            } else if (registeredApplication.getName().equals(REMOTE_REGION_APP_NAME)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
            Thread.sleep( 3 * refreshRate * 1000);
=======
            Thread.sleep(3 * refreshRate * 1000);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
                        System.out.println("Eureka port: " +  port + ". " + System.currentTimeMillis() +". Not including delta as it has already been sent.");
=======
                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() + ". Not including delta as it has already been sent.");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
                } else if(pathInfo.equals("apps/")) {
=======
                } else if (pathInfo.equals("apps/")) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() +". Not including delta apps in /apps response, as delta has not been sent.");
=======
                        System.out.println("Eureka port: " + port + ". " + System.currentTimeMillis() + ". Not including delta apps in /apps response, as delta has not been sent.");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7afa7b0_9711533/rev_7afa7b0-9711533/eureka-client/src/test/java/com/netflix/discovery/MockRemoteEurekaServer.java;<<<<<<< MINE
            if(!handled) {
=======
            if (!handled) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_491cca0_3f69679/rev_491cca0-3f69679/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java;<<<<<<< MINE
    private Set<String> getASGNames() {
        Set<String> asgNames = new HashSet<String>();
        Applications apps = PeerAwareInstanceRegistryImpl.getInstance().getApplications(false);
=======
    private Set<CacheKey> getCacheKeys() {
        Set<CacheKey> cacheKeys = new HashSet<CacheKey>();
        Applications apps = PeerAwareInstanceRegistry.getInstance().getApplications(false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_7c9f6ea_0d7c1b1/rev_7c9f6ea-0d7c1b1/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java;<<<<<<< MINE
            .expireAfterAccess(10, TimeUnit.MINUTES)
=======
            .expireAfterAccess(eurekaConfig.getASGCacheExpiryTimeoutMs(), TimeUnit.MILLISECONDS)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_9b180dc_1c2989d/rev_9b180dc-1c2989d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        public DiscoveryClientOptionalArgs(EventBus eventBus, Provider<HealthCheckCallback> healthCheckCallbackProvider, Provider<HealthCheckHandler> healthCheckHandlerProvider) {
=======
        public void setEventBus(EventBus eventBus) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a995b04_c1c4cbe/rev_a995b04-c1c4cbe/eureka-core/src/main/java/com/netflix/eureka/cluster/JerseyReplicationClient.java;<<<<<<< MINE
    public JerseyReplicationClient(EurekaJerseyClient jerseyClient, String serviceUrl) {
        super(jerseyClient, serviceUrl);
        this.jerseyClient = jerseyClient;
        this.jerseyApacheClient = jerseyClient.getClient();
=======
    public JerseyReplicationClient(EurekaServerConfig config, ServerCodecs serverCodecs, String serviceUrl) {
        super(serviceUrl);
        String name = getClass().getSimpleName() + ": " + serviceUrl + "apps/: ";

        try {
            String hostname;
            try {
                hostname = new URL(serviceUrl).getHost();
            } catch (MalformedURLException e) {
                hostname = serviceUrl;
            }

            String jerseyClientName = "Discovery-PeerNodeClient-" + hostname;
            EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                    .withClientName(jerseyClientName)
                    .withUserAgent("Java-EurekaClient-Replication")
                    .withEncoderWrapper(serverCodecs.getFullJsonCodec())
                    .withDecoderWrapper(serverCodecs.getFullJsonCodec())
                    .withConnectionTimeout(config.getPeerNodeConnectTimeoutMs())
                    .withReadTimeout(config.getPeerNodeReadTimeoutMs())
                    .withMaxConnectionsPerHost(config.getPeerNodeTotalConnectionsPerHost())
                    .withMaxTotalConnections(config.getPeerNodeTotalConnections())
                    .withConnectionIdleTimeout(config.getPeerNodeConnectionIdleTimeoutSeconds());

            if (serviceUrl.startsWith("https://") &&
                    "true".equals(System.getProperty("com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory"))) {
                clientBuilder.withSystemSSLConfiguration();
            }
            jerseyClient = clientBuilder.build();
            jerseyApacheClient = jerseyClient.getClient();
            jerseyApacheClient.addFilter(new DynamicGZIPContentEncodingFilter(config));
        } catch (Throwable e) {
            throw new RuntimeException("Cannot Create new Replica Node :" + name, e);
        }

        String ip = null;
        try {
            ip = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            logger.warn("Cannot find localhost ip", e);
        }
        EurekaServerIdentity identity = new EurekaServerIdentity(ip);
        jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));
    }

    @Override
    protected Client getJerseyClient() {
        return jerseyApacheClient;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_a995b04_c1c4cbe/rev_a995b04-c1c4cbe/eureka-client/src/test/java/com/netflix/discovery/converters/EurekaJsonAndXmlJacksonCodecTest.java;<<<<<<< MINE
    public void testInstanceInfoWithNoMetaEncodeDecodeWithJson() throws Exception {
        doInstanceInfoWithNoMetaEncodeDecode(new EurekaJsonJacksonCodec().getObjectMapper());
    }

    @Test
    public void testInstanceInfoWithNoMetaEncodeDecodeWithXml() throws Exception {
        doInstanceInfoWithNoMetaEncodeDecode(new EurekaXmlJacksonCodec().getObjectMapper());
    }

    private void doInstanceInfoWithNoMetaEncodeDecode(ObjectMapper mapper) throws Exception {
        InstanceInfo noMetaDataInfo = new InstanceInfo.Builder(infoIterator.next()).setMetadata(null).build();

        String encodedString = mapper.writeValueAsString(noMetaDataInfo);
        InstanceInfo decodedValue = mapper.readValue(encodedString, InstanceInfo.class);

        assertThat(decodedValue.getId(), is(equalTo(noMetaDataInfo.getId())));
    }

    @Test
=======
    public void testInstanceInfoWithNoMetaEncodeDecodeWithJson() throws Exception {
        doInstanceInfoWithNoMetaEncodeDecode(new EurekaJsonJacksonCodec().getObjectMapper(), true);
    }

    @Test
    public void testInstanceInfoWithNoMetaEncodeDecodeWithXml() throws Exception {
        doInstanceInfoWithNoMetaEncodeDecode(new EurekaXmlJacksonCodec().getObjectMapper(), false);
    }

    private void doInstanceInfoWithNoMetaEncodeDecode(ObjectMapper mapper, boolean json) throws Exception {
        InstanceInfo noMetaDataInfo = new InstanceInfo.Builder(infoIterator.next()).setMetadata(null).build();

        String encodedString = mapper.writeValueAsString(noMetaDataInfo);

        // Backward compatibility with old codec
        if (json) {
            assertThat(encodedString.contains("\"@class\":\"java.util.Collections$EmptyMap\""), is(true));
        }

        InstanceInfo decodedValue = mapper.readValue(encodedString, InstanceInfo.class);
        assertThat(decodedValue.getId(), is(equalTo(noMetaDataInfo.getId())));
        assertThat(decodedValue.getMetadata().isEmpty(), is(true));
    }

    @Test
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-server/src/test/java/com/netflix/eureka/resources/EurekaClientServerRestIntegrationTest.java;<<<<<<< MINE
        jerseyReplicationClient = new JerseyReplicationClient(eurekaServerConfig, eurekaServiceUrl);
=======

        ServerCodecs serverCodecs = new DefaultServerCodecs(eurekaServerConfig);
        jerseyReplicationClient = new JerseyReplicationClient(eurekaServerConfig, serverCodecs, eurekaServiceUrl);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter.java;<<<<<<< MINE
        // nothing to do here
=======
        if (serverConfig == null) {
            EurekaServerContext serverContext = (EurekaServerContext) filterConfig.getServletContext()
                    .getAttribute(EurekaServerContext.class.getName());
            serverConfig = serverContext.getServerConfig();
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/ServerRequestAuthFilter.java;<<<<<<< MINE
        if (EurekaServerConfigurationManager.getInstance().getConfiguration().shouldLogIdentityHeaders()) {
=======
        if (serverConfig.shouldLogIdentityHeaders()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
 * @author Karthik Ranganathan, Greg Kim
=======
 * @author Karthik Ranganathan, Greg Kim, David Liu
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            // For backward compatibility
            JsonXStream.getInstance().registerConverter(
                    new V1AwareInstanceInfoConverter(),
                    XStream.PRIORITY_VERY_HIGH);
            XmlXStream.getInstance().registerConverter(
                    new V1AwareInstanceInfoConverter(),
                    XStream.PRIORITY_VERY_HIGH);
            InstanceInfo info = ApplicationInfoManager.getInstance().getInfo();

            PeerAwareInstanceRegistryImpl registry = PeerAwareInstanceRegistryImpl.getInstance();

            // Copy registry from neighboring eureka node
            int registryCount = registry.syncUp();
            registry.openForTraffic(registryCount);

            // Only in AWS, enable the binding functionality
            if (Name.Amazon.equals(info.getDataCenterInfo().getName())) {
                handleEIPBinding(registry);
            }
            // Initialize available remote registry
            PeerAwareInstanceRegistryImpl.getInstance().initRemoteRegionRegistry();
            // Register all monitoring statistics.
            EurekaMonitors.registerAllStats();

            for (PeerEurekaNode node : registry.getReplicaNodes()) {
                logger.info("Replica node URL:  " + node.getServiceUrl());
            }

=======
            ServletContext sc = event.getServletContext();
            sc.setAttribute(EurekaServerContext.class.getName(), serverContext);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
    protected void initEurekaEnvironment() {
=======
    protected void initEurekaEnvironment() throws Exception {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_DATACENTER, DEFAULT);
=======
            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, DEFAULT);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_DATACENTER, dataCenter);
=======
            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER, dataCenter);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            ConfigurationManager.getConfigInstance().setProperty(
                    ARCHAIUS_DEPLOYMENT_ENVIRONMENT, TEST);
=======
            ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT, TEST);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
        EurekaInstanceConfig config;
        if (CLOUD.equals(ConfigurationManager.getDeploymentContext()
                .getDeploymentDatacenter())) {
            config = new CloudInstanceConfig();
=======
    }

    /**
     * init hook for server context. Override for custom logic.
     */
    protected void initEurekaServerContext() throws Exception {
        EurekaServerConfig eurekaServerConfig = new DefaultEurekaServerConfig();

        // For backward compatibility
        JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);
        XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter(), XStream.PRIORITY_VERY_HIGH);

        EurekaInstanceConfig instanceConfig = isCloud(ConfigurationManager.getDeploymentContext())
                ? new CloudInstanceConfig()
                : new MyDataCenterInstanceConfig();

        logger.info("Initializing the eureka client...");
        ServerCodecs serverCodecs = new DefaultServerCodecs(eurekaServerConfig);

        ApplicationInfoManager applicationInfoManager = new ApplicationInfoManager(
                instanceConfig, new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get());

        EurekaClientConfig eurekaClientConfig = new DefaultEurekaClientConfig();
        EurekaClient eurekaClient = new DiscoveryClient(applicationInfoManager, eurekaClientConfig);

        PeerAwareInstanceRegistry registry;
        if (isAws(applicationInfoManager.getInfo())) {
            registry = new AwsInstanceRegistry(
                    eurekaServerConfig,
                    eurekaClientConfig,
                    serverCodecs,
                    eurekaClient
            );
            eipManager = new EIPManager(eurekaServerConfig, eurekaClientConfig, registry, applicationInfoManager);
            eipManager.start();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            config = new MyDataCenterInstanceConfig();
        }
        logger.info("Initializing the eureka client...");
=======
            registry = new PeerAwareInstanceRegistryImpl(
                    eurekaServerConfig,
                    eurekaClientConfig,
                    serverCodecs,
                    eurekaClient
            );
        }

        PeerEurekaNodes peerEurekaNodes = new PeerEurekaNodes(
                registry,
                eurekaServerConfig,
                eurekaClientConfig,
                serverCodecs,
                applicationInfoManager
        );

        serverContext = new DefaultEurekaServerContext(
                eurekaServerConfig,
                serverCodecs,
                registry,
                peerEurekaNodes,
                applicationInfoManager
        );

        EurekaServerContextHolder.initialize(serverContext);

        serverContext.initialize();
        logger.info("Initialized server context");

        // Copy registry from neighboring eureka node
        int registryCount = registry.syncUp();
        registry.openForTraffic(applicationInfoManager, registryCount);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
        DiscoveryManager.getInstance().initComponent(config,
                new DefaultEurekaClientConfig());
=======
        // Register all monitoring statistics.
        EurekaMonitors.registerAllStats();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
            logger.info(new Date().toString()
                    + " Shutting down Eureka Server..");
            InstanceInfo info = ApplicationInfoManager.getInstance().getInfo();
            // Unregister all MBeans associated w/ DSCounters
            EurekaMonitors.shutdown();
            for (int i = 0; i < EurekaServerConfigurationManager.getInstance()
                    .getConfiguration().getEIPBindRebindRetries(); i++) {
                try {
                    if (Name.Amazon.equals(info.getDataCenterInfo().getName())) {
                        EIPManager.getInstance().unbindEIP();
                    }
                    break;
                } catch (Throwable e) {
                    logger.warn("Cannot unbind the EIP from the instance");
                    Thread.sleep(1000);
                }
            }
            PeerAwareInstanceRegistryImpl.getInstance().shutdown();
=======
            logger.info("{} Shutting down Eureka Server..", new Date().toString());
            ServletContext sc = event.getServletContext();
            sc.removeAttribute(EurekaServerContext.class.getName());

            destroyEurekaServerContext();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
        logger.info(new Date().toString()
                + " Eureka Service is now shutdown...");
=======
        logger.info("{} Eureka Service is now shutdown...", new Date().toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
     * Users can override to clean up the environment themselves.
=======
     * Server context shutdown hook. Override for custom logic
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
    protected void destroyEurekaEnvironment() {

=======
    protected void destroyEurekaServerContext() throws Exception {
        EurekaMonitors.shutdown();
        if (eipManager != null) {
            eipManager.shutdown();
        }
        if (serverContext != null) {
            serverContext.shutdown();
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
     * Handles EIP binding process in AWS Cloud.
     *
     * @throws InterruptedException
=======
     * Users can override to clean up the environment themselves.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
    private void handleEIPBinding(PeerAwareInstanceRegistryImpl registry)
            throws InterruptedException {
        EurekaServerConfig eurekaServerConfig = EurekaServerConfigurationManager.getInstance().getConfiguration();
        int retries = eurekaServerConfig.getEIPBindRebindRetries();
        // Bind to EIP if needed
        EIPManager eipManager = EIPManager.getInstance();
        for (int i = 0; i < retries; i++) {
            try {
                if (eipManager.isEIPBound()) {
                    break;
                } else {
                    eipManager.bindEIP();
                }
            } catch (Throwable e) {
                logger.error("Cannot bind to EIP", e);
                Thread.sleep(EIP_BIND_SLEEP_TIME_MS);
            }
        }
        // Schedule a timer which periodically checks for EIP binding.
        scheduleEIPBindTask(eurekaServerConfig, registry);
=======
    protected void destroyEurekaEnvironment() throws Exception {

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaBootStrap.java;<<<<<<< MINE
    /**
     * Schedules a EIP binding timer task which constantly polls for EIP in the
     * same zone and binds it to itself.If the EIP is taken away for some
     * reason, this task tries to get the EIP back. Hence it is advised to take
     * one EIP assignment per instance in a zone.
     *
     * @param eurekaServerConfig
     *            the Eureka Server Configuration.
     */
    private void scheduleEIPBindTask(
            EurekaServerConfig eurekaServerConfig, final PeerAwareInstanceRegistryImpl registry) {
        timer.schedule(new TimerTask() {

                           @Override
                           public void run() {
                               try {
                                   // If the EIP is not bound, the registry could  be stale
                                   // First sync up the registry from the neighboring node before
                                   // trying to bind the EIP
                                   EIPManager eipManager = EIPManager.getInstance();
                                   if (!eipManager.isEIPBound()) {
                                       registry.clearRegistry();
                                       int count = registry.syncUp();
                                       registry.openForTraffic(count);
                                   } else {
                                       // An EIP is already bound
                                       return;
                                   }
                                   eipManager.bindEIP();
                               } catch (Throwable e) {
                                   logger.error("Could not bind to EIP", e);
                               }
                           }
                       }, eurekaServerConfig.getEIPBindingRetryIntervalMs(),
                eurekaServerConfig.getEIPBindingRetryIntervalMs());
=======
    protected boolean isAws(InstanceInfo selfInstanceInfo) {
        boolean result = DataCenterInfo.Name.Amazon == selfInstanceInfo.getDataCenterInfo().getName();
        logger.info("isAws returned {}", result);
        return result;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter.java;<<<<<<< MINE
            if (config().isRateLimiterEnabled()) {
=======
            if (serverConfig.isRateLimiterEnabled()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter.java;<<<<<<< MINE
    private static boolean isRateLimited(HttpServletRequest request, Target target) {
=======
    private boolean isRateLimited(HttpServletRequest request, Target target) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter.java;<<<<<<< MINE
    private static boolean isPrivileged(HttpServletRequest request) {
        if (config().isRateLimiterThrottleStandardClients()) {
=======
    private boolean isPrivileged(HttpServletRequest request) {
        if (serverConfig.isRateLimiterThrottleStandardClients()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter.java;<<<<<<< MINE
    private static boolean isOverloaded(Target target) {
        int maxInWindow = config().getRateLimiterBurstSize();
        int fetchWindowSize = config().getRateLimiterRegistryFetchAverageRate();
=======
    private boolean isOverloaded(Target target) {
        int maxInWindow = serverConfig.getRateLimiterBurstSize();
        int fetchWindowSize = serverConfig.getRateLimiterRegistryFetchAverageRate();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/RateLimitingFilter.java;<<<<<<< MINE
    private static void incrementStats(Target target) {
        if (config().isRateLimiterEnabled()) {
=======
    private void incrementStats(Target target) {
        if (serverConfig.isRateLimiterEnabled()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig.java;<<<<<<< MINE
     * The {@link com.netflix.eureka.resources.ResponseCache} currently uses a two level caching
=======
     * The {@link com.netflix.eureka.registry.ResponseCache} currently uses a two level caching
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/cluster/JerseyReplicationClient.java;<<<<<<< MINE
    public JerseyReplicationClient(EurekaServerConfig config, String serviceUrl) {
=======
    public JerseyReplicationClient(EurekaServerConfig config, ServerCodecs serverCodecs, String serviceUrl) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/StatusFilter.java;<<<<<<< MINE
        if (status != InstanceStatus.UP
                && response instanceof HttpServletResponse) {
=======
        if (status != InstanceStatus.UP && response instanceof HttpServletResponse) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource.java;<<<<<<< MINE
    /* For testing */ AbstractVIPResource(ResponseCache responseCache) {
        this.responseCache = responseCache;
=======
    AbstractVIPResource(EurekaServerContext server) {
        this.registry = server.getRegistry();
        this.responseCache = registry.getResponseCache();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource.java;<<<<<<< MINE
    protected AbstractVIPResource() {
        this(ResponseCache.getInstance());
=======
    AbstractVIPResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource.java;<<<<<<< MINE
                                      EurekaAccept eurekaAccept, ResponseCache.Key.EntityType entityType) {
        if (!PeerAwareInstanceRegistryImpl.getInstance().shouldAllowAccess(false)) {
=======
                                      EurekaAccept eurekaAccept, Key.EntityType entityType) {
        if (!registry.shouldAllowAccess(false)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource.java;<<<<<<< MINE
            keyType = ResponseCache.KeyType.XML;
=======
            keyType = Key.KeyType.XML;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/AbstractVIPResource.java;<<<<<<< MINE
        ResponseCache.Key cacheKey = new ResponseCache.Key(
=======
        Key cacheKey = new Key(
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
        return builder.build();
=======
    public StatusResource() {
        this(EurekaServerContextHolder.getInstance().getServerContext());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
    private boolean isReplicaAvailable(String myAppName, String url) {

        try {
            String givenHostName = new URI(url).getHost();
            Application app = PeerAwareInstanceRegistryImpl.getInstance()
                    .getApplication(myAppName, false);
            for (InstanceInfo info : app.getInstances()) {
                if (info.getHostName().equals(givenHostName)) {
                    return true;
                }
            }
            givenHostName = new URI(url).getHost();
        } catch (Throwable e) {
            logger.error("Could not determine if the replica is available ", e);
        }
        return false;
=======
    @GET
    public StatusInfo getStatusInfo() {
        return statusUtil.getStatusInfo();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
    /* For testing */ InstanceResource(ApplicationResource app, String id, PeerAwareInstanceRegistryImpl registry) {
=======
    InstanceResource(ApplicationResource app, String id, EurekaServerConfig serverConfig, PeerAwareInstanceRegistry registry) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java;<<<<<<< MINE
        if (lastDirtyTimestamp != null
                && EurekaServerConfigurationManager.getInstance().getConfiguration().shouldSyncWhenTimestampDiffers()) {
=======
        if (lastDirtyTimestamp != null && serverConfig.shouldSyncWhenTimestampDiffers()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
            throw new RuntimeException(
                    "Cannot find ASG enum for the given string " + s);
=======
            throw new RuntimeException("Cannot find ASG enum for the given string " + s);
        }
    }

    protected final PeerAwareInstanceRegistry registry;
    protected final AwsAsgUtil awsAsgUtil;

    @Inject
    ASGResource(EurekaServerContext eurekaServer) {
        this.registry = eurekaServer.getRegistry();
        if (registry instanceof AwsInstanceRegistry) {
            this.awsAsgUtil = ((AwsInstanceRegistry) registry).getAwsAsgUtil();
        } else {
            this.awsAsgUtil = null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
     * @param asgName
     *            the name of the ASG for which the status needs to be changed.
     * @param newStatus
     *            the new status {@link ASGStatus} of the ASG.
     * @param isReplication
     *            a header parameter containing information whether this is
     *            replicated from other nodes.
=======
     * @param asgName the name of the ASG for which the status needs to be changed.
     * @param newStatus the new status {@link ASGStatus} of the ASG.
     * @param isReplication a header parameter containing information whether this is replicated from other nodes.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
            logger.info("Trying to update ASG Status for ASG {} to {}",
                    asgName, newStatus);
=======
            logger.info("Trying to update ASG Status for ASG {} to {}", asgName, newStatus);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
            AwsAsgUtil.getInstance().setStatus(asgName,
                    (ASGStatus.DISABLED.equals(asgStatus) ? false : true));
            PeerAwareInstanceRegistryImpl.getInstance().statusUpdate(asgName,
                    asgStatus, Boolean.valueOf(isReplication));
            logger.debug("Updated ASG Status for ASG {} to {}", asgName,
                    asgStatus);
=======
            awsAsgUtil.setStatus(asgName, (!ASGStatus.DISABLED.equals(asgStatus)));
            registry.statusUpdate(asgName, asgStatus, Boolean.valueOf(isReplication));
            logger.debug("Updated ASG Status for ASG {} to {}", asgName, asgStatus);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ASGResource.java;<<<<<<< MINE
            logger.error("Cannot update the status" + newStatus
                    + " for the ASG " + asgName, e);
=======
            logger.error("Cannot update the status {} for the ASG {}", newStatus, asgName, e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
    /* For testing */ ApplicationResource(String appName, PeerAwareInstanceRegistryImpl registry, ResponseCache responseCache) {
=======
    ApplicationResource(String appName,
                        EurekaServerConfig serverConfig,
                        PeerAwareInstanceRegistry registry) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
        this.responseCache = responseCache;
    }

    public ApplicationResource(String appName) {
        this(appName, PeerAwareInstanceRegistryImpl.getInstance(), ResponseCache.getInstance());
=======
        this.responseCache = registry.getResponseCache();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
            keyType = KeyType.XML;
=======
            keyType = Key.KeyType.XML;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java;<<<<<<< MINE
        return new InstanceResource(this, id);
=======
        return new InstanceResource(this, id, serverConfig, registry);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/VIPResource.java;<<<<<<< MINE
                EurekaAccept.fromString(eurekaAccept), ResponseCache.Key.EntityType.VIP);
=======
                EurekaAccept.fromString(eurekaAccept), Key.EntityType.VIP);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
        return new ApplicationResource(instanceInfo.getAppName());
=======
        return new ApplicationResource(instanceInfo.getAppName(), serverConfig, registry);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/PeerReplicationResource.java;<<<<<<< MINE
        return new InstanceResource(applicationResource, instanceInfo.getId());
=======
        return new InstanceResource(applicationResource, instanceInfo.getId(), serverConfig, registry);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/main/java/com/netflix/eureka/resources/SecureVIPResource.java;<<<<<<< MINE
                EurekaAccept.fromString(eurekaAccept), ResponseCache.Key.EntityType.SVIP);
=======
                EurekaAccept.fromString(eurekaAccept), Key.EntityType.SVIP);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/RateLimitingFilterTest.java;<<<<<<< MINE
        ApplicationInfoManager.getInstance().initComponent(new MyDataCenterInstanceConfig());
=======
        ApplicationInfoManager applicationInfoManager = new ApplicationInfoManager(new MyDataCenterInstanceConfig());
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        EurekaServerContext mockServer = mock(EurekaServerContext.class);
        when(mockServer.getServerConfig()).thenReturn(config);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/RateLimitingFilterTest.java;<<<<<<< MINE
        DefaultEurekaServerConfig config = new DefaultEurekaServerConfig();
        EurekaServerConfigurationManager.getInstance().setConfiguration(config);
=======
        filter = new RateLimitingFilter(mockServer);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/mock/MockRemoteEurekaServer.java;<<<<<<< MINE
        handler.addFilterWithMapping(ServerRequestAuthFilter.class, "/*", 1);
        handler.addFilterWithMapping(RateLimitingFilter.class, "/*", 1);
=======
        EurekaServerConfig serverConfig = new DefaultEurekaServerConfig();
        EurekaServerContext serverContext = mock(EurekaServerContext.class);
        when(serverContext.getServerConfig()).thenReturn(serverConfig);

        handler.addFilterWithMapping(ServerRequestAuthFilter.class, "/*", 1).setFilter(new ServerRequestAuthFilter(serverContext));
        handler.addFilterWithMapping(RateLimitingFilter.class, "/*", 1).setFilter(new RateLimitingFilter(serverContext));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/cluster/JerseyReplicationClientTest.java;<<<<<<< MINE
        replicationClient = new JerseyReplicationClient(config, "http://localhost:" + serverMockRule.getHttpPort() + "/eureka/v2");
=======
        replicationClient = new JerseyReplicationClient(config, serverCodecs,
                "http://localhost:" + serverMockRule.getHttpPort() + "/eureka/v2");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
        EurekaServerConfig serverConfig = new DefaultEurekaServerConfig();
        EurekaServerConfigurationManager.getInstance().setConfiguration(serverConfig);
=======
        serverConfig = spy(new DefaultEurekaServerConfig());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
                "http://localhost:" + mockRemoteEurekaServer.getPort() +
                        MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
=======
                "http://localhost:" + mockRemoteEurekaServer.getPort() + MockRemoteEurekaServer.EUREKA_API_BASE_PATH);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
        DiscoveryManager.getInstance().setEurekaClientConfig(config);
        client = new DiscoveryClient(applicationInfoManager, config);
        registry = new TestPeerAwareInstanceRegistry();
        registry.initRemoteRegionRegistry();
=======

        client = new DiscoveryClient(applicationInfoManager, clientConfig);

        ServerCodecs serverCodecs = new DefaultServerCodecs(serverConfig);
        registry = new TestPeerAwareInstanceRegistry(serverConfig, clientConfig, serverCodecs, client);
        serverContext = new DefaultEurekaServerContext(
                serverConfig,
                serverCodecs,
                registry,
                mock(PeerEurekaNodes.class),
                applicationInfoManager
        );

        serverContext.initialize();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/AbstractTester.java;<<<<<<< MINE
        registry.shutdown();
=======
        serverContext.shutdown();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/ApplicationsResourceTest.java;<<<<<<< MINE
        applicationsResource = new ApplicationsResource(registry, new ResponseCache(registry));
=======
        applicationsResource = new ApplicationsResource(serverContext);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/ApplicationsResourceTest.java;<<<<<<< MINE
                InstanceInfo changed = new InstanceInfo.Builder(instanceInfo)
                        .setASGName(null).build();  // null asgName to get around AwsAsgUtil check
                registry.register(changed, false);
=======
                registry.register(instanceInfo, false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/AbstractVIPResourceTest.java;<<<<<<< MINE
        resource = new AbstractVIPResource(new ResponseCache(registry)) {
=======
        resource = new AbstractVIPResource(serverContext) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/AbstractVIPResourceTest.java;<<<<<<< MINE
            protected Response getVipResponse(String version, String entityName, String acceptHeader, EurekaAccept eurekaAccept, ResponseCache.Key.EntityType entityType) {
=======
            protected Response getVipResponse(String version, String entityName, String acceptHeader, EurekaAccept eurekaAccept, Key.EntityType entityType) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/AbstractVIPResourceTest.java;<<<<<<< MINE
                ResponseCache.Key.EntityType.VIP
=======
                Key.EntityType.VIP
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/AbstractVIPResourceTest.java;<<<<<<< MINE
                ResponseCache.Key.EntityType.VIP
=======
                Key.EntityType.VIP
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/InstanceResourceTest.java;<<<<<<< MINE
        applicationResource = new ApplicationResource(testInstanceInfo.getAppName());
        instanceResource = new InstanceResource(applicationResource, testInstanceInfo.getId(), registry);
=======
        applicationResource = new ApplicationResource(testInstanceInfo.getAppName(), serverContext.getServerConfig(), serverContext.getRegistry());
        instanceResource = new InstanceResource(applicationResource, testInstanceInfo.getId(), serverContext.getServerConfig(), serverContext.getRegistry());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/ApplicationResourceTest.java;<<<<<<< MINE
        applicationResource = new ApplicationResource(testApplication.getName(), registry, new ResponseCache(registry));
=======
        applicationResource = new ApplicationResource(testApplication.getName(), serverContext.getServerConfig(), serverContext.getRegistry());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/ApplicationResourceTest.java;<<<<<<< MINE
            InstanceInfo changed = new InstanceInfo.Builder(instanceInfo)
                    .setASGName(null).build();  // null asgName to get around AwsAsgUtil check
            registry.register(changed, false);
=======
            registry.register(instanceInfo, false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-core/src/test/java/com/netflix/eureka/resources/PeerReplicationResourceTest.java;<<<<<<< MINE
    private final PeerReplicationResource peerReplicationResource = new PeerReplicationResource() {
=======
    private final PeerReplicationResource peerReplicationResource = new PeerReplicationResource(mock(EurekaServerContext.class)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager.java;<<<<<<< MINE
            throw new RuntimeException(
                    "Failed to initialize ApplicationInfoManager", e);
=======
            throw new RuntimeException("Failed to initialize ApplicationInfoManager", e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/PropertyBasedAzToRegionMapper.java;<<<<<<< MINE
        this.clientConfig = clientConfig;
=======
        super(clientConfig);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/AbstractAzToRegionMapper.java;<<<<<<< MINE
    protected AbstractAzToRegionMapper() {
=======
    protected AbstractAzToRegionMapper(EurekaClientConfig clientConfig) {
        this.clientConfig = clientConfig;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/EurekaClient.java;<<<<<<< MINE
    // =======
     * @deprecated see {@link com.netflix.discovery.endpoint.EndpointUtils} for replacement
     *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            final String zone = getZone(myInfo);
            eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));
=======
            instanceInfo = myInfo;
            if (myInfo != null) {
                appPathIdentifier = instanceInfo.getAppName() + "/" + instanceInfo.getId();
            } else {
                logger.warn("Setting instanceInfo to a passed in null value");
            }

            this.urlRandomizer = new EndpointUtils.InstanceInfoBasedUrlRandomizer(instanceInfo);
            String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
            final String zone = InstanceInfo.getZone(availZones, myInfo);
            eurekaServiceUrls.set(timedGetDiscoveryServiceUrls(zone));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                azToRegionMapper = new DNSBasedAzToRegionMapper();
=======
                azToRegionMapper = new DNSBasedAzToRegionMapper(clientConfig);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        List<String> orderedUrls = new ArrayList<String>();
        String region = getRegion();
        String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
        if (availZones == null || availZones.length == 0) {
            availZones = new String[1];
            availZones[0] = "default";
        }
        logger.debug("The availability zone for the given region {} are {}",
                region, Arrays.toString(availZones));
        int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,
                availZones);

        List<String> serviceUrls = clientConfig
                .getEurekaServerServiceUrls(availZones[myZoneOffset]);
        if (serviceUrls != null) {
            orderedUrls.addAll(serviceUrls);
        }
        int currentOffset = myZoneOffset == (availZones.length - 1) ? 0
                : (myZoneOffset + 1);
        while (currentOffset != myZoneOffset) {
            serviceUrls = clientConfig
                    .getEurekaServerServiceUrls(availZones[currentOffset]);
            if (serviceUrls != null) {
                orderedUrls.addAll(serviceUrls);
            }
            if (currentOffset == (availZones.length - 1)) {
                currentOffset = 0;
            } else {
                currentOffset++;
            }
        }

        if (orderedUrls.size() < 1) {
            throw new IllegalArgumentException(
                    "DiscoveryClient: invalid serviceUrl specified!");
        }
        return orderedUrls;
=======
        return EndpointUtils.getServiceUrlsFromConfig(clientConfig, instanceZone, preferSameZone);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        List<String> orderedUrls = new ArrayList<String>();
        String region = getRegion();
        String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
        if (availZones == null || availZones.length == 0) {
            availZones = new String[1];
            availZones[0] = "default";
        }
        logger.debug("The availability zone for the given region {} are {}",
                region, Arrays.toString(availZones));
        int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,
                availZones);

        List<String> serviceUrls = clientConfig
                .getEurekaServerServiceUrls(availZones[myZoneOffset]);
        if (serviceUrls != null) {
            orderedUrls.addAll(serviceUrls);
        }
        int currentOffset = myZoneOffset == (availZones.length - 1) ? 0
                : (myZoneOffset + 1);
        while (currentOffset != myZoneOffset) {
            serviceUrls = clientConfig
                    .getEurekaServerServiceUrls(availZones[currentOffset]);
            if (serviceUrls != null) {
                orderedUrls.addAll(serviceUrls);
            }
            if (currentOffset == (availZones.length - 1)) {
                currentOffset = 0;
            } else {
                currentOffset++;
            }
        }

        if (orderedUrls.size() < 1) {
            throw new IllegalArgumentException(
                    "DiscoveryClient: invalid serviceUrl specified!");
        }
        return orderedUrls;
=======
        return EndpointUtils.getServiceUrlsFromConfig(clientConfig, instanceZone, preferSameZone);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
        Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();
        String region = getRegion();
        // Get zone-specific DNS names for the given region so that we can get a
        // list of available zones
        Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(region);
        Set<String> availableZones = zoneDnsNamesMap.keySet();
        List<String> zones = new ArrayList<String>(availableZones);
        if (zones.isEmpty()) {
            throw new RuntimeException("No available zones configured for the instanceZone " + instanceZone);
        }
        int zoneIndex = 0;
        boolean zoneFound = false;
        for (String zone : zones) {
            logger.debug(
                    "Checking if the instance zone {} is the same as the zone from DNS {}",
                    instanceZone, zone);
            if (preferSameZone) {
                if (instanceZone.equalsIgnoreCase(zone)) {
                    zoneFound = true;
                }
            } else {
                if (!instanceZone.equalsIgnoreCase(zone)) {
                    zoneFound = true;
                }
            }
            if (zoneFound) {
                Object[] args = {zones, instanceZone, zoneIndex};
                logger.debug(
                        "The zone index from the list {} that matches the instance zone {} is {}",
                        args);
                break;
            }
            zoneIndex++;
        }
        if (zoneIndex >= zones.size()) {
            logger.warn(
                    "No match for the zone {} in the list of available zones {}",
                    instanceZone, Arrays.toString(zones.toArray()));
        } else {
            // Rearrange the zones with the instance zone first
            for (int i = 0; i < zoneIndex; i++) {
                String zone = zones.remove(0);
                zones.add(zone);
            }
        }

        // Now get the eureka urls for all the zones in the order and return it
        List<String> serviceUrls = new ArrayList<String>();
        for (String zone : zones) {
            for (String zoneCname : zoneDnsNamesMap.get(zone)) {
                List<String> ec2Urls = new ArrayList<String>(
                        getEC2DiscoveryUrlsFromZone(zoneCname,
                                DiscoveryUrlType.CNAME));
                // Rearrange the list to distribute the load in case of
                // multiple servers
                if (ec2Urls.size() > 1) {
                    this.arrangeListBasedonHostname(ec2Urls);
                }
                for (String ec2Url : ec2Urls) {
                    String serviceUrl = "http://" + ec2Url + ":"
                            + clientConfig.getEurekaServerPort()

                            + "/" + clientConfig.getEurekaServerURLContext()
                            + "/";
                    logger.debug("The EC2 url is {}", serviceUrl);
                    serviceUrls.add(serviceUrl);
                }
            }
        }
        // Rearrange the fail over server list to distribute the load
        String primaryServiceUrl = serviceUrls.remove(0);
        arrangeListBasedonHostname(serviceUrls);
        serviceUrls.add(0, primaryServiceUrl);

        logger.debug(
                "This client will talk to the following serviceUrls in order : {} ",
                Arrays.toString(serviceUrls.toArray()));
        t.stop();
        return serviceUrls;
=======
        return EndpointUtils.getServiceUrlsFromDNS(clientConfig, instanceZone, preferSameZone, urlRandomizer);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
            return getServiceUrlsFromDNS(zone, clientConfig.shouldPreferSameZoneEureka());
=======
            Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();
            List<String> result = EndpointUtils.getServiceUrlsFromDNS(
                    clientConfig, zone, clientConfig.shouldPreferSameZoneEureka(), urlRandomizer);
            t.stop();
            return result;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
     * Get the zone based CNAMES that are bound to a region.
=======
     * @deprecated see replacement in {@link com.netflix.discovery.endpoint.EndpointUtils}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
     * @param dnsName
     *            - The dns name of the zone-specific CNAME
     * @param type
     *            - CNAME or EIP that needs to be retrieved
     * @return - The list of EC2 URLs associated with the dns name
=======
     * @param dnsName The dns name of the zone-specific CNAME
     * @param type CNAME or EIP that needs to be retrieved
     * @return The list of EC2 URLs associated with the dns name
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java;<<<<<<< MINE
                                                          DiscoveryUrlType type) {
        Set<String> eipsForZone = null;
        try {
            dnsName = "txt." + dnsName;
            logger.debug("The zone url to be looked up is {} :", dnsName);
            Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);
            for (String ec2Url : ec2UrlsForZone) {
                logger.debug("The eureka url for the dns name {} is {}",
                        dnsName, ec2Url);
                ec2UrlsForZone.add(ec2Url);
            }
            if (DiscoveryUrlType.CNAME.equals(type)) {
                return ec2UrlsForZone;
            }
            eipsForZone = new TreeSet<String>();
            for (String cname : ec2UrlsForZone) {
                String[] tokens = cname.split("\\.");
                String ec2HostName = tokens[0];
                String[] ips = ec2HostName.split("-");
                StringBuffer eipBuffer = new StringBuffer();
                for (int ipCtr = 1; ipCtr < 5; ipCtr++) {
                    eipBuffer.append(ips[ipCtr]);
                    if (ipCtr < 4) {
                        eipBuffer.append(".");
                    }
                }
                eipsForZone.add(eipBuffer.toString());
            }
            logger.debug("The EIPS for {} is {} :", dnsName, eipsForZone);
        } catch (Throwable e) {
            throw new RuntimeException("Cannot get cnames bound to the region:"
                    + dnsName, e);
        }
        return eipsForZone;
    }

    /**
     * Gets the zone to pick up for this instance.
     *
     */
    private static int getZoneOffset(String myZone, boolean preferSameZone,
                                     String[] availZones) {
        for (int i = 0; i < availZones.length; i++) {
            if (myZone != null
                    && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone)) {
                return i;
            }
        }
        logger.warn(
                "DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}, preferSameZone- {}. "
                        + "Defaulting to " + availZones[0], myZone, preferSameZone);
        return 0;
=======
                                                          EndpointUtils.DiscoveryUrlType type) {
        return EndpointUtils.getEC2DiscoveryUrlsFromZone(dnsName, type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/NotImplementedRegistryImpl.java;<<<<<<< MINE
        throw new UnsupportedOperationException("Backup registry not implemented.");
=======
        return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_c1c4cbe_dd8d47d/rev_c1c4cbe-dd8d47d/eureka-client/src/main/java/com/netflix/discovery/NotImplementedRegistryImpl.java;<<<<<<< MINE
        throw new UnsupportedOperationException("Backup registry not implemented.");
=======
        return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-core/src/main/java/com/netflix/eureka/cluster/ReplicationTaskProcessor.java;<<<<<<< MINE
    public void shutdown() {
        batcher.stop();
    }

    private void executeSingle(List<ReplicationTask> tasks) {
        for (ReplicationTask task : tasks) {
            long lastNetworkErrorTime = 0;
            boolean done;
            do {
                done = true;
                try {
                    if (isLate(task)) {
                        continue;
                    }
                    DynamicCounter.increment("Single_" + task.getAction().name() + "_tries");

                    EurekaHttpResponse<?> httpResponse = task.execute();
                    int statusCode = httpResponse.getStatusCode();
                    Object entity = httpResponse.getEntity();
                    if (logger.isDebugEnabled()) {
                        logger.debug("Replication task {} completed with status {}, (includes entity {})", task.getTaskName(), statusCode, entity != null);
                    }
                    if (isSuccess(statusCode)) {
                        DynamicCounter.increment("Single_" + task.getAction().name() + "_success");
                        task.handleSuccess();
                    } else {
                        DynamicCounter.increment("Single_" + task.getAction().name() + "_failure");
                        task.handleFailure(statusCode, entity);
                    }
                } catch (Throwable e) {
                    if (isNetworkConnectException(e)) {
                        long now = System.currentTimeMillis();
                        // We want to retry eagerly, but without flooding log file with tons of error entries.
                        // As tasks are executed by a pool of threads the error logging multiplies. For example:
                        // 20 threads * 100ms delay == 200 error entries / sec worst case
                        // Still we would like to see the exception samples, so we print samples at regular intervals.
                        if (now - lastNetworkErrorTime > 10000) {
                            lastNetworkErrorTime = now;
                            logger.error("Network level connection to peer " + peerId + " for task " + task.getTaskName() + "; retrying after delay", e);
                        }
                        try {
                            Thread.sleep(retrySleepTimeMs);
                        } catch (InterruptedException ignore) {
                        }
                        DynamicCounter.increment(task.getAction().name() + "_retries");
                        done = false;
                    } else {
                        logger.error(peerId + ": " + task.getTaskName() + "Not re-trying this exception because it does not seem to be a network exception", e);
                    }
=======
    @Override
    public ProcessingResult process(List<ReplicationTask> tasks) {
        ReplicationList list = createReplicationListOf(tasks);
        try {
            HttpResponse<ReplicationListResponse> response = replicationClient.submitBatchUpdates(list);
            int statusCode = response.getStatusCode();
            if (!isSuccess(statusCode)) {
                if (statusCode == 503) {
                    logger.warn("Server busy (503) HTTP status code received from the peer {}; rescheduling tasks after delay", peerId);
                    return ProcessingResult.Congestion;
                } else {
                    // Unexpected error returned from the server. This should ideally never happen.
                    logger.error("Batch update failure with HTTP status code {}; discarding {} replication tasks", statusCode, tasks.size());
                    return ProcessingResult.PermanentError;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
@Configuration(prefix="eureka")
=======
@Configuration(prefix = "eureka")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    
    public boolean shouldGZipContent(){
=======

    public boolean shouldGZipContent() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getEurekaServerReadTimeoutSeconds(){
=======
    public int getEurekaServerReadTimeoutSeconds() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getEurekaServerConnectTimeoutSeconds(){
=======
    public int getEurekaServerConnectTimeoutSeconds() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public boolean allowRedirects(){
=======
    public boolean allowRedirects() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public boolean shouldLogDeltaDiff(){
=======
    public boolean shouldLogDeltaDiff() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
            ? Arrays.asList(serviceUrls.split(","))
            : Collections.<String>emptyList();
=======
                ? Arrays.asList(serviceUrls.split(","))
                : Collections.<String>emptyList();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public boolean shouldFilterOnlyUpInstances(){
=======
    public boolean shouldFilterOnlyUpInstances() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public boolean shouldFetchRegistry(){
=======
    public boolean shouldFetchRegistry() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getHeartbeatExecutorThreadPoolSize(){
=======
    public int getHeartbeatExecutorThreadPoolSize() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getHeartbeatExecutorExponentialBackOffBound(){
=======
    public int getHeartbeatExecutorExponentialBackOffBound() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getCacheRefreshExecutorThreadPoolSize(){
=======
    public int getCacheRefreshExecutorThreadPoolSize() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_2529120_333a91e/rev_2529120-333a91e/eureka-client-archaius2/src/main/java/com/netflix/discovery/EurekaArchaius2ClientConfig.java;<<<<<<< MINE
    public int getCacheRefreshExecutorExponentialBackOffBound(){
=======
    public int getCacheRefreshExecutorExponentialBackOffBound() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_b49487b_7fadaa1/rev_b49487b-7fadaa1/eureka-core/src/main/java/com/netflix/eureka/resources/StatusResource.java;<<<<<<< MINE
    @GET
    public StatusInfo getStatusInfo() {
        return statusUtil.getStatusInfo();
=======
    private boolean isReplicaAvailable(String myAppName, String url) {

        try {
            String givenHostName = new URI(url).getHost();
            Application app = PeerAwareInstanceRegistryImpl.getInstance()
                    .getApplication(myAppName, false);
            if (app == null) {
                return false;
            }
            for (InstanceInfo info : app.getInstances()) {
                if (info.getHostName().equals(givenHostName)) {
                    return true;
                }
            }
            givenHostName = new URI(url).getHost();
        } catch (Throwable e) {
            logger.error("Could not determine if the replica is available ", e);
        }
        return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_0f89d2a_f35b620/rev_0f89d2a-f35b620/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java;<<<<<<< MINE
            int endIndex = cname.indexOf(regionPhrase + ".compute");
            String eipStr = cname.substring(beginIndex, endIndex);
            String eip = eipStr.replaceAll("\\-", ".");
            returnedUrls.add(eip);
=======

            // Handle case where there are no cnames containing "ec2-"
            // Reasons include:
            //  Systems without public addresses - purely attached to corp lan via AWS Direct Connect
            if (-1 < beginIndex) {
                int endIndex = cname.indexOf(regionPhrase + ".compute");
                String eipStr = cname.substring(beginIndex, endIndex);
                String eip = eipStr.replaceAll("\\-", ".");
                returnedUrls.add(eip);
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_f35b620_0f89d2a/rev_f35b620-0f89d2a/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java;<<<<<<< MINE
            int endIndex = cname.indexOf(regionPhrase + ".compute");
            String eipStr = cname.substring(beginIndex, endIndex);
            String eip = eipStr.replaceAll("\\-", ".");
            returnedUrls.add(eip);
=======

            // Handle case where there are no cnames containing "ec2-"
            // Reasons include:
            //  Systems without public addresses - purely attached to corp lan via AWS Direct Connect
            if (-1 < beginIndex) {
                int endIndex = cname.indexOf(regionPhrase + ".compute");
                String eipStr = cname.substring(beginIndex, endIndex);
                String eip = eipStr.replaceAll("\\-", ".");
                returnedUrls.add(eip);
            }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/eureka/revisions/rev_203fa01_9950fce/rev_203fa01-9950fce/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil.java;<<<<<<< MINE
                if (info.getHostName().equals(givenHostName)) {
=======
                if (peerEurekaNodes.isInstanceURL(url, info)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/ghostdriver/revisions/rev_30d2ebf_3b872e9/rev_30d2ebf-3b872e9/test/src/test/java/ghostdriver/CookieTest.java;<<<<<<< MINE
    public void shouldBeAbleToAddCookie() {
        WebDriver d = getDriver();
        d.get("http://www.github.com");
=======
    public void gettingAllCookiesOnANonCookieSettingPage() {
        server.setGetHandler(EMPTY_CALLBACK);
        goToPage();
        assertEquals(0, getCookies().length);
    }

    @Test
    public void deletingAllCookies() {
        server.setGetHandler(COOKIE_SETTING_CALLBACK);
        goToPage();
        driver.manage().deleteAllCookies();

        assertEquals(0, getCookies().length);
    }

    @Test
    public void deletingOneCookie() {
        server.setGetHandler(COOKIE_SETTING_CALLBACK);
        goToPage();

        driver.manage().deleteCookieNamed("test");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/ghostdriver/revisions/rev_30d2ebf_3b872e9/rev_30d2ebf-3b872e9/test/src/test/java/ghostdriver/CookieTest.java;<<<<<<< MINE
	@Test
=======
    @Test
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_29233cb_52f8582/rev_29233cb-52f8582/Essentials/src/com/earth2me/essentials/commands/Commandhelp.java;<<<<<<< MINE
	private List<String> getHelpLines(User user) throws Exception
=======
	private List<String> getHelpLines(User user, String match) throws Exception
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_29233cb_52f8582/rev_29233cb-52f8582/Essentials/src/com/earth2me/essentials/commands/Commandhelp.java;<<<<<<< MINE
					if ((!match.equalsIgnoreCase("")) && (!p.getDescription().getName().toLowerCase().contains(match))
									&& (!p.getDescription().getDescription().toLowerCase().contains(match)))
					{
						continue;
					}
					
=======
					if ((!match.equalsIgnoreCase("")) && (!p.getDescription().getName().toLowerCase().contains(match))
						&& (!p.getDescription().getDescription().toLowerCase().contains(match)))
					{
						continue;
					}

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_29233cb_52f8582/rev_29233cb-52f8582/Essentials/src/com/earth2me/essentials/commands/Commandhelp.java;<<<<<<< MINE
								retval.add("Â§c" + k.getKey() + "Â§7: " + value.get("description"));
=======
								if (!ess.getSettings().hidePermissionlessHelp())
								{
									retval.add("Â§c" + k.getKey() + "Â§7: " + value.get("description"));
								}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
	public void onPlayerRespawn(PlayerRespawnEvent event)
=======
	public void onPlayerRespawn(final PlayerRespawnEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
				if (home == null) {
=======
				if (home == null)
				{
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
		if (spawn == null) {
=======
		if (spawn == null)
		{
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
	public void onPlayerJoin(PlayerJoinEvent event)
=======
	public void onPlayerJoin(final PlayerJoinEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
		try {
			user.getTeleport().now(ess.getSpawn().getSpawn(ess.getSettings().getNewbieSpawn()));
		} catch (Exception ex) {
			Logger.getLogger("Minecraft").log(Level.WARNING, Util.i18n("teleportNewPlayerError"), ex);
		}
=======
		ess.scheduleSyncDelayedTask(new Runnable()
		{
			public void run()
			{
				try
				{
					user.getTeleport().now(ess.getSpawn().getSpawn(ess.getSettings().getNewbieSpawn()));
				}
				catch (Exception ex)
				{
					Logger.getLogger("Minecraft").log(Level.WARNING, Util.i18n("teleportNewPlayerError"), ex);
				}
			}
		});
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/api/Economy.java;<<<<<<< MINE
		// Use UserData to avoid calls to iConomy and Register
		return ((UserData)user).getMoney();
=======
		return user.getMoney();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/api/Economy.java;<<<<<<< MINE
		// Use UserData to avoid calls to iConomy and Register
		((UserData)user).setMoney(balance);
=======
		user.setMoney(balance);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawner.java;<<<<<<< MINE
		if (args.length < 1)
=======
		if (args.length < 1 || args[0].length() < 2)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawner.java;<<<<<<< MINE
			((CreatureSpawner)target).setCreatureType(CreatureType.fromName(args[0]));
=======
			final String name = args[0].substring(0, 1).toUpperCase() +  args[0].substring(1).toLowerCase();
			new CraftCreatureSpawner(target).setCreatureType(CreatureType.fromName(name));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
				spawnedMount = mobMount.spawn(user, server);
=======
				spawnedMount = mobMount.spawn(user, server, loc);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
			spawnedMount.teleportTo(spawnedMob);
			spawnedMount.getHandle().setPassengerOf(spawnedMob.getHandle());
			world.addEntity(spawnedMount.getHandle());
=======
			spawnedMob.setPassenger(spawnedMount);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
					spawnedMob = mob.spawn(user, server);
					spawnedMob.teleportTo(loc);
					world.addEntity(spawnedMob.getHandle());
=======
					spawnedMob = mob.spawn(user, server, loc);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
							spawnedMount = mobMount.spawn(user, server);
=======
							spawnedMount = mobMount.spawn(user, server, loc);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
						spawnedMount.teleportTo(spawnedMob);
						spawnedMount.getHandle().setPassengerOf(spawnedMob.getHandle());
						world.addEntity(spawnedMount.getHandle());
=======
						spawnedMob.setPassenger(spawnedMount);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
				user.sendMessage(args[1] + " " + mob.name.toLowerCase() + mob.s + Util.i18n("spawned"));
=======
				user.sendMessage(args[1] + " " + mob.name.toLowerCase() + mob.suffix + Util.i18n("spawned"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
	private void changeMobData(String type, CraftEntity spawned, String data, User user) throws Exception
=======
	private void changeMobData(String type, Entity spawned, String data, User user) throws Exception
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
			wolf.d(true);
			wolf.a((PathEntity)null);
=======
			wolf.setTamed(true);
			wolf.setPathEntity((PathEntity)null);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
			wolf.a(user.getName());
=======
			wolf.setOwnerName(user.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	CHICKEN("Chicken", Enemies.FRIENDLY),
	COW("Cow", Enemies.FRIENDLY),
	CREEPER("Creeper", Enemies.ENEMY),
	GHAST("Ghast", Enemies.ENEMY),
	GIANT("Giant", "GiantZombie", Enemies.ENEMY),
	PIG("Pig", Enemies.FRIENDLY),
	PIGZOMB("PigZombie", Enemies.NEUTRAL),
	SHEEP("Sheep", Enemies.FRIENDLY, ""),
	SKELETON("Skeleton", Enemies.ENEMY),
	SLIME("Slime", Enemies.ENEMY),
	SPIDER("Spider", Enemies.ENEMY),
	SQUID("Squid", Enemies.FRIENDLY),
	ZOMBIE("Zombie", Enemies.ENEMY),
	MONSTER("Monster", Enemies.ENEMY),
	WOLF("Wolf", Enemies.NEUTRAL);
=======
	CHICKEN("Chicken", Enemies.FRIENDLY, CreatureType.CHICKEN),
	COW("Cow", Enemies.FRIENDLY, CreatureType.COW),
	CREEPER("Creeper", Enemies.ENEMY, CreatureType.CREEPER),
	GHAST("Ghast", Enemies.ENEMY, CreatureType.GHAST),
	GIANT("Giant", Enemies.ENEMY, CreatureType.GIANT),
	PIG("Pig", Enemies.FRIENDLY, CreatureType.PIG),
	PIGZOMB("PigZombie", Enemies.NEUTRAL, CreatureType.PIG_ZOMBIE),
	SHEEP("Sheep", Enemies.FRIENDLY, "", CreatureType.SHEEP),
	SKELETON("Skeleton", Enemies.ENEMY, CreatureType.SKELETON),
	SLIME("Slime", Enemies.ENEMY, CreatureType.SLIME),
	SPIDER("Spider", Enemies.ENEMY, CreatureType.SPIDER),
	SQUID("Squid", Enemies.FRIENDLY, CreatureType.SQUID),
	ZOMBIE("Zombie", Enemies.ENEMY, CreatureType.ZOMBIE),
	MONSTER("Monster", Enemies.ENEMY, CreatureType.MONSTER),
	WOLF("Wolf", Enemies.NEUTRAL, CreatureType.WOLF);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	private Mob(String n, Enemies en, String s)
=======
	private Mob(String n, Enemies en, String s, CreatureType type)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
		this.s = s;
=======
		this.suffix = s;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	private Mob(String n, Enemies en)
=======
	private Mob(String n, Enemies en, CreatureType type)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	@SuppressWarnings(
=======
	public LivingEntity spawn(final Player player, final Server server, final Location loc) throws MobException
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
		"unchecked", "CallToThreadDumpStack"
	})
	public CraftEntity spawn(Player player, Server server) throws MobException
	{
		try
		{
			WorldServer world = ((org.bukkit.craftbukkit.CraftWorld)player.getWorld()).getHandle();
			Constructor<CraftEntity> craft = (Constructor<CraftEntity>)ClassLoader.getSystemClassLoader().loadClass("org.bukkit.craftbukkit.entity.Craft" + craftClass).getConstructors()[0];
			Constructor<Entity> entity = (Constructor<Entity>)ClassLoader.getSystemClassLoader().loadClass("net.minecraft.server.Entity" + entityClass).getConstructors()[0];
			return craft.newInstance((CraftServer)server, entity.newInstance(world));
		}
		catch (Exception ex)
=======

		final LivingEntity entity = player.getWorld().spawnCreature(loc, this.bukkitType);
		if (entity == null)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
			logger.log(Level.WARNING, Util.i18n("unableToSpawnMob"), ex);
			throw new MobException(ex);
=======
			logger.log(Level.WARNING, Util.i18n("unableToSpawnMob"));
			throw new MobException();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
		private Enemies(String t)
=======
		private Enemies(final String t)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_1a715bd_455fbd8/rev_1a715bd-455fbd8/Essentials/src/com/earth2me/essentials/UserData.java;<<<<<<< MINE
		if (size < 1 || size > getInventory().getSize())
=======
		if (size < 1 || (getInventory() != null && size > getInventory().getSize()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandpowertool.java;<<<<<<< MINE
					user.sendMessage(Util.format("powerToolList", powertools.toString(), itemName));
=======
					user.sendMessage(Util.format("powerToolList", Util.joinList(powertools), itemName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandpowertool.java;<<<<<<< MINE
				user.sendMessage(Util.format("powerToolAttach", powertools.toString(), itemName));
=======
				user.sendMessage(Util.format("powerToolAttach", Util.joinList(powertools), itemName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandjails.java;<<<<<<< MINE
		StringBuilder jailList = new StringBuilder();
		for (String j : ess.getJail().getJails())
		{
			jailList.append(j);
			jailList.append(' ');
		}
		sender.sendMessage("Â§7" + jailList);
=======
		sender.sendMessage("Â§7" + Util.joinList(" ", ess.getJail().getJails()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandhome.java;<<<<<<< MINE
				user.sendMessage(Util.format("homes", homes.toString()));
=======
				user.sendMessage(Util.format("homes", Util.joinList(homes)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandwarp.java;<<<<<<< MINE
			final StringBuilder sb = new StringBuilder();
			for (int i = 0; i < Math.min(warpNameList.size() - warpPage, WARPS_PER_PAGE); i++)
			{
				if (i > 0)
				{
					sb.append(", ");
				}
				sb.append(warpNameList.get(i + warpPage));
			}
			user.sendMessage(sb.toString());
=======
			user.sendMessage(Util.joinList(warpNameList.subList(warpPage, warpPage+Math.min(warpNameList.size() - warpPage, WARPS_PER_PAGE))));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/commands/Commandrepair.java;<<<<<<< MINE
				user.sendMessage(Util.format("repair", itemList.toString()));
=======
				user.sendMessage(Util.format("repair", Util.joinList(itemList)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/Util.java;<<<<<<< MINE
			if (!first)
=======
			if (buf.length() > 0)
			{
				buf.append(seperator);
			}
			
			if(each instanceof List)
			{
				buf.append(joinList(seperator, ((List)each).toArray()));
			}
			else
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/Util.java;<<<<<<< MINE
				buf.append(", ");

=======
				try 
				{
					buf.append(each.toString());
				}
				catch (Exception e)
				{
					buf.append(each.toString());
				}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ffe19e6_85bf61f/rev_ffe19e6-85bf61f/Essentials/src/com/earth2me/essentials/Util.java;<<<<<<< MINE
	}
=======
	}	
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7cec201_df0d773/rev_7cec201-df0d773/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
		return config.getBoolean("nether.enabled", true);
=======
		return config.getBoolean("nether.enabled", false);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7cec201_df0d773/rev_7cec201-df0d773/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
		return config.getDouble("nether.ratio", 16.0);
=======
		return config.getDouble("nether.ratio", 8.0);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
	protected void run(Server server, User user, String commandLabel, String[] args) throws Exception
=======
	protected void run(final Server server, final User user, final String commandLabel, final String[] args) throws Exception
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
			World nether = server.getWorld(ess.getSettings().getNetherName());
			if (nether == null) {
				for (World world2 : worlds)
=======
			World nether = null;
			
			final List<World> worlds = server.getWorlds();

			for (World world2 : worlds)
			{
				if (world2.getEnvironment() == World.Environment.NETHER)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
					if (world2.getEnvironment() == World.Environment.NETHER) {
						nether = world2;
						break;
					}
				}
				if (nether == null) {
					return;
=======
					nether = world2;
					break;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
			factor = ess.getSettings().getNetherRatio();
=======
			factor = 8.0;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
		else if (user.getWorld().getEnvironment() != world.getEnvironment())
=======
		else if (user.getWorld().getEnvironment() == World.Environment.NORMAL && world.getEnvironment() == World.Environment.NETHER)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
			factor = 1.0 / ess.getSettings().getNetherRatio();
=======
			factor = 1.0 / 8.0;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
		else
		{
=======
		else {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/commands/Commandworld.java;<<<<<<< MINE
		user.getTeleport().teleport(loc, charge);
=======
		user.getTeleport().teleport(target, charge);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/signs/EssentialsSign.java;<<<<<<< MINE
				if (signMat.getFacing() == blockFace && isValidSign(new BlockSign(signblock)))
=======
				if (signMat != null && signMat.getFacing() == blockFace && isValidSign(new BlockSign(signblock)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/Teleport.java;<<<<<<< MINE
		back(null);
=======
		now(new Target(user.getLastLocation()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8aba67f_d3dace3/rev_8aba67f-d3dace3/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		setPlayerListName(name);
=======
		//TODO: Maybe we need to limit nick length, or try use a string trim.
		if (name.length() <= 16) {
			setPlayerListName(name);
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_4cb7ac8_ce6f6ad/rev_4cb7ac8-ce6f6ad/Essentials/src/com/earth2me/essentials/storage/AbstractDelayedYamlFileReader.java;<<<<<<< MINE
			Bukkit.getLogger().log(Level.WARNING, "File not found: " + file.toString());
=======
			Bukkit.getLogger().log(Level.INFO, "File not found: " + file.toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/EssentialsGroupManager/src/org/anjocaido/groupmanager/GroupManager.java;<<<<<<< MINE
		if (worldsHolder == null) {
			// Create the backup folder, if it doesn't exist.
			prepareFileFields();
			// Load the config.yml
			prepareConfig();
			// Load the global groups
			globalGroups = new GlobalGroups(this);
			worldsHolder = new WorldsHolder(this);
		}
=======

		// Create the backup folder, if it doesn't exist.
		prepareFileFields();
		// Load the config.yml
		prepareConfig();
		// Load the global groups
		globalGroups = new GlobalGroups(this);
		worldsHolder = new WorldsHolder(this);

>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
			if (kits.isConfigurationSection(name)) 
=======
			if (kits.isConfigurationSection(name))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
			}			
=======
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawner.java;<<<<<<< MINE
			((CreatureSpawner)target.getBlock().getState()).setCreatureType(mob.getType());
=======
			((CreatureSpawner)target.getBlock().getState()).setSpawnedType(mob.getType());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
	private void changeMobData(final CreatureType type, final Entity spawned, final String data, final User user) throws Exception
=======
	private void changeMobData(final EntityType type, final Entity spawned, final String data, final User user) throws Exception
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if (type == CreatureType.SLIME || type == CreatureType.MAGMA_CUBE)
=======
		if (type == EntityType.SLIME || type == EntityType.MAGMA_CUBE)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if ((type == CreatureType.SHEEP
			 || type == CreatureType.COW
			 || type == CreatureType.MUSHROOM_COW
			 || type == CreatureType.CHICKEN
			 || type == CreatureType.PIG
			 || type == CreatureType.WOLF)
=======
		if ((type == EntityType.SHEEP
			 || type == EntityType.COW
			 || type == EntityType.MUSHROOM_COW
			 || type == EntityType.CHICKEN
			 || type == EntityType.PIG
			 || type == EntityType.WOLF)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if (type == CreatureType.SHEEP)
=======
		if (type == EntityType.SHEEP)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if (type == CreatureType.WOLF
=======
		if (type == EntityType.WOLF
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if (type == CreatureType.WOLF
=======
		if (type == EntityType.WOLF
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
		if (type == CreatureType.CREEPER && data.equalsIgnoreCase("powered"))
=======
		if (type == EntityType.CREEPER && data.equalsIgnoreCase("powered"))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/textreader/HelpInput.java;<<<<<<< MINE
				for (Map.Entry<String, HashMap<String, Object>> k : cmds.entrySet())
=======
				for (Map.Entry<String, Map<String, Object>> k : cmds.entrySet())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
			final double mon = user.getMoney();
			if (mon < getMoney() && getMoney() > 0 && !user.isAuthorized("essentials.eco.loan"))
=======
			if (!user.canAfford(getMoney()) && getMoney() > 0)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
			if (mon < cost && cost > 0 && !user.isAuthorized("essentials.eco.loan"))
=======
			if (!user.canAfford(cost) && cost > 0)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
		if (!ess.getSettings().isEcoLogEnabled())
=======
		if ((loc == null && !ess.getSettings().isEcoLogUpdateEnabled())
			|| (loc != null && !ess.getSettings().isEcoLogEnabled()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	CHICKEN("Chicken", Enemies.FRIENDLY, CreatureType.CHICKEN),
	COW("Cow", Enemies.FRIENDLY, CreatureType.COW),
	CREEPER("Creeper", Enemies.ENEMY, CreatureType.CREEPER),
	GHAST("Ghast", Enemies.ENEMY, CreatureType.GHAST),
	GIANT("Giant", Enemies.ENEMY, CreatureType.GIANT),
	PIG("Pig", Enemies.FRIENDLY, CreatureType.PIG),
	PIGZOMB("PigZombie", Enemies.NEUTRAL, CreatureType.PIG_ZOMBIE),
	SHEEP("Sheep", Enemies.FRIENDLY, "", CreatureType.SHEEP),
	SKELETON("Skeleton", Enemies.ENEMY, CreatureType.SKELETON),
	SLIME("Slime", Enemies.ENEMY, CreatureType.SLIME),
	SPIDER("Spider", Enemies.ENEMY, CreatureType.SPIDER),
	SQUID("Squid", Enemies.FRIENDLY, CreatureType.SQUID),
	ZOMBIE("Zombie", Enemies.ENEMY, CreatureType.ZOMBIE),
	WOLF("Wolf", Enemies.NEUTRAL, CreatureType.WOLF),
	CAVESPIDER("CaveSpider", Enemies.ENEMY, CreatureType.CAVE_SPIDER),
	ENDERMAN("Enderman", Enemies.ENEMY, "", CreatureType.ENDERMAN),
	SILVERFISH("Silverfish", Enemies.ENEMY, "", CreatureType.SILVERFISH),
	ENDERDRAGON("EnderDragon", Enemies.ENEMY, CreatureType.ENDER_DRAGON),
	VILLAGER("Villager", Enemies.FRIENDLY, CreatureType.VILLAGER),
	BLAZE("Blaze", Enemies.ENEMY, CreatureType.BLAZE),
	MUSHROOMCOW("MushroomCow", Enemies.FRIENDLY, CreatureType.MUSHROOM_COW),
	MAGMACUBE("MagmaCube", Enemies.ENEMY, CreatureType.MAGMA_CUBE),
	SNOWMAN("Snowman", Enemies.FRIENDLY, "", CreatureType.SNOWMAN);
=======
	CHICKEN("Chicken", Enemies.FRIENDLY, EntityType.CHICKEN),
	COW("Cow", Enemies.FRIENDLY, EntityType.COW),
	CREEPER("Creeper", Enemies.ENEMY, EntityType.CREEPER),
	GHAST("Ghast", Enemies.ENEMY, EntityType.GHAST),
	GIANT("Giant", Enemies.ENEMY, EntityType.GIANT),
	PIG("Pig", Enemies.FRIENDLY, EntityType.PIG),
	PIGZOMB("PigZombie", Enemies.NEUTRAL, EntityType.PIG_ZOMBIE),
	SHEEP("Sheep", Enemies.FRIENDLY, "", EntityType.SHEEP),
	SKELETON("Skeleton", Enemies.ENEMY, EntityType.SKELETON),
	SLIME("Slime", Enemies.ENEMY, EntityType.SLIME),
	SPIDER("Spider", Enemies.ENEMY, EntityType.SPIDER),
	SQUID("Squid", Enemies.FRIENDLY, EntityType.SQUID),
	ZOMBIE("Zombie", Enemies.ENEMY, EntityType.ZOMBIE),
	WOLF("Wolf", Enemies.NEUTRAL, EntityType.WOLF),
	CAVESPIDER("CaveSpider", Enemies.ENEMY, EntityType.CAVE_SPIDER),
	ENDERMAN("Enderman", Enemies.ENEMY, "", EntityType.ENDERMAN),
	SILVERFISH("Silverfish", Enemies.ENEMY, "", EntityType.SILVERFISH),
	ENDERDRAGON("EnderDragon", Enemies.ENEMY, EntityType.ENDER_DRAGON),
	VILLAGER("Villager", Enemies.FRIENDLY, EntityType.VILLAGER),
	BLAZE("Blaze", Enemies.ENEMY, EntityType.BLAZE),
	MUSHROOMCOW("MushroomCow", Enemies.FRIENDLY, EntityType.MUSHROOM_COW),
	MAGMACUBE("MagmaCube", Enemies.ENEMY, EntityType.MAGMA_CUBE),
	SNOWMAN("Snowman", Enemies.FRIENDLY, "", EntityType.SNOWMAN);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	private Mob(String n, Enemies en, String s, CreatureType type)
=======
	private Mob(String n, Enemies en, String s, EntityType type)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	private Mob(String n, Enemies en, CreatureType type)
=======
	private Mob(String n, Enemies en, EntityType type)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
	public CreatureType getType()
=======
	public EntityType getType()
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/signs/SignFree.java;<<<<<<< MINE
		ShowInventory.showFilledInventory(player.getBase(), item);
=======
		Inventory i = ess.getServer().createInventory(player, InventoryType.CHEST);
		i.addItem(item);
		player.openInventory(i);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/signs/SignDisposal.java;<<<<<<< MINE
		ShowInventory.showEmptyInventory(player.getBase());
=======
		player.getBase().openInventory(ess.getServer().createInventory(player, InventoryType.CHEST));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Jails.java;<<<<<<< MINE
		@EventHandler(priority = EventPriority.HIGH)
=======
		@EventHandler(priority = EventPriority.HIGHEST)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/Jails.java;<<<<<<< MINE
		@EventHandler(priority = EventPriority.HIGH)
=======
		@EventHandler(priority = EventPriority.HIGHEST)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
			initiator.sendMessage(_("addedToOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName()));
=======
			initiator.sendMessage(_("addedToOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName(), Util.formatCurrency(getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
			initiator.sendMessage(_("takenFromOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName()));
=======
			initiator.sendMessage(_("takenFromOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName(), Util.formatCurrency(getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		return mon >= cost || isAuthorized("essentials.eco.loan");
=======
		if (!permcheck || isAuthorized("essentials.eco.loan"))
		{
			return (mon - cost) >= ess.getSettings().getMinMoney();
		}
		return cost <= mon;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		}
=======
		}		
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		{			
=======
		{
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ecbbc9f_6f9654e/rev_ecbbc9f-6f9654e/EssentialsUpdate/src/com/earth2me/essentials/update/VersionInfo.java;<<<<<<< MINE
		changelog = updateConfig.getList(path + ".changelog", Collections.<String>emptyList());
=======
		changelog = updateConfig.getStringList(path + ".changelog");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/EssentialsSpawn/src/com/earth2me/essentials/spawn/EssentialsSpawnPlayerListener.java;<<<<<<< MINE
		final User user = ess.getUser(event.getPlayer());

		if (user.hasPlayedBefore())
=======
		if (event.getPlayer().hasPlayedBefore())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
	@Override
	public Map<String, Object> getKit(String name)
=======
	public ConfigurationSection _getKits()
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
			final ConfigurationSection kits = getKits();
			if (kits.isConfigurationSection(name))
			{
				return kits.getConfigurationSection(name).getValues(true);
=======
			final ConfigurationSection section = config.getConfigurationSection("kits");
			final ConfigurationSection newSection = new MemoryConfiguration();
			for (String kitItem : section.getKeys(false))
			{
				if (section.isConfigurationSection(kitItem))
				{
					newSection.set(kitItem.toLowerCase(Locale.ENGLISH), section.getConfigurationSection(kitItem));
				}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
			return config.getConfigurationSection("kits");
=======
			final ConfigurationSection kits = getKits();
			if (kits.isConfigurationSection(name))
			{
				return kits.getConfigurationSection(name).getValues(true);
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
		enabledSigns = getEnabledSigns();
		itemSpawnBl = getItemSpawnBlacklist();
=======
		enabledSigns = _getEnabledSigns();
		itemSpawnBl = _getItemSpawnBlacklist();
		kits = _getKits();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
	private List<Integer> getItemSpawnBlacklist()
=======
	private List<Integer> _getItemSpawnBlacklist()
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Settings.java;<<<<<<< MINE
	private List<EssentialsSign> getEnabledSigns()
=======
	private List<EssentialsSign> _getEnabledSigns()
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/api/Economy.java;<<<<<<< MINE
		return Util.formatCurrency(amount, ess);
=======
		return Util.displayCurrency(amount, ess);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandbalancetop.java;<<<<<<< MINE
					cache.getLines().add(_("serverTotal", Util.formatCurrency(totalMoney, ess)));
=======
					cache.getLines().add(_("serverTotal", Util.displayCurrency(totalMoney, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandbalancetop.java;<<<<<<< MINE
						cache.getLines().add(pos + ". " + entry.getKey() + ", " + Util.formatCurrency(entry.getValue(), ess));
=======
						cache.getLines().add(pos + ". " + entry.getKey() + ", " + Util.displayCurrency(entry.getValue(), ess));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandlist.java;<<<<<<< MINE
				groupString.append(group).append(": ");
=======
				groupString.append(_("listGroupTag",Util.replaceColor(group)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandessentials.java;<<<<<<< MINE
					loc.getBlock().setType(Material.NOTE_BLOCK);
=======
					player.sendBlockChange(loc, Material.NOTE_BLOCK, (byte)0);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandsell.java;<<<<<<< MINE
		user.sendMessage(_("itemSold", Util.formatCurrency(worth * amount, ess), amount, is.getType().toString().toLowerCase(Locale.ENGLISH), Util.formatCurrency(worth, ess)));
		logger.log(Level.INFO, _("itemSoldConsole", user.getDisplayName(), is.getType().toString().toLowerCase(Locale.ENGLISH), Util.formatCurrency(worth * amount, ess), amount, Util.formatCurrency(worth, ess)));
=======
		user.sendMessage(_("itemSold", Util.displayCurrency(worth * amount, ess), amount, is.getType().toString().toLowerCase(Locale.ENGLISH), Util.displayCurrency(worth, ess)));
		logger.log(Level.INFO, _("itemSoldConsole", user.getDisplayName(), is.getType().toString().toLowerCase(Locale.ENGLISH), Util.displayCurrency(worth * amount, ess), amount, Util.displayCurrency(worth, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							 Util.formatCurrency(worth * amount, ess),
=======
							 Util.displayCurrency(worth * amount, ess),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							 Util.formatCurrency(worth, ess))
=======
							 Util.displayCurrency(worth, ess))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							 Util.formatCurrency(worth * amount, ess),
=======
							 Util.displayCurrency(worth * amount, ess),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							 Util.formatCurrency(worth, ess)));
=======
							 Util.displayCurrency(worth, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							   Util.formatCurrency(worth * amount, ess),
=======
							   Util.displayCurrency(worth * amount, ess),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							   Util.formatCurrency(worth, ess))
=======
							   Util.displayCurrency(worth, ess))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							   Util.formatCurrency(worth * amount, ess),
=======
							   Util.displayCurrency(worth * amount, ess),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandworth.java;<<<<<<< MINE
							   Util.formatCurrency(worth, ess)));
=======
							   Util.displayCurrency(worth, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandantioch.java;<<<<<<< MINE
		ess.broadcastMessage(user, "...lobbest thou thy Holy Hand Grenade of Antioch towards thy foe,");
		ess.broadcastMessage(user, "who being naughty in My sight, shall snuff it.");
=======
		if (args.length > 0)
		{
			ess.broadcastMessage(user, "...lobbest thou thy Holy Hand Grenade of Antioch towards thy foe,");
			ess.broadcastMessage(user, "who being naughty in My sight, shall snuff it.");
		}		
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
			Set<String> availableList = Mob.getMobList();
			for (String mob : availableList)
=======
			final Set<String> mobList = Mob.getMobList();
			final Set<String> availableList = new HashSet<String>();
			for (String mob : mobList)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
				if (!user.isAuthorized("essentials.spawnmob." + mob.toLowerCase()))
=======
				if (user.isAuthorized("essentials.spawnmob." + mob.toLowerCase()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
					availableList.remove(mob);
=======
					availableList.add(mob);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandspawnmob.java;<<<<<<< MINE
				user.sendMessage(args[1] + " " + mob.name.toLowerCase(Locale.ENGLISH) + mob.suffix + " " + _("spawned"));
=======
				user.sendMessage(mobCount + " " + mob.name.toLowerCase(Locale.ENGLISH) + mob.suffix + " " + _("spawned"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandbalance.java;<<<<<<< MINE
		sender.sendMessage(_("balance", Util.formatCurrency(getPlayer(server, args, 0, true).getMoney(), ess)));
=======
		sender.sendMessage(_("balance", Util.displayCurrency(getPlayer(server, args, 0, true).getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandbalance.java;<<<<<<< MINE
		user.sendMessage(_("balance", Util.formatCurrency(bal, ess)));
=======
		user.sendMessage(_("balance", Util.displayCurrency(bal, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandwhois.java;<<<<<<< MINE
				sender.sendMessage(_("whoisMoney", Util.formatCurrency(user.getMoney(), ess)));
=======
				sender.sendMessage(_("whoisMoney", Util.displayCurrency(user.getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/commands/Commandeco.java;<<<<<<< MINE
		if (args[1].contentEquals("*"))
=======
		if (args[1].contentEquals("**"))
		{
			for (String sUser : ess.getUserMap().getAllUniqueUsers())
			{
				final User player = ess.getUser(sUser);
				switch (cmd)
				{
				case GIVE:
					player.giveMoney(amount);
					break;

				case TAKE:
					if (player.canAfford(amount, false))
					{
						player.takeMoney(amount);
					}					
					break;

				case RESET:
					player.setMoney(amount == 0 ? ess.getSettings().getStartingBalance() : amount);
					break;
				}
			}
		}
		else if (args[1].contentEquals("*"))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsPlayerListener.java;<<<<<<< MINE
		if (event.getResult() != Result.ALLOWED && event.getResult() != Result.KICK_FULL && event.getResult() != Result.KICK_BANNED)
=======
		switch (event.getResult())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsPlayerListener.java;<<<<<<< MINE
		if (banExpired == false && (user.isBanned() || event.getResult() == Result.KICK_BANNED))
=======
		if (!banExpired && (user.isBanned() || event.getResult() == Result.KICK_BANNED))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsPlayerListener.java;<<<<<<< MINE
	@EventHandler(priority = EventPriority.MONITOR)
=======
	@EventHandler(priority = EventPriority.NORMAL)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsPlayerListener.java;<<<<<<< MINE
	public void onPlayerPickupItem(PlayerPickupItemEvent event)
=======
	public void onPlayerPickupItem(final PlayerPickupItemEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Kit.java;<<<<<<< MINE
					list.append(" ").append(kiteItem);
=======
					list.append(" ").append(capitalCase(kiteItem));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Kit.java;<<<<<<< MINE
	public static List<String> getItems(final User user, final Map<String, Object> els) throws Exception
=======
	public static List<String> getItems(final User user, final Map<String, Object> kit) throws Exception
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Kit.java;<<<<<<< MINE
			return (List<String>)els.get("items");
=======
			return (List<String>)kit.get("items");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Mob.java;<<<<<<< MINE
		return hashMap.keySet();
=======
		return Collections.unmodifiableSet(hashMap.keySet());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/signs/EssentialsSign.java;<<<<<<< MINE
			sign.setLine(index, Util.formatCurrency(money, ess));
=======
			sign.setLine(index, Util.shortCurrency(money, ess));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/signs/SignTrade.java;<<<<<<< MINE
				if (Util.formatCurrency(money, ess).length() * 2 > 15)
=======
				if (Util.shortCurrency(money, ess).length() * 2 > 15)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/signs/SignTrade.java;<<<<<<< MINE
				sign.setLine(index, Util.formatCurrency(money, ess) + ":0");
=======
				sign.setLine(index, Util.shortCurrency(money, ess) + ":0");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/signs/SignTrade.java;<<<<<<< MINE
				sign.setLine(index, Util.formatCurrency(money, ess) + ":" + Util.formatCurrency(amount, ess).substring(1));
=======
				sign.setLine(index, Util.shortCurrency(money, ess) + ":" + Util.shortCurrency(amount, ess).substring(1));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/Util.java;<<<<<<< MINE
	public static String formatCurrency(final double value, final IEssentials ess)
=======
	public static String formatAsCurrency(final double value)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/UserData.java;<<<<<<< MINE
		godmode = getGodModeEnabled();
=======
		godmode = _getGodModeEnabled();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/UserData.java;<<<<<<< MINE
		return config.getString("nickname");
=======
		return nickname;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/UserData.java;<<<<<<< MINE
	private boolean getGodModeEnabled()
=======
	private boolean _getGodModeEnabled()
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/UserData.java;<<<<<<< MINE
		return new HashMap<String, Object>();		
=======
		return new HashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		sendMessage(_("addedToAccount", Util.formatCurrency(value, ess)));
=======
		sendMessage(_("addedToAccount", Util.displayCurrency(value, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
			initiator.sendMessage(_("addedToOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName(), Util.formatCurrency(getMoney(), ess)));
=======
			initiator.sendMessage(_("addedToOthersAccount", Util.displayCurrency(value, ess), this.getDisplayName(), Util.displayCurrency(getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
			sendMessage(_("moneySentTo", Util.formatCurrency(value, ess), reciever.getDisplayName()));
			reciever.sendMessage(_("moneyRecievedFrom", Util.formatCurrency(value, ess), getDisplayName()));
=======
			sendMessage(_("moneySentTo", Util.displayCurrency(value, ess), reciever.getDisplayName()));
			reciever.sendMessage(_("moneyRecievedFrom", Util.displayCurrency(value, ess), getDisplayName()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		sendMessage(_("takenFromAccount", Util.formatCurrency(value, ess)));
=======
		sendMessage(_("takenFromAccount", Util.displayCurrency(value, ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
			initiator.sendMessage(_("takenFromOthersAccount", Util.formatCurrency(value, ess), this.getDisplayName(), Util.formatCurrency(getMoney(), ess)));
=======
			initiator.sendMessage(_("takenFromOthersAccount", Util.displayCurrency(value, ess), this.getDisplayName(), Util.displayCurrency(getMoney(), ess)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
	public String getNick(boolean addprefixsuffix)
=======
	public String getNick(final boolean addprefixsuffix)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		if (isOp())
=======

		if (addprefixsuffix && isOp())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
				nickname.insert(0, ess.getSettings().getOperatorColor().toString());
				nickname.append("Â§f");
=======
				final String opPrefix = ess.getSettings().getOperatorColor().toString();
				if (opPrefix.length() > 0) {
					nickname.insert(0, opPrefix);
					nickname.append("Â§f");
				}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
				final String prefix = ess.getPermissionsHandler().getPrefix(base).replace('&', 'Â§').replace("{WORLDNAME}", this.getWorld().getName());
=======
				final String prefix = ess.getPermissionsHandler().getPrefix(base).replace('&', 'Â§');
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
				final String suffix = ess.getPermissionsHandler().getSuffix(base).replace('&', 'Â§').replace("{WORLDNAME}", this.getWorld().getName());
=======
				final String suffix = ess.getPermissionsHandler().getSuffix(base).replace('&', 'Â§');
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/User.java;<<<<<<< MINE
		}		
=======
		}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
	public void onEntityDamage(EntityDamageEvent event)
=======
	public void onEntityDamage(final EntityDamageByEntityEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
		if (event instanceof EntityDamageByEntityEvent)
		{
			EntityDamageByEntityEvent edEvent = (EntityDamageByEntityEvent)event;
			Entity eAttack = edEvent.getDamager();
			Entity eDefend = edEvent.getEntity();
			if (eDefend instanceof Player && eAttack instanceof Player)
=======
		final Entity eAttack = event.getDamager();
		final Entity eDefend = event.getEntity();
		if (eDefend instanceof Player && eAttack instanceof Player)
		{
			final User defender = ess.getUser(eDefend);
			final User attacker = ess.getUser(eAttack);
			attacker.updateActivity(true);
			final List<String> commandList = attacker.getPowertool(attacker.getItemInHand());
			if (commandList != null && !commandList.isEmpty())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
				User defender = ess.getUser(eDefend);
				User attacker = ess.getUser(eAttack);
				attacker.updateActivity(true);
				ItemStack is = attacker.getItemInHand();
				List<String> commandList = attacker.getPowertool(is);
				if (commandList != null && !commandList.isEmpty())
=======
				for (String command : commandList)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
					for (String command : commandList)
=======
					if (command != null && !command.isEmpty())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE

						if (command != null && !command.isEmpty())
						{
							attacker.getServer().dispatchCommand(attacker, command.replaceAll("\\{player\\}", defender.getName()));
							event.setCancelled(true);
							return;
						}
=======
						attacker.getServer().dispatchCommand(attacker, command.replaceAll("\\{player\\}", defender.getName()));
						event.setCancelled(true);
						return;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
			if (eDefend instanceof Animals && eAttack instanceof Player)
=======
		}
		else if (eDefend instanceof Animals && eAttack instanceof Player)
		{
			final User player = ess.getUser(eAttack);
			final ItemStack hand = player.getItemInHand();
			if (hand != null && hand.getType() == Material.MILK_BUCKET)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
				User player = ess.getUser(eAttack);
				ItemStack hand = player.getItemInHand();
				if (hand != null && hand.getType() == Material.MILK_BUCKET)
				{
					((Animals)eDefend).setAge(-24000);
					hand.setType(Material.BUCKET);
					player.setItemInHand(hand);
					player.updateInventory();
					event.setCancelled(true);
				}
=======
				((Animals)eDefend).setAge(-24000);
				hand.setType(Material.BUCKET);
				player.setItemInHand(hand);
				player.updateInventory();
				event.setCancelled(true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
	public void onEntityCombust(EntityCombustEvent event)
=======
	public void onEntityCombust(final EntityCombustEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
	public void onEntityDeath(final EntityDeathEvent event)
=======
	public void onPlayerDeathEvent(final PlayerDeathEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
		if (event instanceof PlayerDeathEvent)
=======
		final User user = ess.getUser(event.getEntity());
		if (user.isAuthorized("essentials.back.ondeath") && !ess.getSettings().isCommandDisabled("back"))
		{
			user.setLastLocation();
			user.sendMessage(_("backAfterDeath"));
		}
		if (!ess.getSettings().areDeathMessagesEnabled())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
			final PlayerDeathEvent pdevent = (PlayerDeathEvent)event;
			final User user = ess.getUser(pdevent.getEntity());
			if (user.isAuthorized("essentials.back.ondeath") && !ess.getSettings().isCommandDisabled("back"))
			{
				user.setLastLocation();
				user.sendMessage(_("backAfterDeath"));
			}
			if (!ess.getSettings().areDeathMessagesEnabled())
			{
				pdevent.setDeathMessage("");
			}
=======
			event.setDeathMessage("");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
	public void onFoodLevelChange(FoodLevelChangeEvent event)
=======
	public void onFoodLevelChange(final FoodLevelChangeEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d83437e_af43197/rev_d83437e-af43197/Essentials/src/com/earth2me/essentials/EssentialsEntityListener.java;<<<<<<< MINE
	public void onEntityRegainHealth(EntityRegainHealthEvent event)
=======
	public void onEntityRegainHealth(final EntityRegainHealthEvent event)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_ce1e923_0da3bc3/rev_ce1e923-0da3bc3/EssentialsGroupManager/src/org/anjocaido/groupmanager/permissions/BukkitPermissions.java;<<<<<<< MINE
		/*
		 * Trigger at highest so we tidy up last.
		 */
		@EventHandler(priority = EventPriority.HIGHEST)
=======
		@EventHandler(priority = EventPriority.HIGHEST)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_eed0edd_b37b165/rev_eed0edd-b37b165/Essentials/src/com/earth2me/essentials/signs/SignKit.java;<<<<<<< MINE
			|| (group.isEmpty() && (player.isAuthorized("essentials.kit." + kitName))))
=======
			|| (group.isEmpty() && (player.isAuthorized("essentials.kits." + kitName))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_eed0edd_b37b165/rev_eed0edd-b37b165/Essentials/src/com/earth2me/essentials/signs/SignWarp.java;<<<<<<< MINE
			|| (group.isEmpty() && (!ess.getSettings().getPerWarpPermission() || player.isAuthorized("essentials.warp." + warpName))))
=======
			|| (group.isEmpty() && (!ess.getSettings().getPerWarpPermission() || player.isAuthorized("essentials.warps." + warpName))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commandsell.java;<<<<<<< MINE
		InventoryWorkaround.removeItem(user.getInventory(), true, true, ris);
=======
		user.getInventory().removeItem(ris);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commandgive.java;<<<<<<< MINE
			InventoryWorkaround.addItem(giveTo.getInventory(), true, ess.getSettings().getOversizedStackSize(), stack);
=======
			InventoryWorkaround.addOversizedItems(giveTo.getInventory(), ess.getSettings().getOversizedStackSize(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commandgive.java;<<<<<<< MINE
			InventoryWorkaround.addItem(giveTo.getInventory(), true, stack);
=======
			InventoryWorkaround.addItems(giveTo.getInventory(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commanditem.java;<<<<<<< MINE
			InventoryWorkaround.addItem(user.getInventory(), true, ess.getSettings().getOversizedStackSize(), stack);
=======
			InventoryWorkaround.addOversizedItems(user.getInventory(), ess.getSettings().getOversizedStackSize(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commanditem.java;<<<<<<< MINE
			InventoryWorkaround.addItem(user.getInventory(), true, stack);
=======
			InventoryWorkaround.addItems(user.getInventory(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commandhat.java;<<<<<<< MINE
				InventoryWorkaround.addItem(user.getInventory(), true, head);
=======
				InventoryWorkaround.addItems(user.getInventory(), head);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/commands/Commandunlimited.java;<<<<<<< MINE
			if (!InventoryWorkaround.containsItem(target.getInventory(), true, true, stack))
=======
			if (!target.getInventory().containsAtLeast(stack, stack.getAmount()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/storage/BukkitConstructor.java;<<<<<<< MINE
		super(clazz);
=======
		super(clazz, plugin.getClass().getClassLoader());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/storage/BukkitConstructor.java;<<<<<<< MINE
				if (typeDefinitions == null) {
=======
				if (typeDefinitions == null)
				{
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/textreader/KeywordReplacer.java;<<<<<<< MINE
			balance = Double.toString(user.getMoney());
=======
			balance = Util.displayCurrency(user.getMoney(), ess);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
			&& !InventoryWorkaround.containsItem(user.getInventory(), true, true, itemStack))
=======
			&& !user.getInventory().containsAtLeast(itemStack, itemStack.getAmount()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
				success = InventoryWorkaround.addAllItems(user.getInventory(), true, getItemStack());
=======
				success = InventoryWorkaround.addAllItems(user.getInventory(), getItemStack());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
			if (!InventoryWorkaround.containsItem(user.getInventory(), true, true, itemStack))
=======
			if (!user.getInventory().containsAtLeast(itemStack, itemStack.getAmount()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Trade.java;<<<<<<< MINE
			InventoryWorkaround.removeItem(user.getInventory(), true, true, getItemStack());
=======
			user.getInventory().removeItem(getItemStack());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Kit.java;<<<<<<< MINE
					overfilled = InventoryWorkaround.addItem(user.getInventory(), true, ess.getSettings().getOversizedStackSize(), stack);
=======
					overfilled = InventoryWorkaround.addOversizedItems(user.getInventory(), ess.getSettings().getOversizedStackSize(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/Kit.java;<<<<<<< MINE
					overfilled = InventoryWorkaround.addItem(user.getInventory(), true, 0, stack);
=======
					overfilled = InventoryWorkaround.addItems(user.getInventory(), stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
	public static int first(final Inventory inventory, final ItemStack item, final boolean enforceDurability, final boolean enforceAmount, final boolean enforceEnchantments)
	{
		return next(inventory, item, 0, enforceDurability, enforceAmount, enforceEnchantments);
	}

	public static int next(final Inventory cinventory, final ItemStack item, final int start, final boolean enforceDurability, final boolean enforceAmount, final boolean enforceEnchantments)
	{
		final ItemStack[] inventory = cinventory.getContents();
		for (int i = start; i < inventory.length; i++)
		{
			final ItemStack cItem = inventory[i];
			if (cItem == null)
			{
				continue;
			}
			if (item.getTypeId() == cItem.getTypeId() && (!enforceAmount || item.getAmount() == cItem.getAmount()) && (!enforceDurability || cItem.getDurability() == item.getDurability()) && (!enforceEnchantments || cItem.getEnchantments().equals(item.getEnchantments())))
			{
				return i;
			}
		}
		return -1;
	}

	public static int firstPartial(final Inventory cinventory, final ItemStack item, final boolean enforceDurability)
	{
		return firstPartial(cinventory, item, enforceDurability, item.getType().getMaxStackSize());
	}

	public static int firstPartial(final Inventory cinventory, final ItemStack item, final boolean enforceDurability, final int maxAmount)
=======
	private static int firstPartial(final Inventory inventory, final ItemStack item, final int maxAmount)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
		final ItemStack[] inventory = cinventory.getContents();
		for (int i = 0; i < inventory.length; i++)
=======
		final ItemStack[] stacks = inventory.getContents();
		for (int i = 0; i < stacks.length; i++)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
			final ItemStack cItem = inventory[i];
			if (cItem == null)
			{
				continue;
			}
			if (item.getTypeId() == cItem.getTypeId() && cItem.getAmount() < maxAmount && (!enforceDurability || cItem.getDurability() == item.getDurability()) && cItem.getEnchantments().equals(item.getEnchantments()))
=======
			final ItemStack cItem = stacks[i];
			if (cItem != null && cItem.getAmount() < maxAmount && cItem.isSimilar(item))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
	public static boolean addAllItems(final Inventory cinventory, final boolean enforceDurability, final ItemStack... items)
=======
	public static boolean addAllItems(final Inventory inventory, final ItemStack... items)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
		final Inventory fake = new FakeInventory(cinventory.getContents());
		if (addItem(fake, enforceDurability, items).isEmpty())
=======
		final Inventory fakeInventory = Bukkit.getServer().createInventory(null, inventory.getType());
		fakeInventory.setContents(inventory.getContents());
		if (addItems(fakeInventory, items).isEmpty())
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
			addItem(cinventory, enforceDurability, items);
=======
			addItems(inventory, items);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
		else
		{
			return false;
		}
=======
		return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
	public static Map<Integer, ItemStack> addItem(final Inventory cinventory, final boolean forceDurability, final ItemStack... items)
=======
	public static Map<Integer, ItemStack> addItems(final Inventory inventory, final ItemStack... items)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
		return addItem(cinventory, forceDurability, 0, items);
=======
		return addOversizedItems(inventory, 0, items);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
	public static Map<Integer, ItemStack> addItem(final Inventory cinventory, final boolean enforceDurability, final int oversizedStacks, final ItemStack... items)
=======
	public static Map<Integer, ItemStack> addOversizedItems(final Inventory inventory, final int oversizedStacks, final ItemStack... items)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
				if (combined[j].getTypeId() == items[i].getTypeId() && (!enforceDurability || combined[j].getDurability() == items[i].getDurability()) && combined[j].getEnchantments().equals(items[i].getEnchantments()))
=======
				if (combined[j].isSimilar(items[i]))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
							cinventory.setItem(firstFree, stack);
=======
							inventory.setItem(firstFree, stack);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_22ee57c_eabbd39/rev_22ee57c-eabbd39/Essentials/src/com/earth2me/essentials/craftbukkit/InventoryWorkaround.java;<<<<<<< MINE
							cinventory.setItem(firstFree, item);
=======
							inventory.setItem(firstFree, item);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_a579845_d73bbd4/rev_a579845-d73bbd4/Essentials/src/com/earth2me/essentials/commands/Commandtpaccept.java;<<<<<<< MINE
		if (user.isTpRequestHere())
=======
		try
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_a579845_d73bbd4/rev_a579845-d73bbd4/Essentials/src/com/earth2me/essentials/commands/Commandtpaccept.java;<<<<<<< MINE
			target.getTeleport().teleportToMe(user, charge, TeleportCause.COMMAND);
=======
			if (user.isTpRequestHere())
			{
				target.getTeleport().teleportToMe(user, charge, TeleportCause.COMMAND);
			}
			else
			{
				target.getTeleport().teleport(user, charge, TeleportCause.COMMAND);
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_a579845_d73bbd4/rev_a579845-d73bbd4/Essentials/src/com/earth2me/essentials/commands/Commandtpaccept.java;<<<<<<< MINE
		else
=======
		catch (ChargeException ex)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_a579845_d73bbd4/rev_a579845-d73bbd4/Essentials/src/com/earth2me/essentials/commands/Commandtpaccept.java;<<<<<<< MINE
			target.getTeleport().teleport(user, charge, TeleportCause.COMMAND);
=======
			user.sendMessage(_("pendingTeleportCancelled"));
			ess.showError(target, ex, commandLabel);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d3ca002_df1e4a2/rev_d3ca002-df1e4a2/Essentials/src/com/earth2me/essentials/commands/Commandbook.java;<<<<<<< MINE
			ItemStack newItem = new ItemStack(Material.BOOK_AND_QUILL, item.getAmount());
			newItem.setItemMeta(meta);
			user.setItemInHand(newItem);
			user.sendMessage("You can now edit the contents of this book.");
=======
			BookMeta bmeta = (BookMeta)meta;
			if (args[0].equalsIgnoreCase("author"))
			{
				if (user.isAuthorized("essentals.book.author"))
				{
					ItemStack newbook = new ItemStack(Material.WRITTEN_BOOK, 1);
					bmeta.setAuthor(args[1]);
					newbook.setItemMeta(bmeta);
					user.setItemInHand(newbook);
					user.sendMessage(_("bookAuthorSet", args[1]));
				}
				else
				{
					user.sendMessage(_("denyChangeAuthor"));
				}
			}
			else if (args[0].equalsIgnoreCase("title"))
			{
				if (user.isAuthorized("essentials.book.title"))
				{

					if (isAuthor(bmeta, player) || user.isAuthorized("essentials.book.title.others"))
					{
						ItemStack newbook = new ItemStack(Material.WRITTEN_BOOK, 1);
						bmeta.setTitle(args[1]);
						newbook.setItemMeta(bmeta);
						user.setItemInHand(newbook);
						user.sendMessage(_("bookTitleSet", args[1]));
					}
					else
					{
						user.sendMessage(_("denyChangeTitle"));
					}
				}
				else
				{
					user.sendMessage(_("denyChangeTitle"));
				}
			}
			else
			{
				if (isAuthor(bmeta, player) || user.isAuthorized("essentials.book.others"))
				{
					ItemStack newItem = new ItemStack(Material.BOOK_AND_QUILL, item.getAmount());
					newItem.setItemMeta(meta);
					user.setItemInHand(newItem);
					user.sendMessage(_("editBookContents"));
				}
				else
				{
					user.sendMessage(_("denyBookEdit"));
				}
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d3ca002_df1e4a2/rev_d3ca002-df1e4a2/Essentials/src/com/earth2me/essentials/commands/Commandbook.java;<<<<<<< MINE
			newItem.setItemMeta(meta);
=======
			newItem.setItemMeta(bmeta);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d3ca002_df1e4a2/rev_d3ca002-df1e4a2/Essentials/src/com/earth2me/essentials/commands/Commandbook.java;<<<<<<< MINE
			user.sendMessage("This book is now locked and signed.");
=======
			user.sendMessage(_("bookLocked"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_d3ca002_df1e4a2/rev_d3ca002-df1e4a2/Essentials/src/com/earth2me/essentials/commands/Commandbook.java;<<<<<<< MINE
			throw new Exception(_("holdBook"));
=======
			throw new Exception(_("holdBook"));
		}
	}

	private boolean isAuthor(BookMeta bmeta, String player)
	{
		if (bmeta.getAuthor().equalsIgnoreCase(player))
		{
			return true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
			if (args[0].length() >= 3)
=======
			if (args[0].contentEquals("*") && user.isAuthorized("essentials.clearinventory.all"))
			{
				if (args.length > 1)
				{
					for (Player onlinePlayer : server.getOnlinePlayers())
					{
						clearInventory(onlinePlayer, args[1]);
					}
					user.sendMessage("Cleared everyone's inventory");
				}
				else
				{
					throw new NotEnoughArgumentsException();
				}
			}
			else if (args[0].length() >= 3)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
						p.getInventory().clear();
=======
						if (args.length > 1)
						{
							clearInventory(p, args[1]);
						}
						else
						{
							p.getInventory().clear();
						}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
				throw new Exception(_("playerNotFound"));
=======
				else
				{
					clearInventory(user, args[0]);
					user.sendMessage(_("inventoryCleared"));
				}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
					p.getInventory().clear();
=======
					clearInventory(p, args[1]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
					throw new Exception(_("playerNotFound"));
=======
					clearInventory(user, args[0]);
					user.sendMessage(_("inventoryCleared"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
			user.getInventory().clear();
=======
			if (args.length > 0)
			{
				clearInventory(user, args[0]);
			}
			else
			{
				user.getInventory().clear();
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
		if (args[0].length() >= 3)
=======
		if (args[0].contentEquals("*"))
		{
			if (args.length > 1)
			{
				for (Player onlinePlayer : server.getOnlinePlayers())
				{
					clearInventory(onlinePlayer, args[1]);
				}
				sender.sendMessage("Cleared everyone's inventory");
			}
			else
			{
				throw new NotEnoughArgumentsException();
			}
		}
		else if (args[0].length() >= 3)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
					p.getInventory().clear();
=======
					if (args.length > 1)
					{
						clearInventory(p, args[1]);
					}
					else
					{
						p.getInventory().clear();
					}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
			throw new Exception(_("playerNotFound"));
=======
			else
			{
				throw new Exception(_("playerNotFound"));
			}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_7bc16a6_8962ce6/rev_7bc16a6-8962ce6/Essentials/src/com/earth2me/essentials/commands/Commandclearinventory.java;<<<<<<< MINE
				u.getInventory().clear();
=======
				clearInventory(u, args[0]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_6ee21e1_e766377/rev_6ee21e1-e766377/Essentials/src/com/earth2me/essentials/MetaItemStack.java;<<<<<<< MINE
					throw new Exception(_("invalidPotionEffect", split[1]));
=======
					throw new Exception(_("invalidPotionMeta", split[1]));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandbanip.java;<<<<<<< MINE
		final User player = ess.getUser(args[0]);
		if (player == null)
=======
		String ipAddress;
		if (FormatUtil.validIP(args[0]))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandbanip.java;<<<<<<< MINE
			ipAddress = player.getLastLoginAddress();
			if (ipAddress.length() == 0)
=======
			try
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandbanip.java;<<<<<<< MINE
				throw new Exception(_("playerNotFound"));
=======
				User player = getPlayer(server, args, 0, true, true);
				ipAddress = player.getLastLoginAddress();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandbanip.java;<<<<<<< MINE
		
		ess.broadcastMessage(sender, "essentials.ban.notify", _("playerBanIpAddress", senderName, ipAddress));		
=======

		ess.broadcastMessage(sender, "essentials.ban.notify", _("playerBanIpAddress", senderName, ipAddress));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandunbanip.java;<<<<<<< MINE
			final User user = getPlayer(server, args, 0, true, true);
			ipAddress = user.getLastLoginAddress();
			if (ipAddress.isEmpty())
=======
			try
>>>>>>> YOURS
/home/paper219/Desktop/analysis/fullsample/projects/essentials/revisions/rev_8d359a2_f2cb9d8/rev_8d359a2-f2cb9d8/Essentials/src/com/earth2me/essentials/commands/Commandunbanip.java;<<<<<<< MINE
				throw new PlayerNotFoundException();
=======
				User player = getPlayer(server, args, 0, true, true);
				ipAddress = player.getLastLoginAddress();
>>>>>>> YOURS
